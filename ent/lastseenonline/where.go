// Code generated by ent, DO NOT EDIT.

package lastseenonline

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldLTE(FieldID, id))
}

// SeenAt applies equality check predicate on the "seen_at" field. It's identical to SeenAtEQ.
func SeenAt(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldEQ(FieldSeenAt, v))
}

// SeenAtEQ applies the EQ predicate on the "seen_at" field.
func SeenAtEQ(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldEQ(FieldSeenAt, v))
}

// SeenAtNEQ applies the NEQ predicate on the "seen_at" field.
func SeenAtNEQ(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldNEQ(FieldSeenAt, v))
}

// SeenAtIn applies the In predicate on the "seen_at" field.
func SeenAtIn(vs ...time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldIn(FieldSeenAt, vs...))
}

// SeenAtNotIn applies the NotIn predicate on the "seen_at" field.
func SeenAtNotIn(vs ...time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldNotIn(FieldSeenAt, vs...))
}

// SeenAtGT applies the GT predicate on the "seen_at" field.
func SeenAtGT(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldGT(FieldSeenAt, v))
}

// SeenAtGTE applies the GTE predicate on the "seen_at" field.
func SeenAtGTE(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldGTE(FieldSeenAt, v))
}

// SeenAtLT applies the LT predicate on the "seen_at" field.
func SeenAtLT(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldLT(FieldSeenAt, v))
}

// SeenAtLTE applies the LTE predicate on the "seen_at" field.
func SeenAtLTE(v time.Time) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.FieldLTE(FieldSeenAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LastSeenOnline {
	return predicate.LastSeenOnline(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LastSeenOnline) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LastSeenOnline) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LastSeenOnline) predicate.LastSeenOnline {
	return predicate.LastSeenOnline(sql.NotPredicates(p))
}
