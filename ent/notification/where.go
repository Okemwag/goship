// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldText, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadAt, v))
}

// ProfileIDWhoCausedNotification applies equality check predicate on the "profile_id_who_caused_notification" field. It's identical to ProfileIDWhoCausedNotificationEQ.
func ProfileIDWhoCausedNotification(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldProfileIDWhoCausedNotification, v))
}

// ResourceIDTiedToNotif applies equality check predicate on the "resource_id_tied_to_notif" field. It's identical to ResourceIDTiedToNotifEQ.
func ResourceIDTiedToNotif(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceIDTiedToNotif, v))
}

// ReadInNotificationsCenter applies equality check predicate on the "read_in_notifications_center" field. It's identical to ReadInNotificationsCenterEQ.
func ReadInNotificationsCenter(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadInNotificationsCenter, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTitle, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldText, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldLink, v))
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRead, v))
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadAt, v))
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldReadAt, v))
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldReadAt, vs...))
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldReadAt, vs...))
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldReadAt, v))
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldReadAt, v))
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldReadAt, v))
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldReadAt, v))
}

// ReadAtIsNil applies the IsNil predicate on the "read_at" field.
func ReadAtIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldReadAt))
}

// ReadAtNotNil applies the NotNil predicate on the "read_at" field.
func ReadAtNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldReadAt))
}

// ProfileIDWhoCausedNotificationEQ applies the EQ predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationNEQ applies the NEQ predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationNEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationIn applies the In predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldProfileIDWhoCausedNotification, vs...))
}

// ProfileIDWhoCausedNotificationNotIn applies the NotIn predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationNotIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldProfileIDWhoCausedNotification, vs...))
}

// ProfileIDWhoCausedNotificationGT applies the GT predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationGT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationGTE applies the GTE predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationGTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationLT applies the LT predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationLT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationLTE applies the LTE predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationLTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldProfileIDWhoCausedNotification, v))
}

// ProfileIDWhoCausedNotificationIsNil applies the IsNil predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldProfileIDWhoCausedNotification))
}

// ProfileIDWhoCausedNotificationNotNil applies the NotNil predicate on the "profile_id_who_caused_notification" field.
func ProfileIDWhoCausedNotificationNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldProfileIDWhoCausedNotification))
}

// ResourceIDTiedToNotifEQ applies the EQ predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifNEQ applies the NEQ predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifNEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifIn applies the In predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldResourceIDTiedToNotif, vs...))
}

// ResourceIDTiedToNotifNotIn applies the NotIn predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifNotIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldResourceIDTiedToNotif, vs...))
}

// ResourceIDTiedToNotifGT applies the GT predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifGT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifGTE applies the GTE predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifGTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifLT applies the LT predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifLT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifLTE applies the LTE predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifLTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldResourceIDTiedToNotif, v))
}

// ResourceIDTiedToNotifIsNil applies the IsNil predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldResourceIDTiedToNotif))
}

// ResourceIDTiedToNotifNotNil applies the NotNil predicate on the "resource_id_tied_to_notif" field.
func ResourceIDTiedToNotifNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldResourceIDTiedToNotif))
}

// ReadInNotificationsCenterEQ applies the EQ predicate on the "read_in_notifications_center" field.
func ReadInNotificationsCenterEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadInNotificationsCenter, v))
}

// ReadInNotificationsCenterNEQ applies the NEQ predicate on the "read_in_notifications_center" field.
func ReadInNotificationsCenterNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldReadInNotificationsCenter, v))
}

// ReadInNotificationsCenterIsNil applies the IsNil predicate on the "read_in_notifications_center" field.
func ReadInNotificationsCenterIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldReadInNotificationsCenter))
}

// ReadInNotificationsCenterNotNil applies the NotNil predicate on the "read_in_notifications_center" field.
func ReadInNotificationsCenterNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldReadInNotificationsCenter))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
