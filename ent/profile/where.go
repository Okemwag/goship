// Code generated by ent, DO NOT EDIT.

package profile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBio, v))
}

// Birthdate applies equality check predicate on the "birthdate" field. It's identical to BirthdateEQ.
func Birthdate(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBirthdate, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAge, v))
}

// FullyOnboarded applies equality check predicate on the "fully_onboarded" field. It's identical to FullyOnboardedEQ.
func FullyOnboarded(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldFullyOnboarded, v))
}

// PhoneNumberE164 applies equality check predicate on the "phone_number_e164" field. It's identical to PhoneNumberE164EQ.
func PhoneNumberE164(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldPhoneNumberE164, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCountryCode, v))
}

// PhoneVerified applies equality check predicate on the "phone_verified" field. It's identical to PhoneVerifiedEQ.
func PhoneVerified(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldPhoneVerified, v))
}

// StripeID applies equality check predicate on the "stripe_id" field. It's identical to StripeIDEQ.
func StripeID(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldStripeID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldUpdatedAt, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldBio, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldBio))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldBio, v))
}

// BirthdateEQ applies the EQ predicate on the "birthdate" field.
func BirthdateEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBirthdate, v))
}

// BirthdateNEQ applies the NEQ predicate on the "birthdate" field.
func BirthdateNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldBirthdate, v))
}

// BirthdateIn applies the In predicate on the "birthdate" field.
func BirthdateIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldBirthdate, vs...))
}

// BirthdateNotIn applies the NotIn predicate on the "birthdate" field.
func BirthdateNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldBirthdate, vs...))
}

// BirthdateGT applies the GT predicate on the "birthdate" field.
func BirthdateGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldBirthdate, v))
}

// BirthdateGTE applies the GTE predicate on the "birthdate" field.
func BirthdateGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldBirthdate, v))
}

// BirthdateLT applies the LT predicate on the "birthdate" field.
func BirthdateLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldBirthdate, v))
}

// BirthdateLTE applies the LTE predicate on the "birthdate" field.
func BirthdateLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldBirthdate, v))
}

// BirthdateIsNil applies the IsNil predicate on the "birthdate" field.
func BirthdateIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldBirthdate))
}

// BirthdateNotNil applies the NotNil predicate on the "birthdate" field.
func BirthdateNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldBirthdate))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldAge, v))
}

// AgeIsNil applies the IsNil predicate on the "age" field.
func AgeIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldAge))
}

// AgeNotNil applies the NotNil predicate on the "age" field.
func AgeNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldAge))
}

// FullyOnboardedEQ applies the EQ predicate on the "fully_onboarded" field.
func FullyOnboardedEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldFullyOnboarded, v))
}

// FullyOnboardedNEQ applies the NEQ predicate on the "fully_onboarded" field.
func FullyOnboardedNEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldFullyOnboarded, v))
}

// PhoneNumberE164EQ applies the EQ predicate on the "phone_number_e164" field.
func PhoneNumberE164EQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldPhoneNumberE164, v))
}

// PhoneNumberE164NEQ applies the NEQ predicate on the "phone_number_e164" field.
func PhoneNumberE164NEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldPhoneNumberE164, v))
}

// PhoneNumberE164In applies the In predicate on the "phone_number_e164" field.
func PhoneNumberE164In(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldPhoneNumberE164, vs...))
}

// PhoneNumberE164NotIn applies the NotIn predicate on the "phone_number_e164" field.
func PhoneNumberE164NotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldPhoneNumberE164, vs...))
}

// PhoneNumberE164GT applies the GT predicate on the "phone_number_e164" field.
func PhoneNumberE164GT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldPhoneNumberE164, v))
}

// PhoneNumberE164GTE applies the GTE predicate on the "phone_number_e164" field.
func PhoneNumberE164GTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldPhoneNumberE164, v))
}

// PhoneNumberE164LT applies the LT predicate on the "phone_number_e164" field.
func PhoneNumberE164LT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldPhoneNumberE164, v))
}

// PhoneNumberE164LTE applies the LTE predicate on the "phone_number_e164" field.
func PhoneNumberE164LTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldPhoneNumberE164, v))
}

// PhoneNumberE164Contains applies the Contains predicate on the "phone_number_e164" field.
func PhoneNumberE164Contains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldPhoneNumberE164, v))
}

// PhoneNumberE164HasPrefix applies the HasPrefix predicate on the "phone_number_e164" field.
func PhoneNumberE164HasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldPhoneNumberE164, v))
}

// PhoneNumberE164HasSuffix applies the HasSuffix predicate on the "phone_number_e164" field.
func PhoneNumberE164HasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldPhoneNumberE164, v))
}

// PhoneNumberE164IsNil applies the IsNil predicate on the "phone_number_e164" field.
func PhoneNumberE164IsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldPhoneNumberE164))
}

// PhoneNumberE164NotNil applies the NotNil predicate on the "phone_number_e164" field.
func PhoneNumberE164NotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldPhoneNumberE164))
}

// PhoneNumberE164EqualFold applies the EqualFold predicate on the "phone_number_e164" field.
func PhoneNumberE164EqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldPhoneNumberE164, v))
}

// PhoneNumberE164ContainsFold applies the ContainsFold predicate on the "phone_number_e164" field.
func PhoneNumberE164ContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldPhoneNumberE164, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeIsNil applies the IsNil predicate on the "country_code" field.
func CountryCodeIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldCountryCode))
}

// CountryCodeNotNil applies the NotNil predicate on the "country_code" field.
func CountryCodeNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldCountryCode))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldCountryCode, v))
}

// PhoneVerifiedEQ applies the EQ predicate on the "phone_verified" field.
func PhoneVerifiedEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldPhoneVerified, v))
}

// PhoneVerifiedNEQ applies the NEQ predicate on the "phone_verified" field.
func PhoneVerifiedNEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldPhoneVerified, v))
}

// PhoneVerifiedIsNil applies the IsNil predicate on the "phone_verified" field.
func PhoneVerifiedIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldPhoneVerified))
}

// PhoneVerifiedNotNil applies the NotNil predicate on the "phone_verified" field.
func PhoneVerifiedNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldPhoneVerified))
}

// StripeIDEQ applies the EQ predicate on the "stripe_id" field.
func StripeIDEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldStripeID, v))
}

// StripeIDNEQ applies the NEQ predicate on the "stripe_id" field.
func StripeIDNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldStripeID, v))
}

// StripeIDIn applies the In predicate on the "stripe_id" field.
func StripeIDIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldStripeID, vs...))
}

// StripeIDNotIn applies the NotIn predicate on the "stripe_id" field.
func StripeIDNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldStripeID, vs...))
}

// StripeIDGT applies the GT predicate on the "stripe_id" field.
func StripeIDGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldStripeID, v))
}

// StripeIDGTE applies the GTE predicate on the "stripe_id" field.
func StripeIDGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldStripeID, v))
}

// StripeIDLT applies the LT predicate on the "stripe_id" field.
func StripeIDLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldStripeID, v))
}

// StripeIDLTE applies the LTE predicate on the "stripe_id" field.
func StripeIDLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldStripeID, v))
}

// StripeIDContains applies the Contains predicate on the "stripe_id" field.
func StripeIDContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldStripeID, v))
}

// StripeIDHasPrefix applies the HasPrefix predicate on the "stripe_id" field.
func StripeIDHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldStripeID, v))
}

// StripeIDHasSuffix applies the HasSuffix predicate on the "stripe_id" field.
func StripeIDHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldStripeID, v))
}

// StripeIDIsNil applies the IsNil predicate on the "stripe_id" field.
func StripeIDIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldStripeID))
}

// StripeIDNotNil applies the NotNil predicate on the "stripe_id" field.
func StripeIDNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldStripeID))
}

// StripeIDEqualFold applies the EqualFold predicate on the "stripe_id" field.
func StripeIDEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldStripeID, v))
}

// StripeIDContainsFold applies the ContainsFold predicate on the "stripe_id" field.
func StripeIDContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldStripeID, v))
}

// HasFriends applies the HasEdge predicate on the "friends" edge.
func HasFriends() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FriendsTable, FriendsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFriendsWith applies the HasEdge predicate on the "friends" edge with a given conditions (other predicates).
func HasFriendsWith(preds ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newFriendsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhotos applies the HasEdge predicate on the "photos" edge.
func HasPhotos() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhotosTable, PhotosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhotosWith applies the HasEdge predicate on the "photos" edge with a given conditions (other predicates).
func HasPhotosWith(preds ...predicate.Image) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newPhotosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfileImage applies the HasEdge predicate on the "profile_image" edge.
func HasProfileImage() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileImageTable, ProfileImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileImageWith applies the HasEdge predicate on the "profile_image" edge with a given conditions (other predicates).
func HasProfileImageWith(preds ...predicate.Image) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newProfileImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitations applies the HasEdge predicate on the "invitations" edge.
func HasInvitations() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvitationsTable, InvitationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitationsWith applies the HasEdge predicate on the "invitations" edge with a given conditions (other predicates).
func HasInvitationsWith(preds ...predicate.Invitation) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newInvitationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFcmPushSubscriptions applies the HasEdge predicate on the "fcm_push_subscriptions" edge.
func HasFcmPushSubscriptions() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FcmPushSubscriptionsTable, FcmPushSubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFcmPushSubscriptionsWith applies the HasEdge predicate on the "fcm_push_subscriptions" edge with a given conditions (other predicates).
func HasFcmPushSubscriptionsWith(preds ...predicate.FCMSubscriptions) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newFcmPushSubscriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPwaPushSubscriptions applies the HasEdge predicate on the "pwa_push_subscriptions" edge.
func HasPwaPushSubscriptions() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PwaPushSubscriptionsTable, PwaPushSubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPwaPushSubscriptionsWith applies the HasEdge predicate on the "pwa_push_subscriptions" edge with a given conditions (other predicates).
func HasPwaPushSubscriptionsWith(preds ...predicate.PwaPushSubscription) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newPwaPushSubscriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationPermissions applies the HasEdge predicate on the "notification_permissions" edge.
func HasNotificationPermissions() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationPermissionsTable, NotificationPermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationPermissionsWith applies the HasEdge predicate on the "notification_permissions" edge with a given conditions (other predicates).
func HasNotificationPermissionsWith(preds ...predicate.NotificationPermission) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newNotificationPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationTimes applies the HasEdge predicate on the "notification_times" edge.
func HasNotificationTimes() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationTimesTable, NotificationTimesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationTimesWith applies the HasEdge predicate on the "notification_times" edge with a given conditions (other predicates).
func HasNotificationTimesWith(preds ...predicate.NotificationTime) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newNotificationTimesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhoneVerificationCode applies the HasEdge predicate on the "phone_verification_code" edge.
func HasPhoneVerificationCode() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhoneVerificationCodeTable, PhoneVerificationCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhoneVerificationCodeWith applies the HasEdge predicate on the "phone_verification_code" edge with a given conditions (other predicates).
func HasPhoneVerificationCodeWith(preds ...predicate.PhoneVerificationCode) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newPhoneVerificationCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentEmails applies the HasEdge predicate on the "sent_emails" edge.
func HasSentEmails() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentEmailsTable, SentEmailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentEmailsWith applies the HasEdge predicate on the "sent_emails" edge with a given conditions (other predicates).
func HasSentEmailsWith(preds ...predicate.SentEmail) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newSentEmailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscriptionTable, SubscriptionPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.MonthlySubscription) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(sql.NotPredicates(p))
}
