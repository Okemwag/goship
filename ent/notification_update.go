// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/notification"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetType sets the "type" field.
func (nu *NotificationUpdate) SetType(n notification.Type) *NotificationUpdate {
	nu.mutation.SetType(n)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableType(n *notification.Type) *NotificationUpdate {
	if n != nil {
		nu.SetType(*n)
	}
	return nu
}

// SetTitle sets the "title" field.
func (nu *NotificationUpdate) SetTitle(s string) *NotificationUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableTitle(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// SetText sets the "text" field.
func (nu *NotificationUpdate) SetText(s string) *NotificationUpdate {
	nu.mutation.SetText(s)
	return nu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableText(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetText(*s)
	}
	return nu
}

// SetLink sets the "link" field.
func (nu *NotificationUpdate) SetLink(s string) *NotificationUpdate {
	nu.mutation.SetLink(s)
	return nu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableLink(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetLink(*s)
	}
	return nu
}

// ClearLink clears the value of the "link" field.
func (nu *NotificationUpdate) ClearLink() *NotificationUpdate {
	nu.mutation.ClearLink()
	return nu
}

// SetRead sets the "read" field.
func (nu *NotificationUpdate) SetRead(b bool) *NotificationUpdate {
	nu.mutation.SetRead(b)
	return nu
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRead(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetRead(*b)
	}
	return nu
}

// SetReadAt sets the "read_at" field.
func (nu *NotificationUpdate) SetReadAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetReadAt(t)
	return nu
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableReadAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetReadAt(*t)
	}
	return nu
}

// ClearReadAt clears the value of the "read_at" field.
func (nu *NotificationUpdate) ClearReadAt() *NotificationUpdate {
	nu.mutation.ClearReadAt()
	return nu
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (nu *NotificationUpdate) SetProfileIDWhoCausedNotification(i int) *NotificationUpdate {
	nu.mutation.ResetProfileIDWhoCausedNotification()
	nu.mutation.SetProfileIDWhoCausedNotification(i)
	return nu
}

// SetNillableProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableProfileIDWhoCausedNotification(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetProfileIDWhoCausedNotification(*i)
	}
	return nu
}

// AddProfileIDWhoCausedNotification adds i to the "profile_id_who_caused_notification" field.
func (nu *NotificationUpdate) AddProfileIDWhoCausedNotification(i int) *NotificationUpdate {
	nu.mutation.AddProfileIDWhoCausedNotification(i)
	return nu
}

// ClearProfileIDWhoCausedNotification clears the value of the "profile_id_who_caused_notification" field.
func (nu *NotificationUpdate) ClearProfileIDWhoCausedNotification() *NotificationUpdate {
	nu.mutation.ClearProfileIDWhoCausedNotification()
	return nu
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (nu *NotificationUpdate) SetResourceIDTiedToNotif(i int) *NotificationUpdate {
	nu.mutation.ResetResourceIDTiedToNotif()
	nu.mutation.SetResourceIDTiedToNotif(i)
	return nu
}

// SetNillableResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableResourceIDTiedToNotif(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetResourceIDTiedToNotif(*i)
	}
	return nu
}

// AddResourceIDTiedToNotif adds i to the "resource_id_tied_to_notif" field.
func (nu *NotificationUpdate) AddResourceIDTiedToNotif(i int) *NotificationUpdate {
	nu.mutation.AddResourceIDTiedToNotif(i)
	return nu
}

// ClearResourceIDTiedToNotif clears the value of the "resource_id_tied_to_notif" field.
func (nu *NotificationUpdate) ClearResourceIDTiedToNotif() *NotificationUpdate {
	nu.mutation.ClearResourceIDTiedToNotif()
	return nu
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (nu *NotificationUpdate) SetReadInNotificationsCenter(b bool) *NotificationUpdate {
	nu.mutation.SetReadInNotificationsCenter(b)
	return nu
}

// SetNillableReadInNotificationsCenter sets the "read_in_notifications_center" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableReadInNotificationsCenter(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetReadInNotificationsCenter(*b)
	}
	return nu
}

// ClearReadInNotificationsCenter clears the value of the "read_in_notifications_center" field.
func (nu *NotificationUpdate) ClearReadInNotificationsCenter() *NotificationUpdate {
	nu.mutation.ClearReadInNotificationsCenter()
	return nu
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (nu *NotificationUpdate) SetProfileID(id int) *NotificationUpdate {
	nu.mutation.SetProfileID(id)
	return nu
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableProfileID(id *int) *NotificationUpdate {
	if id != nil {
		nu = nu.SetProfileID(*id)
	}
	return nu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nu *NotificationUpdate) SetProfile(p *Profile) *NotificationUpdate {
	return nu.SetProfileID(p.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (nu *NotificationUpdate) ClearProfile() *NotificationUpdate {
	nu.mutation.ClearProfile()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	if err := nu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() error {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		if notification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Text(); ok {
		_spec.SetField(notification.FieldText, field.TypeString, value)
	}
	if value, ok := nu.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
	}
	if nu.mutation.LinkCleared() {
		_spec.ClearField(notification.FieldLink, field.TypeString)
	}
	if value, ok := nu.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nu.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if nu.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := nu.mutation.ProfileIDWhoCausedNotification(); ok {
		_spec.SetField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedProfileIDWhoCausedNotification(); ok {
		_spec.AddField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt, value)
	}
	if nu.mutation.ProfileIDWhoCausedNotificationCleared() {
		_spec.ClearField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt)
	}
	if value, ok := nu.mutation.ResourceIDTiedToNotif(); ok {
		_spec.SetField(notification.FieldResourceIDTiedToNotif, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedResourceIDTiedToNotif(); ok {
		_spec.AddField(notification.FieldResourceIDTiedToNotif, field.TypeInt, value)
	}
	if nu.mutation.ResourceIDTiedToNotifCleared() {
		_spec.ClearField(notification.FieldResourceIDTiedToNotif, field.TypeInt)
	}
	if value, ok := nu.mutation.ReadInNotificationsCenter(); ok {
		_spec.SetField(notification.FieldReadInNotificationsCenter, field.TypeBool, value)
	}
	if nu.mutation.ReadInNotificationsCenterCleared() {
		_spec.ClearField(notification.FieldReadInNotificationsCenter, field.TypeBool)
	}
	if nu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ProfileTable,
			Columns: []string{notification.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ProfileTable,
			Columns: []string{notification.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetType sets the "type" field.
func (nuo *NotificationUpdateOne) SetType(n notification.Type) *NotificationUpdateOne {
	nuo.mutation.SetType(n)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableType(n *notification.Type) *NotificationUpdateOne {
	if n != nil {
		nuo.SetType(*n)
	}
	return nuo
}

// SetTitle sets the "title" field.
func (nuo *NotificationUpdateOne) SetTitle(s string) *NotificationUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableTitle(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// SetText sets the "text" field.
func (nuo *NotificationUpdateOne) SetText(s string) *NotificationUpdateOne {
	nuo.mutation.SetText(s)
	return nuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableText(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetText(*s)
	}
	return nuo
}

// SetLink sets the "link" field.
func (nuo *NotificationUpdateOne) SetLink(s string) *NotificationUpdateOne {
	nuo.mutation.SetLink(s)
	return nuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableLink(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetLink(*s)
	}
	return nuo
}

// ClearLink clears the value of the "link" field.
func (nuo *NotificationUpdateOne) ClearLink() *NotificationUpdateOne {
	nuo.mutation.ClearLink()
	return nuo
}

// SetRead sets the "read" field.
func (nuo *NotificationUpdateOne) SetRead(b bool) *NotificationUpdateOne {
	nuo.mutation.SetRead(b)
	return nuo
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRead(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetRead(*b)
	}
	return nuo
}

// SetReadAt sets the "read_at" field.
func (nuo *NotificationUpdateOne) SetReadAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetReadAt(t)
	return nuo
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableReadAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetReadAt(*t)
	}
	return nuo
}

// ClearReadAt clears the value of the "read_at" field.
func (nuo *NotificationUpdateOne) ClearReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearReadAt()
	return nuo
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (nuo *NotificationUpdateOne) SetProfileIDWhoCausedNotification(i int) *NotificationUpdateOne {
	nuo.mutation.ResetProfileIDWhoCausedNotification()
	nuo.mutation.SetProfileIDWhoCausedNotification(i)
	return nuo
}

// SetNillableProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableProfileIDWhoCausedNotification(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetProfileIDWhoCausedNotification(*i)
	}
	return nuo
}

// AddProfileIDWhoCausedNotification adds i to the "profile_id_who_caused_notification" field.
func (nuo *NotificationUpdateOne) AddProfileIDWhoCausedNotification(i int) *NotificationUpdateOne {
	nuo.mutation.AddProfileIDWhoCausedNotification(i)
	return nuo
}

// ClearProfileIDWhoCausedNotification clears the value of the "profile_id_who_caused_notification" field.
func (nuo *NotificationUpdateOne) ClearProfileIDWhoCausedNotification() *NotificationUpdateOne {
	nuo.mutation.ClearProfileIDWhoCausedNotification()
	return nuo
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (nuo *NotificationUpdateOne) SetResourceIDTiedToNotif(i int) *NotificationUpdateOne {
	nuo.mutation.ResetResourceIDTiedToNotif()
	nuo.mutation.SetResourceIDTiedToNotif(i)
	return nuo
}

// SetNillableResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableResourceIDTiedToNotif(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetResourceIDTiedToNotif(*i)
	}
	return nuo
}

// AddResourceIDTiedToNotif adds i to the "resource_id_tied_to_notif" field.
func (nuo *NotificationUpdateOne) AddResourceIDTiedToNotif(i int) *NotificationUpdateOne {
	nuo.mutation.AddResourceIDTiedToNotif(i)
	return nuo
}

// ClearResourceIDTiedToNotif clears the value of the "resource_id_tied_to_notif" field.
func (nuo *NotificationUpdateOne) ClearResourceIDTiedToNotif() *NotificationUpdateOne {
	nuo.mutation.ClearResourceIDTiedToNotif()
	return nuo
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (nuo *NotificationUpdateOne) SetReadInNotificationsCenter(b bool) *NotificationUpdateOne {
	nuo.mutation.SetReadInNotificationsCenter(b)
	return nuo
}

// SetNillableReadInNotificationsCenter sets the "read_in_notifications_center" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableReadInNotificationsCenter(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetReadInNotificationsCenter(*b)
	}
	return nuo
}

// ClearReadInNotificationsCenter clears the value of the "read_in_notifications_center" field.
func (nuo *NotificationUpdateOne) ClearReadInNotificationsCenter() *NotificationUpdateOne {
	nuo.mutation.ClearReadInNotificationsCenter()
	return nuo
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (nuo *NotificationUpdateOne) SetProfileID(id int) *NotificationUpdateOne {
	nuo.mutation.SetProfileID(id)
	return nuo
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableProfileID(id *int) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetProfileID(*id)
	}
	return nuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nuo *NotificationUpdateOne) SetProfile(p *Profile) *NotificationUpdateOne {
	return nuo.SetProfileID(p.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (nuo *NotificationUpdateOne) ClearProfile() *NotificationUpdateOne {
	nuo.mutation.ClearProfile()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	if err := nuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() error {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		if notification.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Text(); ok {
		_spec.SetField(notification.FieldText, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
	}
	if nuo.mutation.LinkCleared() {
		_spec.ClearField(notification.FieldLink, field.TypeString)
	}
	if value, ok := nuo.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if nuo.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.ProfileIDWhoCausedNotification(); ok {
		_spec.SetField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedProfileIDWhoCausedNotification(); ok {
		_spec.AddField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt, value)
	}
	if nuo.mutation.ProfileIDWhoCausedNotificationCleared() {
		_spec.ClearField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt)
	}
	if value, ok := nuo.mutation.ResourceIDTiedToNotif(); ok {
		_spec.SetField(notification.FieldResourceIDTiedToNotif, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedResourceIDTiedToNotif(); ok {
		_spec.AddField(notification.FieldResourceIDTiedToNotif, field.TypeInt, value)
	}
	if nuo.mutation.ResourceIDTiedToNotifCleared() {
		_spec.ClearField(notification.FieldResourceIDTiedToNotif, field.TypeInt)
	}
	if value, ok := nuo.mutation.ReadInNotificationsCenter(); ok {
		_spec.SetField(notification.FieldReadInNotificationsCenter, field.TypeBool, value)
	}
	if nuo.mutation.ReadInNotificationsCenterCleared() {
		_spec.ClearField(notification.FieldReadInNotificationsCenter, field.TypeBool)
	}
	if nuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ProfileTable,
			Columns: []string{notification.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ProfileTable,
			Columns: []string{notification.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
