// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/notificationpermission"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationPermissionQuery is the builder for querying NotificationPermission entities.
type NotificationPermissionQuery struct {
	config
	ctx         *QueryContext
	order       []notificationpermission.OrderOption
	inters      []Interceptor
	predicates  []predicate.NotificationPermission
	withProfile *ProfileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NotificationPermissionQuery builder.
func (npq *NotificationPermissionQuery) Where(ps ...predicate.NotificationPermission) *NotificationPermissionQuery {
	npq.predicates = append(npq.predicates, ps...)
	return npq
}

// Limit the number of records to be returned by this query.
func (npq *NotificationPermissionQuery) Limit(limit int) *NotificationPermissionQuery {
	npq.ctx.Limit = &limit
	return npq
}

// Offset to start from.
func (npq *NotificationPermissionQuery) Offset(offset int) *NotificationPermissionQuery {
	npq.ctx.Offset = &offset
	return npq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (npq *NotificationPermissionQuery) Unique(unique bool) *NotificationPermissionQuery {
	npq.ctx.Unique = &unique
	return npq
}

// Order specifies how the records should be ordered.
func (npq *NotificationPermissionQuery) Order(o ...notificationpermission.OrderOption) *NotificationPermissionQuery {
	npq.order = append(npq.order, o...)
	return npq
}

// QueryProfile chains the current query on the "profile" edge.
func (npq *NotificationPermissionQuery) QueryProfile() *ProfileQuery {
	query := (&ProfileClient{config: npq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := npq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := npq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationpermission.Table, notificationpermission.FieldID, selector),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationpermission.ProfileTable, notificationpermission.ProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(npq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NotificationPermission entity from the query.
// Returns a *NotFoundError when no NotificationPermission was found.
func (npq *NotificationPermissionQuery) First(ctx context.Context) (*NotificationPermission, error) {
	nodes, err := npq.Limit(1).All(setContextOp(ctx, npq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{notificationpermission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (npq *NotificationPermissionQuery) FirstX(ctx context.Context) *NotificationPermission {
	node, err := npq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NotificationPermission ID from the query.
// Returns a *NotFoundError when no NotificationPermission ID was found.
func (npq *NotificationPermissionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = npq.Limit(1).IDs(setContextOp(ctx, npq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{notificationpermission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (npq *NotificationPermissionQuery) FirstIDX(ctx context.Context) int {
	id, err := npq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NotificationPermission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NotificationPermission entity is found.
// Returns a *NotFoundError when no NotificationPermission entities are found.
func (npq *NotificationPermissionQuery) Only(ctx context.Context) (*NotificationPermission, error) {
	nodes, err := npq.Limit(2).All(setContextOp(ctx, npq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{notificationpermission.Label}
	default:
		return nil, &NotSingularError{notificationpermission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (npq *NotificationPermissionQuery) OnlyX(ctx context.Context) *NotificationPermission {
	node, err := npq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NotificationPermission ID in the query.
// Returns a *NotSingularError when more than one NotificationPermission ID is found.
// Returns a *NotFoundError when no entities are found.
func (npq *NotificationPermissionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = npq.Limit(2).IDs(setContextOp(ctx, npq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{notificationpermission.Label}
	default:
		err = &NotSingularError{notificationpermission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (npq *NotificationPermissionQuery) OnlyIDX(ctx context.Context) int {
	id, err := npq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NotificationPermissions.
func (npq *NotificationPermissionQuery) All(ctx context.Context) ([]*NotificationPermission, error) {
	ctx = setContextOp(ctx, npq.ctx, ent.OpQueryAll)
	if err := npq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NotificationPermission, *NotificationPermissionQuery]()
	return withInterceptors[[]*NotificationPermission](ctx, npq, qr, npq.inters)
}

// AllX is like All, but panics if an error occurs.
func (npq *NotificationPermissionQuery) AllX(ctx context.Context) []*NotificationPermission {
	nodes, err := npq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NotificationPermission IDs.
func (npq *NotificationPermissionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if npq.ctx.Unique == nil && npq.path != nil {
		npq.Unique(true)
	}
	ctx = setContextOp(ctx, npq.ctx, ent.OpQueryIDs)
	if err = npq.Select(notificationpermission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (npq *NotificationPermissionQuery) IDsX(ctx context.Context) []int {
	ids, err := npq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (npq *NotificationPermissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, npq.ctx, ent.OpQueryCount)
	if err := npq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, npq, querierCount[*NotificationPermissionQuery](), npq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (npq *NotificationPermissionQuery) CountX(ctx context.Context) int {
	count, err := npq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (npq *NotificationPermissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, npq.ctx, ent.OpQueryExist)
	switch _, err := npq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (npq *NotificationPermissionQuery) ExistX(ctx context.Context) bool {
	exist, err := npq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NotificationPermissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (npq *NotificationPermissionQuery) Clone() *NotificationPermissionQuery {
	if npq == nil {
		return nil
	}
	return &NotificationPermissionQuery{
		config:      npq.config,
		ctx:         npq.ctx.Clone(),
		order:       append([]notificationpermission.OrderOption{}, npq.order...),
		inters:      append([]Interceptor{}, npq.inters...),
		predicates:  append([]predicate.NotificationPermission{}, npq.predicates...),
		withProfile: npq.withProfile.Clone(),
		// clone intermediate query.
		sql:  npq.sql.Clone(),
		path: npq.path,
	}
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (npq *NotificationPermissionQuery) WithProfile(opts ...func(*ProfileQuery)) *NotificationPermissionQuery {
	query := (&ProfileClient{config: npq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	npq.withProfile = query
	return npq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NotificationPermission.Query().
//		GroupBy(notificationpermission.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (npq *NotificationPermissionQuery) GroupBy(field string, fields ...string) *NotificationPermissionGroupBy {
	npq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NotificationPermissionGroupBy{build: npq}
	grbuild.flds = &npq.ctx.Fields
	grbuild.label = notificationpermission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.NotificationPermission.Query().
//		Select(notificationpermission.FieldCreatedAt).
//		Scan(ctx, &v)
func (npq *NotificationPermissionQuery) Select(fields ...string) *NotificationPermissionSelect {
	npq.ctx.Fields = append(npq.ctx.Fields, fields...)
	sbuild := &NotificationPermissionSelect{NotificationPermissionQuery: npq}
	sbuild.label = notificationpermission.Label
	sbuild.flds, sbuild.scan = &npq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NotificationPermissionSelect configured with the given aggregations.
func (npq *NotificationPermissionQuery) Aggregate(fns ...AggregateFunc) *NotificationPermissionSelect {
	return npq.Select().Aggregate(fns...)
}

func (npq *NotificationPermissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range npq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, npq); err != nil {
				return err
			}
		}
	}
	for _, f := range npq.ctx.Fields {
		if !notificationpermission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if npq.path != nil {
		prev, err := npq.path(ctx)
		if err != nil {
			return err
		}
		npq.sql = prev
	}
	return nil
}

func (npq *NotificationPermissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NotificationPermission, error) {
	var (
		nodes       = []*NotificationPermission{}
		_spec       = npq.querySpec()
		loadedTypes = [1]bool{
			npq.withProfile != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NotificationPermission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NotificationPermission{config: npq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, npq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := npq.withProfile; query != nil {
		if err := npq.loadProfile(ctx, query, nodes, nil,
			func(n *NotificationPermission, e *Profile) { n.Edges.Profile = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (npq *NotificationPermissionQuery) loadProfile(ctx context.Context, query *ProfileQuery, nodes []*NotificationPermission, init func(*NotificationPermission), assign func(*NotificationPermission, *Profile)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NotificationPermission)
	for i := range nodes {
		fk := nodes[i].ProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(profile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (npq *NotificationPermissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := npq.querySpec()
	_spec.Node.Columns = npq.ctx.Fields
	if len(npq.ctx.Fields) > 0 {
		_spec.Unique = npq.ctx.Unique != nil && *npq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, npq.driver, _spec)
}

func (npq *NotificationPermissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(notificationpermission.Table, notificationpermission.Columns, sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt))
	_spec.From = npq.sql
	if unique := npq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if npq.path != nil {
		_spec.Unique = true
	}
	if fields := npq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationpermission.FieldID)
		for i := range fields {
			if fields[i] != notificationpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if npq.withProfile != nil {
			_spec.Node.AddColumnOnce(notificationpermission.FieldProfileID)
		}
	}
	if ps := npq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := npq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := npq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := npq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (npq *NotificationPermissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(npq.driver.Dialect())
	t1 := builder.Table(notificationpermission.Table)
	columns := npq.ctx.Fields
	if len(columns) == 0 {
		columns = notificationpermission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if npq.sql != nil {
		selector = npq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if npq.ctx.Unique != nil && *npq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range npq.predicates {
		p(selector)
	}
	for _, p := range npq.order {
		p(selector)
	}
	if offset := npq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := npq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NotificationPermissionGroupBy is the group-by builder for NotificationPermission entities.
type NotificationPermissionGroupBy struct {
	selector
	build *NotificationPermissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (npgb *NotificationPermissionGroupBy) Aggregate(fns ...AggregateFunc) *NotificationPermissionGroupBy {
	npgb.fns = append(npgb.fns, fns...)
	return npgb
}

// Scan applies the selector query and scans the result into the given value.
func (npgb *NotificationPermissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, npgb.build.ctx, ent.OpQueryGroupBy)
	if err := npgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationPermissionQuery, *NotificationPermissionGroupBy](ctx, npgb.build, npgb, npgb.build.inters, v)
}

func (npgb *NotificationPermissionGroupBy) sqlScan(ctx context.Context, root *NotificationPermissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(npgb.fns))
	for _, fn := range npgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*npgb.flds)+len(npgb.fns))
		for _, f := range *npgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*npgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := npgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NotificationPermissionSelect is the builder for selecting fields of NotificationPermission entities.
type NotificationPermissionSelect struct {
	*NotificationPermissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nps *NotificationPermissionSelect) Aggregate(fns ...AggregateFunc) *NotificationPermissionSelect {
	nps.fns = append(nps.fns, fns...)
	return nps
}

// Scan applies the selector query and scans the result into the given value.
func (nps *NotificationPermissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nps.ctx, ent.OpQuerySelect)
	if err := nps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NotificationPermissionQuery, *NotificationPermissionSelect](ctx, nps.NotificationPermissionQuery, nps, nps.inters, v)
}

func (nps *NotificationPermissionSelect) sqlScan(ctx context.Context, root *NotificationPermissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nps.fns))
	for _, fn := range nps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
