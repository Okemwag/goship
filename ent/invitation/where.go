// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// InviteeName applies equality check predicate on the "invitee_name" field. It's identical to InviteeNameEQ.
func InviteeName(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInviteeName, v))
}

// ConfirmationCode applies equality check predicate on the "confirmation_code" field. It's identical to ConfirmationCodeEQ.
func ConfirmationCode(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldConfirmationCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldUpdatedAt, v))
}

// InviteeNameEQ applies the EQ predicate on the "invitee_name" field.
func InviteeNameEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldInviteeName, v))
}

// InviteeNameNEQ applies the NEQ predicate on the "invitee_name" field.
func InviteeNameNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldInviteeName, v))
}

// InviteeNameIn applies the In predicate on the "invitee_name" field.
func InviteeNameIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldInviteeName, vs...))
}

// InviteeNameNotIn applies the NotIn predicate on the "invitee_name" field.
func InviteeNameNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldInviteeName, vs...))
}

// InviteeNameGT applies the GT predicate on the "invitee_name" field.
func InviteeNameGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldInviteeName, v))
}

// InviteeNameGTE applies the GTE predicate on the "invitee_name" field.
func InviteeNameGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldInviteeName, v))
}

// InviteeNameLT applies the LT predicate on the "invitee_name" field.
func InviteeNameLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldInviteeName, v))
}

// InviteeNameLTE applies the LTE predicate on the "invitee_name" field.
func InviteeNameLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldInviteeName, v))
}

// InviteeNameContains applies the Contains predicate on the "invitee_name" field.
func InviteeNameContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldInviteeName, v))
}

// InviteeNameHasPrefix applies the HasPrefix predicate on the "invitee_name" field.
func InviteeNameHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldInviteeName, v))
}

// InviteeNameHasSuffix applies the HasSuffix predicate on the "invitee_name" field.
func InviteeNameHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldInviteeName, v))
}

// InviteeNameEqualFold applies the EqualFold predicate on the "invitee_name" field.
func InviteeNameEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldInviteeName, v))
}

// InviteeNameContainsFold applies the ContainsFold predicate on the "invitee_name" field.
func InviteeNameContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldInviteeName, v))
}

// ConfirmationCodeEQ applies the EQ predicate on the "confirmation_code" field.
func ConfirmationCodeEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldConfirmationCode, v))
}

// ConfirmationCodeNEQ applies the NEQ predicate on the "confirmation_code" field.
func ConfirmationCodeNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldConfirmationCode, v))
}

// ConfirmationCodeIn applies the In predicate on the "confirmation_code" field.
func ConfirmationCodeIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldConfirmationCode, vs...))
}

// ConfirmationCodeNotIn applies the NotIn predicate on the "confirmation_code" field.
func ConfirmationCodeNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldConfirmationCode, vs...))
}

// ConfirmationCodeGT applies the GT predicate on the "confirmation_code" field.
func ConfirmationCodeGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldConfirmationCode, v))
}

// ConfirmationCodeGTE applies the GTE predicate on the "confirmation_code" field.
func ConfirmationCodeGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldConfirmationCode, v))
}

// ConfirmationCodeLT applies the LT predicate on the "confirmation_code" field.
func ConfirmationCodeLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldConfirmationCode, v))
}

// ConfirmationCodeLTE applies the LTE predicate on the "confirmation_code" field.
func ConfirmationCodeLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldConfirmationCode, v))
}

// ConfirmationCodeContains applies the Contains predicate on the "confirmation_code" field.
func ConfirmationCodeContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldConfirmationCode, v))
}

// ConfirmationCodeHasPrefix applies the HasPrefix predicate on the "confirmation_code" field.
func ConfirmationCodeHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldConfirmationCode, v))
}

// ConfirmationCodeHasSuffix applies the HasSuffix predicate on the "confirmation_code" field.
func ConfirmationCodeHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldConfirmationCode, v))
}

// ConfirmationCodeEqualFold applies the EqualFold predicate on the "confirmation_code" field.
func ConfirmationCodeEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldConfirmationCode, v))
}

// ConfirmationCodeContainsFold applies the ContainsFold predicate on the "confirmation_code" field.
func ConfirmationCodeContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldConfirmationCode, v))
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.Profile) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.NotPredicates(p))
}
