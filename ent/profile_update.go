// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/fcmsubscriptions"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/invitation"
	"github.com/mikestefanello/pagoda/ent/monthlysubscription"
	"github.com/mikestefanello/pagoda/ent/notification"
	"github.com/mikestefanello/pagoda/ent/notificationpermission"
	"github.com/mikestefanello/pagoda/ent/notificationtime"
	"github.com/mikestefanello/pagoda/ent/phoneverificationcode"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
	"github.com/mikestefanello/pagoda/ent/pwapushsubscription"
	"github.com/mikestefanello/pagoda/ent/sentemail"
	"github.com/mikestefanello/pagoda/ent/user"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfileUpdate) SetUpdatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetBio sets the "bio" field.
func (pu *ProfileUpdate) SetBio(s string) *ProfileUpdate {
	pu.mutation.SetBio(s)
	return pu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableBio(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetBio(*s)
	}
	return pu
}

// ClearBio clears the value of the "bio" field.
func (pu *ProfileUpdate) ClearBio() *ProfileUpdate {
	pu.mutation.ClearBio()
	return pu
}

// SetBirthdate sets the "birthdate" field.
func (pu *ProfileUpdate) SetBirthdate(t time.Time) *ProfileUpdate {
	pu.mutation.SetBirthdate(t)
	return pu
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableBirthdate(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetBirthdate(*t)
	}
	return pu
}

// ClearBirthdate clears the value of the "birthdate" field.
func (pu *ProfileUpdate) ClearBirthdate() *ProfileUpdate {
	pu.mutation.ClearBirthdate()
	return pu
}

// SetAge sets the "age" field.
func (pu *ProfileUpdate) SetAge(i int) *ProfileUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableAge(i *int) *ProfileUpdate {
	if i != nil {
		pu.SetAge(*i)
	}
	return pu
}

// AddAge adds i to the "age" field.
func (pu *ProfileUpdate) AddAge(i int) *ProfileUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// ClearAge clears the value of the "age" field.
func (pu *ProfileUpdate) ClearAge() *ProfileUpdate {
	pu.mutation.ClearAge()
	return pu
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (pu *ProfileUpdate) SetFullyOnboarded(b bool) *ProfileUpdate {
	pu.mutation.SetFullyOnboarded(b)
	return pu
}

// SetNillableFullyOnboarded sets the "fully_onboarded" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableFullyOnboarded(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetFullyOnboarded(*b)
	}
	return pu
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (pu *ProfileUpdate) SetPhoneNumberE164(s string) *ProfileUpdate {
	pu.mutation.SetPhoneNumberE164(s)
	return pu
}

// SetNillablePhoneNumberE164 sets the "phone_number_e164" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePhoneNumberE164(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetPhoneNumberE164(*s)
	}
	return pu
}

// ClearPhoneNumberE164 clears the value of the "phone_number_e164" field.
func (pu *ProfileUpdate) ClearPhoneNumberE164() *ProfileUpdate {
	pu.mutation.ClearPhoneNumberE164()
	return pu
}

// SetCountryCode sets the "country_code" field.
func (pu *ProfileUpdate) SetCountryCode(s string) *ProfileUpdate {
	pu.mutation.SetCountryCode(s)
	return pu
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableCountryCode(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetCountryCode(*s)
	}
	return pu
}

// ClearCountryCode clears the value of the "country_code" field.
func (pu *ProfileUpdate) ClearCountryCode() *ProfileUpdate {
	pu.mutation.ClearCountryCode()
	return pu
}

// SetPhoneVerified sets the "phone_verified" field.
func (pu *ProfileUpdate) SetPhoneVerified(b bool) *ProfileUpdate {
	pu.mutation.SetPhoneVerified(b)
	return pu
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePhoneVerified(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetPhoneVerified(*b)
	}
	return pu
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (pu *ProfileUpdate) ClearPhoneVerified() *ProfileUpdate {
	pu.mutation.ClearPhoneVerified()
	return pu
}

// SetStripeID sets the "stripe_id" field.
func (pu *ProfileUpdate) SetStripeID(s string) *ProfileUpdate {
	pu.mutation.SetStripeID(s)
	return pu
}

// SetNillableStripeID sets the "stripe_id" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableStripeID(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetStripeID(*s)
	}
	return pu
}

// ClearStripeID clears the value of the "stripe_id" field.
func (pu *ProfileUpdate) ClearStripeID() *ProfileUpdate {
	pu.mutation.ClearStripeID()
	return pu
}

// AddFriendIDs adds the "friends" edge to the Profile entity by IDs.
func (pu *ProfileUpdate) AddFriendIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddFriendIDs(ids...)
	return pu
}

// AddFriends adds the "friends" edges to the Profile entity.
func (pu *ProfileUpdate) AddFriends(p ...*Profile) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddFriendIDs(ids...)
}

// AddPhotoIDs adds the "photos" edge to the Image entity by IDs.
func (pu *ProfileUpdate) AddPhotoIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddPhotoIDs(ids...)
	return pu
}

// AddPhotos adds the "photos" edges to the Image entity.
func (pu *ProfileUpdate) AddPhotos(i ...*Image) *ProfileUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddPhotoIDs(ids...)
}

// SetProfileImageID sets the "profile_image" edge to the Image entity by ID.
func (pu *ProfileUpdate) SetProfileImageID(id int) *ProfileUpdate {
	pu.mutation.SetProfileImageID(id)
	return pu
}

// SetNillableProfileImageID sets the "profile_image" edge to the Image entity by ID if the given value is not nil.
func (pu *ProfileUpdate) SetNillableProfileImageID(id *int) *ProfileUpdate {
	if id != nil {
		pu = pu.SetProfileImageID(*id)
	}
	return pu
}

// SetProfileImage sets the "profile_image" edge to the Image entity.
func (pu *ProfileUpdate) SetProfileImage(i *Image) *ProfileUpdate {
	return pu.SetProfileImageID(i.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (pu *ProfileUpdate) AddNotificationIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddNotificationIDs(ids...)
	return pu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (pu *ProfileUpdate) AddNotifications(n ...*Notification) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNotificationIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (pu *ProfileUpdate) AddInvitationIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddInvitationIDs(ids...)
	return pu
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (pu *ProfileUpdate) AddInvitations(i ...*Invitation) *ProfileUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInvitationIDs(ids...)
}

// AddFcmPushSubscriptionIDs adds the "fcm_push_subscriptions" edge to the FCMSubscriptions entity by IDs.
func (pu *ProfileUpdate) AddFcmPushSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddFcmPushSubscriptionIDs(ids...)
	return pu
}

// AddFcmPushSubscriptions adds the "fcm_push_subscriptions" edges to the FCMSubscriptions entity.
func (pu *ProfileUpdate) AddFcmPushSubscriptions(f ...*FCMSubscriptions) *ProfileUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFcmPushSubscriptionIDs(ids...)
}

// AddPwaPushSubscriptionIDs adds the "pwa_push_subscriptions" edge to the PwaPushSubscription entity by IDs.
func (pu *ProfileUpdate) AddPwaPushSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddPwaPushSubscriptionIDs(ids...)
	return pu
}

// AddPwaPushSubscriptions adds the "pwa_push_subscriptions" edges to the PwaPushSubscription entity.
func (pu *ProfileUpdate) AddPwaPushSubscriptions(p ...*PwaPushSubscription) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPwaPushSubscriptionIDs(ids...)
}

// AddNotificationPermissionIDs adds the "notification_permissions" edge to the NotificationPermission entity by IDs.
func (pu *ProfileUpdate) AddNotificationPermissionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddNotificationPermissionIDs(ids...)
	return pu
}

// AddNotificationPermissions adds the "notification_permissions" edges to the NotificationPermission entity.
func (pu *ProfileUpdate) AddNotificationPermissions(n ...*NotificationPermission) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNotificationPermissionIDs(ids...)
}

// AddNotificationTimeIDs adds the "notification_times" edge to the NotificationTime entity by IDs.
func (pu *ProfileUpdate) AddNotificationTimeIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddNotificationTimeIDs(ids...)
	return pu
}

// AddNotificationTimes adds the "notification_times" edges to the NotificationTime entity.
func (pu *ProfileUpdate) AddNotificationTimes(n ...*NotificationTime) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNotificationTimeIDs(ids...)
}

// AddPhoneVerificationCodeIDs adds the "phone_verification_code" edge to the PhoneVerificationCode entity by IDs.
func (pu *ProfileUpdate) AddPhoneVerificationCodeIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddPhoneVerificationCodeIDs(ids...)
	return pu
}

// AddPhoneVerificationCode adds the "phone_verification_code" edges to the PhoneVerificationCode entity.
func (pu *ProfileUpdate) AddPhoneVerificationCode(p ...*PhoneVerificationCode) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPhoneVerificationCodeIDs(ids...)
}

// AddSentEmailIDs adds the "sent_emails" edge to the SentEmail entity by IDs.
func (pu *ProfileUpdate) AddSentEmailIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddSentEmailIDs(ids...)
	return pu
}

// AddSentEmails adds the "sent_emails" edges to the SentEmail entity.
func (pu *ProfileUpdate) AddSentEmails(s ...*SentEmail) *ProfileUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSentEmailIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProfileUpdate) SetUserID(id int) *ProfileUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProfileUpdate) SetUser(u *User) *ProfileUpdate {
	return pu.SetUserID(u.ID)
}

// AddSubscriptionIDs adds the "subscription" edge to the MonthlySubscription entity by IDs.
func (pu *ProfileUpdate) AddSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.AddSubscriptionIDs(ids...)
	return pu
}

// AddSubscription adds the "subscription" edges to the MonthlySubscription entity.
func (pu *ProfileUpdate) AddSubscription(m ...*MonthlySubscription) *ProfileUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddSubscriptionIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearFriends clears all "friends" edges to the Profile entity.
func (pu *ProfileUpdate) ClearFriends() *ProfileUpdate {
	pu.mutation.ClearFriends()
	return pu
}

// RemoveFriendIDs removes the "friends" edge to Profile entities by IDs.
func (pu *ProfileUpdate) RemoveFriendIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveFriendIDs(ids...)
	return pu
}

// RemoveFriends removes "friends" edges to Profile entities.
func (pu *ProfileUpdate) RemoveFriends(p ...*Profile) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveFriendIDs(ids...)
}

// ClearPhotos clears all "photos" edges to the Image entity.
func (pu *ProfileUpdate) ClearPhotos() *ProfileUpdate {
	pu.mutation.ClearPhotos()
	return pu
}

// RemovePhotoIDs removes the "photos" edge to Image entities by IDs.
func (pu *ProfileUpdate) RemovePhotoIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemovePhotoIDs(ids...)
	return pu
}

// RemovePhotos removes "photos" edges to Image entities.
func (pu *ProfileUpdate) RemovePhotos(i ...*Image) *ProfileUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemovePhotoIDs(ids...)
}

// ClearProfileImage clears the "profile_image" edge to the Image entity.
func (pu *ProfileUpdate) ClearProfileImage() *ProfileUpdate {
	pu.mutation.ClearProfileImage()
	return pu
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (pu *ProfileUpdate) ClearNotifications() *ProfileUpdate {
	pu.mutation.ClearNotifications()
	return pu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (pu *ProfileUpdate) RemoveNotificationIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveNotificationIDs(ids...)
	return pu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (pu *ProfileUpdate) RemoveNotifications(n ...*Notification) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNotificationIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (pu *ProfileUpdate) ClearInvitations() *ProfileUpdate {
	pu.mutation.ClearInvitations()
	return pu
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (pu *ProfileUpdate) RemoveInvitationIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveInvitationIDs(ids...)
	return pu
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (pu *ProfileUpdate) RemoveInvitations(i ...*Invitation) *ProfileUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInvitationIDs(ids...)
}

// ClearFcmPushSubscriptions clears all "fcm_push_subscriptions" edges to the FCMSubscriptions entity.
func (pu *ProfileUpdate) ClearFcmPushSubscriptions() *ProfileUpdate {
	pu.mutation.ClearFcmPushSubscriptions()
	return pu
}

// RemoveFcmPushSubscriptionIDs removes the "fcm_push_subscriptions" edge to FCMSubscriptions entities by IDs.
func (pu *ProfileUpdate) RemoveFcmPushSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveFcmPushSubscriptionIDs(ids...)
	return pu
}

// RemoveFcmPushSubscriptions removes "fcm_push_subscriptions" edges to FCMSubscriptions entities.
func (pu *ProfileUpdate) RemoveFcmPushSubscriptions(f ...*FCMSubscriptions) *ProfileUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFcmPushSubscriptionIDs(ids...)
}

// ClearPwaPushSubscriptions clears all "pwa_push_subscriptions" edges to the PwaPushSubscription entity.
func (pu *ProfileUpdate) ClearPwaPushSubscriptions() *ProfileUpdate {
	pu.mutation.ClearPwaPushSubscriptions()
	return pu
}

// RemovePwaPushSubscriptionIDs removes the "pwa_push_subscriptions" edge to PwaPushSubscription entities by IDs.
func (pu *ProfileUpdate) RemovePwaPushSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemovePwaPushSubscriptionIDs(ids...)
	return pu
}

// RemovePwaPushSubscriptions removes "pwa_push_subscriptions" edges to PwaPushSubscription entities.
func (pu *ProfileUpdate) RemovePwaPushSubscriptions(p ...*PwaPushSubscription) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePwaPushSubscriptionIDs(ids...)
}

// ClearNotificationPermissions clears all "notification_permissions" edges to the NotificationPermission entity.
func (pu *ProfileUpdate) ClearNotificationPermissions() *ProfileUpdate {
	pu.mutation.ClearNotificationPermissions()
	return pu
}

// RemoveNotificationPermissionIDs removes the "notification_permissions" edge to NotificationPermission entities by IDs.
func (pu *ProfileUpdate) RemoveNotificationPermissionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveNotificationPermissionIDs(ids...)
	return pu
}

// RemoveNotificationPermissions removes "notification_permissions" edges to NotificationPermission entities.
func (pu *ProfileUpdate) RemoveNotificationPermissions(n ...*NotificationPermission) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNotificationPermissionIDs(ids...)
}

// ClearNotificationTimes clears all "notification_times" edges to the NotificationTime entity.
func (pu *ProfileUpdate) ClearNotificationTimes() *ProfileUpdate {
	pu.mutation.ClearNotificationTimes()
	return pu
}

// RemoveNotificationTimeIDs removes the "notification_times" edge to NotificationTime entities by IDs.
func (pu *ProfileUpdate) RemoveNotificationTimeIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveNotificationTimeIDs(ids...)
	return pu
}

// RemoveNotificationTimes removes "notification_times" edges to NotificationTime entities.
func (pu *ProfileUpdate) RemoveNotificationTimes(n ...*NotificationTime) *ProfileUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNotificationTimeIDs(ids...)
}

// ClearPhoneVerificationCode clears all "phone_verification_code" edges to the PhoneVerificationCode entity.
func (pu *ProfileUpdate) ClearPhoneVerificationCode() *ProfileUpdate {
	pu.mutation.ClearPhoneVerificationCode()
	return pu
}

// RemovePhoneVerificationCodeIDs removes the "phone_verification_code" edge to PhoneVerificationCode entities by IDs.
func (pu *ProfileUpdate) RemovePhoneVerificationCodeIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemovePhoneVerificationCodeIDs(ids...)
	return pu
}

// RemovePhoneVerificationCode removes "phone_verification_code" edges to PhoneVerificationCode entities.
func (pu *ProfileUpdate) RemovePhoneVerificationCode(p ...*PhoneVerificationCode) *ProfileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePhoneVerificationCodeIDs(ids...)
}

// ClearSentEmails clears all "sent_emails" edges to the SentEmail entity.
func (pu *ProfileUpdate) ClearSentEmails() *ProfileUpdate {
	pu.mutation.ClearSentEmails()
	return pu
}

// RemoveSentEmailIDs removes the "sent_emails" edge to SentEmail entities by IDs.
func (pu *ProfileUpdate) RemoveSentEmailIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveSentEmailIDs(ids...)
	return pu
}

// RemoveSentEmails removes "sent_emails" edges to SentEmail entities.
func (pu *ProfileUpdate) RemoveSentEmails(s ...*SentEmail) *ProfileUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSentEmailIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProfileUpdate) ClearUser() *ProfileUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearSubscription clears all "subscription" edges to the MonthlySubscription entity.
func (pu *ProfileUpdate) ClearSubscription() *ProfileUpdate {
	pu.mutation.ClearSubscription()
	return pu
}

// RemoveSubscriptionIDs removes the "subscription" edge to MonthlySubscription entities by IDs.
func (pu *ProfileUpdate) RemoveSubscriptionIDs(ids ...int) *ProfileUpdate {
	pu.mutation.RemoveSubscriptionIDs(ids...)
	return pu
}

// RemoveSubscription removes "subscription" edges to MonthlySubscription entities.
func (pu *ProfileUpdate) RemoveSubscription(m ...*MonthlySubscription) *ProfileUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
	}
	if pu.mutation.BioCleared() {
		_spec.ClearField(profile.FieldBio, field.TypeString)
	}
	if value, ok := pu.mutation.Birthdate(); ok {
		_spec.SetField(profile.FieldBirthdate, field.TypeTime, value)
	}
	if pu.mutation.BirthdateCleared() {
		_spec.ClearField(profile.FieldBirthdate, field.TypeTime)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(profile.FieldAge, field.TypeInt, value)
	}
	if pu.mutation.AgeCleared() {
		_spec.ClearField(profile.FieldAge, field.TypeInt)
	}
	if value, ok := pu.mutation.FullyOnboarded(); ok {
		_spec.SetField(profile.FieldFullyOnboarded, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PhoneNumberE164(); ok {
		_spec.SetField(profile.FieldPhoneNumberE164, field.TypeString, value)
	}
	if pu.mutation.PhoneNumberE164Cleared() {
		_spec.ClearField(profile.FieldPhoneNumberE164, field.TypeString)
	}
	if value, ok := pu.mutation.CountryCode(); ok {
		_spec.SetField(profile.FieldCountryCode, field.TypeString, value)
	}
	if pu.mutation.CountryCodeCleared() {
		_spec.ClearField(profile.FieldCountryCode, field.TypeString)
	}
	if value, ok := pu.mutation.PhoneVerified(); ok {
		_spec.SetField(profile.FieldPhoneVerified, field.TypeBool, value)
	}
	if pu.mutation.PhoneVerifiedCleared() {
		_spec.ClearField(profile.FieldPhoneVerified, field.TypeBool)
	}
	if value, ok := pu.mutation.StripeID(); ok {
		_spec.SetField(profile.FieldStripeID, field.TypeString, value)
	}
	if pu.mutation.StripeIDCleared() {
		_spec.ClearField(profile.FieldStripeID, field.TypeString)
	}
	if pu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !pu.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !pu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProfileImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profile.ProfileImageTable,
			Columns: []string{profile.ProfileImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProfileImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profile.ProfileImageTable,
			Columns: []string{profile.ProfileImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !pu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FcmPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFcmPushSubscriptionsIDs(); len(nodes) > 0 && !pu.mutation.FcmPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FcmPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PwaPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPwaPushSubscriptionsIDs(); len(nodes) > 0 && !pu.mutation.PwaPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PwaPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotificationPermissionsIDs(); len(nodes) > 0 && !pu.mutation.NotificationPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotificationTimesIDs(); len(nodes) > 0 && !pu.mutation.NotificationTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PhoneVerificationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPhoneVerificationCodeIDs(); len(nodes) > 0 && !pu.mutation.PhoneVerificationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhoneVerificationCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SentEmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSentEmailsIDs(); len(nodes) > 0 && !pu.mutation.SentEmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SentEmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubscriptionIDs(); len(nodes) > 0 && !pu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfileUpdateOne) SetUpdatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetBio sets the "bio" field.
func (puo *ProfileUpdateOne) SetBio(s string) *ProfileUpdateOne {
	puo.mutation.SetBio(s)
	return puo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableBio(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetBio(*s)
	}
	return puo
}

// ClearBio clears the value of the "bio" field.
func (puo *ProfileUpdateOne) ClearBio() *ProfileUpdateOne {
	puo.mutation.ClearBio()
	return puo
}

// SetBirthdate sets the "birthdate" field.
func (puo *ProfileUpdateOne) SetBirthdate(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetBirthdate(t)
	return puo
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableBirthdate(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetBirthdate(*t)
	}
	return puo
}

// ClearBirthdate clears the value of the "birthdate" field.
func (puo *ProfileUpdateOne) ClearBirthdate() *ProfileUpdateOne {
	puo.mutation.ClearBirthdate()
	return puo
}

// SetAge sets the "age" field.
func (puo *ProfileUpdateOne) SetAge(i int) *ProfileUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableAge(i *int) *ProfileUpdateOne {
	if i != nil {
		puo.SetAge(*i)
	}
	return puo
}

// AddAge adds i to the "age" field.
func (puo *ProfileUpdateOne) AddAge(i int) *ProfileUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// ClearAge clears the value of the "age" field.
func (puo *ProfileUpdateOne) ClearAge() *ProfileUpdateOne {
	puo.mutation.ClearAge()
	return puo
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (puo *ProfileUpdateOne) SetFullyOnboarded(b bool) *ProfileUpdateOne {
	puo.mutation.SetFullyOnboarded(b)
	return puo
}

// SetNillableFullyOnboarded sets the "fully_onboarded" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableFullyOnboarded(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetFullyOnboarded(*b)
	}
	return puo
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (puo *ProfileUpdateOne) SetPhoneNumberE164(s string) *ProfileUpdateOne {
	puo.mutation.SetPhoneNumberE164(s)
	return puo
}

// SetNillablePhoneNumberE164 sets the "phone_number_e164" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePhoneNumberE164(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetPhoneNumberE164(*s)
	}
	return puo
}

// ClearPhoneNumberE164 clears the value of the "phone_number_e164" field.
func (puo *ProfileUpdateOne) ClearPhoneNumberE164() *ProfileUpdateOne {
	puo.mutation.ClearPhoneNumberE164()
	return puo
}

// SetCountryCode sets the "country_code" field.
func (puo *ProfileUpdateOne) SetCountryCode(s string) *ProfileUpdateOne {
	puo.mutation.SetCountryCode(s)
	return puo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableCountryCode(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetCountryCode(*s)
	}
	return puo
}

// ClearCountryCode clears the value of the "country_code" field.
func (puo *ProfileUpdateOne) ClearCountryCode() *ProfileUpdateOne {
	puo.mutation.ClearCountryCode()
	return puo
}

// SetPhoneVerified sets the "phone_verified" field.
func (puo *ProfileUpdateOne) SetPhoneVerified(b bool) *ProfileUpdateOne {
	puo.mutation.SetPhoneVerified(b)
	return puo
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePhoneVerified(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetPhoneVerified(*b)
	}
	return puo
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (puo *ProfileUpdateOne) ClearPhoneVerified() *ProfileUpdateOne {
	puo.mutation.ClearPhoneVerified()
	return puo
}

// SetStripeID sets the "stripe_id" field.
func (puo *ProfileUpdateOne) SetStripeID(s string) *ProfileUpdateOne {
	puo.mutation.SetStripeID(s)
	return puo
}

// SetNillableStripeID sets the "stripe_id" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableStripeID(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetStripeID(*s)
	}
	return puo
}

// ClearStripeID clears the value of the "stripe_id" field.
func (puo *ProfileUpdateOne) ClearStripeID() *ProfileUpdateOne {
	puo.mutation.ClearStripeID()
	return puo
}

// AddFriendIDs adds the "friends" edge to the Profile entity by IDs.
func (puo *ProfileUpdateOne) AddFriendIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddFriendIDs(ids...)
	return puo
}

// AddFriends adds the "friends" edges to the Profile entity.
func (puo *ProfileUpdateOne) AddFriends(p ...*Profile) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddFriendIDs(ids...)
}

// AddPhotoIDs adds the "photos" edge to the Image entity by IDs.
func (puo *ProfileUpdateOne) AddPhotoIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddPhotoIDs(ids...)
	return puo
}

// AddPhotos adds the "photos" edges to the Image entity.
func (puo *ProfileUpdateOne) AddPhotos(i ...*Image) *ProfileUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddPhotoIDs(ids...)
}

// SetProfileImageID sets the "profile_image" edge to the Image entity by ID.
func (puo *ProfileUpdateOne) SetProfileImageID(id int) *ProfileUpdateOne {
	puo.mutation.SetProfileImageID(id)
	return puo
}

// SetNillableProfileImageID sets the "profile_image" edge to the Image entity by ID if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableProfileImageID(id *int) *ProfileUpdateOne {
	if id != nil {
		puo = puo.SetProfileImageID(*id)
	}
	return puo
}

// SetProfileImage sets the "profile_image" edge to the Image entity.
func (puo *ProfileUpdateOne) SetProfileImage(i *Image) *ProfileUpdateOne {
	return puo.SetProfileImageID(i.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (puo *ProfileUpdateOne) AddNotificationIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddNotificationIDs(ids...)
	return puo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (puo *ProfileUpdateOne) AddNotifications(n ...*Notification) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNotificationIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (puo *ProfileUpdateOne) AddInvitationIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddInvitationIDs(ids...)
	return puo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (puo *ProfileUpdateOne) AddInvitations(i ...*Invitation) *ProfileUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInvitationIDs(ids...)
}

// AddFcmPushSubscriptionIDs adds the "fcm_push_subscriptions" edge to the FCMSubscriptions entity by IDs.
func (puo *ProfileUpdateOne) AddFcmPushSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddFcmPushSubscriptionIDs(ids...)
	return puo
}

// AddFcmPushSubscriptions adds the "fcm_push_subscriptions" edges to the FCMSubscriptions entity.
func (puo *ProfileUpdateOne) AddFcmPushSubscriptions(f ...*FCMSubscriptions) *ProfileUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFcmPushSubscriptionIDs(ids...)
}

// AddPwaPushSubscriptionIDs adds the "pwa_push_subscriptions" edge to the PwaPushSubscription entity by IDs.
func (puo *ProfileUpdateOne) AddPwaPushSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddPwaPushSubscriptionIDs(ids...)
	return puo
}

// AddPwaPushSubscriptions adds the "pwa_push_subscriptions" edges to the PwaPushSubscription entity.
func (puo *ProfileUpdateOne) AddPwaPushSubscriptions(p ...*PwaPushSubscription) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPwaPushSubscriptionIDs(ids...)
}

// AddNotificationPermissionIDs adds the "notification_permissions" edge to the NotificationPermission entity by IDs.
func (puo *ProfileUpdateOne) AddNotificationPermissionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddNotificationPermissionIDs(ids...)
	return puo
}

// AddNotificationPermissions adds the "notification_permissions" edges to the NotificationPermission entity.
func (puo *ProfileUpdateOne) AddNotificationPermissions(n ...*NotificationPermission) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNotificationPermissionIDs(ids...)
}

// AddNotificationTimeIDs adds the "notification_times" edge to the NotificationTime entity by IDs.
func (puo *ProfileUpdateOne) AddNotificationTimeIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddNotificationTimeIDs(ids...)
	return puo
}

// AddNotificationTimes adds the "notification_times" edges to the NotificationTime entity.
func (puo *ProfileUpdateOne) AddNotificationTimes(n ...*NotificationTime) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNotificationTimeIDs(ids...)
}

// AddPhoneVerificationCodeIDs adds the "phone_verification_code" edge to the PhoneVerificationCode entity by IDs.
func (puo *ProfileUpdateOne) AddPhoneVerificationCodeIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddPhoneVerificationCodeIDs(ids...)
	return puo
}

// AddPhoneVerificationCode adds the "phone_verification_code" edges to the PhoneVerificationCode entity.
func (puo *ProfileUpdateOne) AddPhoneVerificationCode(p ...*PhoneVerificationCode) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPhoneVerificationCodeIDs(ids...)
}

// AddSentEmailIDs adds the "sent_emails" edge to the SentEmail entity by IDs.
func (puo *ProfileUpdateOne) AddSentEmailIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddSentEmailIDs(ids...)
	return puo
}

// AddSentEmails adds the "sent_emails" edges to the SentEmail entity.
func (puo *ProfileUpdateOne) AddSentEmails(s ...*SentEmail) *ProfileUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSentEmailIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProfileUpdateOne) SetUserID(id int) *ProfileUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProfileUpdateOne) SetUser(u *User) *ProfileUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddSubscriptionIDs adds the "subscription" edge to the MonthlySubscription entity by IDs.
func (puo *ProfileUpdateOne) AddSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.AddSubscriptionIDs(ids...)
	return puo
}

// AddSubscription adds the "subscription" edges to the MonthlySubscription entity.
func (puo *ProfileUpdateOne) AddSubscription(m ...*MonthlySubscription) *ProfileUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddSubscriptionIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearFriends clears all "friends" edges to the Profile entity.
func (puo *ProfileUpdateOne) ClearFriends() *ProfileUpdateOne {
	puo.mutation.ClearFriends()
	return puo
}

// RemoveFriendIDs removes the "friends" edge to Profile entities by IDs.
func (puo *ProfileUpdateOne) RemoveFriendIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveFriendIDs(ids...)
	return puo
}

// RemoveFriends removes "friends" edges to Profile entities.
func (puo *ProfileUpdateOne) RemoveFriends(p ...*Profile) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveFriendIDs(ids...)
}

// ClearPhotos clears all "photos" edges to the Image entity.
func (puo *ProfileUpdateOne) ClearPhotos() *ProfileUpdateOne {
	puo.mutation.ClearPhotos()
	return puo
}

// RemovePhotoIDs removes the "photos" edge to Image entities by IDs.
func (puo *ProfileUpdateOne) RemovePhotoIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemovePhotoIDs(ids...)
	return puo
}

// RemovePhotos removes "photos" edges to Image entities.
func (puo *ProfileUpdateOne) RemovePhotos(i ...*Image) *ProfileUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemovePhotoIDs(ids...)
}

// ClearProfileImage clears the "profile_image" edge to the Image entity.
func (puo *ProfileUpdateOne) ClearProfileImage() *ProfileUpdateOne {
	puo.mutation.ClearProfileImage()
	return puo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (puo *ProfileUpdateOne) ClearNotifications() *ProfileUpdateOne {
	puo.mutation.ClearNotifications()
	return puo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (puo *ProfileUpdateOne) RemoveNotificationIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveNotificationIDs(ids...)
	return puo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (puo *ProfileUpdateOne) RemoveNotifications(n ...*Notification) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNotificationIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (puo *ProfileUpdateOne) ClearInvitations() *ProfileUpdateOne {
	puo.mutation.ClearInvitations()
	return puo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (puo *ProfileUpdateOne) RemoveInvitationIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveInvitationIDs(ids...)
	return puo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (puo *ProfileUpdateOne) RemoveInvitations(i ...*Invitation) *ProfileUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInvitationIDs(ids...)
}

// ClearFcmPushSubscriptions clears all "fcm_push_subscriptions" edges to the FCMSubscriptions entity.
func (puo *ProfileUpdateOne) ClearFcmPushSubscriptions() *ProfileUpdateOne {
	puo.mutation.ClearFcmPushSubscriptions()
	return puo
}

// RemoveFcmPushSubscriptionIDs removes the "fcm_push_subscriptions" edge to FCMSubscriptions entities by IDs.
func (puo *ProfileUpdateOne) RemoveFcmPushSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveFcmPushSubscriptionIDs(ids...)
	return puo
}

// RemoveFcmPushSubscriptions removes "fcm_push_subscriptions" edges to FCMSubscriptions entities.
func (puo *ProfileUpdateOne) RemoveFcmPushSubscriptions(f ...*FCMSubscriptions) *ProfileUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFcmPushSubscriptionIDs(ids...)
}

// ClearPwaPushSubscriptions clears all "pwa_push_subscriptions" edges to the PwaPushSubscription entity.
func (puo *ProfileUpdateOne) ClearPwaPushSubscriptions() *ProfileUpdateOne {
	puo.mutation.ClearPwaPushSubscriptions()
	return puo
}

// RemovePwaPushSubscriptionIDs removes the "pwa_push_subscriptions" edge to PwaPushSubscription entities by IDs.
func (puo *ProfileUpdateOne) RemovePwaPushSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemovePwaPushSubscriptionIDs(ids...)
	return puo
}

// RemovePwaPushSubscriptions removes "pwa_push_subscriptions" edges to PwaPushSubscription entities.
func (puo *ProfileUpdateOne) RemovePwaPushSubscriptions(p ...*PwaPushSubscription) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePwaPushSubscriptionIDs(ids...)
}

// ClearNotificationPermissions clears all "notification_permissions" edges to the NotificationPermission entity.
func (puo *ProfileUpdateOne) ClearNotificationPermissions() *ProfileUpdateOne {
	puo.mutation.ClearNotificationPermissions()
	return puo
}

// RemoveNotificationPermissionIDs removes the "notification_permissions" edge to NotificationPermission entities by IDs.
func (puo *ProfileUpdateOne) RemoveNotificationPermissionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveNotificationPermissionIDs(ids...)
	return puo
}

// RemoveNotificationPermissions removes "notification_permissions" edges to NotificationPermission entities.
func (puo *ProfileUpdateOne) RemoveNotificationPermissions(n ...*NotificationPermission) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNotificationPermissionIDs(ids...)
}

// ClearNotificationTimes clears all "notification_times" edges to the NotificationTime entity.
func (puo *ProfileUpdateOne) ClearNotificationTimes() *ProfileUpdateOne {
	puo.mutation.ClearNotificationTimes()
	return puo
}

// RemoveNotificationTimeIDs removes the "notification_times" edge to NotificationTime entities by IDs.
func (puo *ProfileUpdateOne) RemoveNotificationTimeIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveNotificationTimeIDs(ids...)
	return puo
}

// RemoveNotificationTimes removes "notification_times" edges to NotificationTime entities.
func (puo *ProfileUpdateOne) RemoveNotificationTimes(n ...*NotificationTime) *ProfileUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNotificationTimeIDs(ids...)
}

// ClearPhoneVerificationCode clears all "phone_verification_code" edges to the PhoneVerificationCode entity.
func (puo *ProfileUpdateOne) ClearPhoneVerificationCode() *ProfileUpdateOne {
	puo.mutation.ClearPhoneVerificationCode()
	return puo
}

// RemovePhoneVerificationCodeIDs removes the "phone_verification_code" edge to PhoneVerificationCode entities by IDs.
func (puo *ProfileUpdateOne) RemovePhoneVerificationCodeIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemovePhoneVerificationCodeIDs(ids...)
	return puo
}

// RemovePhoneVerificationCode removes "phone_verification_code" edges to PhoneVerificationCode entities.
func (puo *ProfileUpdateOne) RemovePhoneVerificationCode(p ...*PhoneVerificationCode) *ProfileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePhoneVerificationCodeIDs(ids...)
}

// ClearSentEmails clears all "sent_emails" edges to the SentEmail entity.
func (puo *ProfileUpdateOne) ClearSentEmails() *ProfileUpdateOne {
	puo.mutation.ClearSentEmails()
	return puo
}

// RemoveSentEmailIDs removes the "sent_emails" edge to SentEmail entities by IDs.
func (puo *ProfileUpdateOne) RemoveSentEmailIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveSentEmailIDs(ids...)
	return puo
}

// RemoveSentEmails removes "sent_emails" edges to SentEmail entities.
func (puo *ProfileUpdateOne) RemoveSentEmails(s ...*SentEmail) *ProfileUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSentEmailIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearSubscription clears all "subscription" edges to the MonthlySubscription entity.
func (puo *ProfileUpdateOne) ClearSubscription() *ProfileUpdateOne {
	puo.mutation.ClearSubscription()
	return puo
}

// RemoveSubscriptionIDs removes the "subscription" edge to MonthlySubscription entities by IDs.
func (puo *ProfileUpdateOne) RemoveSubscriptionIDs(ids ...int) *ProfileUpdateOne {
	puo.mutation.RemoveSubscriptionIDs(ids...)
	return puo
}

// RemoveSubscription removes "subscription" edges to MonthlySubscription entities.
func (puo *ProfileUpdateOne) RemoveSubscription(m ...*MonthlySubscription) *ProfileUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
	}
	if puo.mutation.BioCleared() {
		_spec.ClearField(profile.FieldBio, field.TypeString)
	}
	if value, ok := puo.mutation.Birthdate(); ok {
		_spec.SetField(profile.FieldBirthdate, field.TypeTime, value)
	}
	if puo.mutation.BirthdateCleared() {
		_spec.ClearField(profile.FieldBirthdate, field.TypeTime)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(profile.FieldAge, field.TypeInt, value)
	}
	if puo.mutation.AgeCleared() {
		_spec.ClearField(profile.FieldAge, field.TypeInt)
	}
	if value, ok := puo.mutation.FullyOnboarded(); ok {
		_spec.SetField(profile.FieldFullyOnboarded, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PhoneNumberE164(); ok {
		_spec.SetField(profile.FieldPhoneNumberE164, field.TypeString, value)
	}
	if puo.mutation.PhoneNumberE164Cleared() {
		_spec.ClearField(profile.FieldPhoneNumberE164, field.TypeString)
	}
	if value, ok := puo.mutation.CountryCode(); ok {
		_spec.SetField(profile.FieldCountryCode, field.TypeString, value)
	}
	if puo.mutation.CountryCodeCleared() {
		_spec.ClearField(profile.FieldCountryCode, field.TypeString)
	}
	if value, ok := puo.mutation.PhoneVerified(); ok {
		_spec.SetField(profile.FieldPhoneVerified, field.TypeBool, value)
	}
	if puo.mutation.PhoneVerifiedCleared() {
		_spec.ClearField(profile.FieldPhoneVerified, field.TypeBool)
	}
	if value, ok := puo.mutation.StripeID(); ok {
		_spec.SetField(profile.FieldStripeID, field.TypeString, value)
	}
	if puo.mutation.StripeIDCleared() {
		_spec.ClearField(profile.FieldStripeID, field.TypeString)
	}
	if puo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !puo.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !puo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProfileImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profile.ProfileImageTable,
			Columns: []string{profile.ProfileImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProfileImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profile.ProfileImageTable,
			Columns: []string{profile.ProfileImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !puo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FcmPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFcmPushSubscriptionsIDs(); len(nodes) > 0 && !puo.mutation.FcmPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FcmPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PwaPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPwaPushSubscriptionsIDs(); len(nodes) > 0 && !puo.mutation.PwaPushSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PwaPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotificationPermissionsIDs(); len(nodes) > 0 && !puo.mutation.NotificationPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotificationTimesIDs(); len(nodes) > 0 && !puo.mutation.NotificationTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PhoneVerificationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPhoneVerificationCodeIDs(); len(nodes) > 0 && !puo.mutation.PhoneVerificationCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhoneVerificationCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SentEmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSentEmailsIDs(); len(nodes) > 0 && !puo.mutation.SentEmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SentEmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubscriptionIDs(); len(nodes) > 0 && !puo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
