// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/emailsubscription"
)

// EmailSubscription is the model entity for the EmailSubscription schema.
type EmailSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// ConfirmationCode holds the value of the "confirmation_code" field.
	ConfirmationCode string `json:"confirmation_code,omitempty"`
	// The latitude of the subscriber's location.
	Latitude float64 `json:"latitude,omitempty"`
	// The longitude of the subscriber's location.
	Longitude float64 `json:"longitude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailSubscriptionQuery when eager-loading is set.
	Edges        EmailSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailSubscriptionEdges holds the relations/edges for other nodes in the graph.
type EmailSubscriptionEdges struct {
	// Subscriptions that this email is subscribed to
	Subscriptions []*EmailSubscriptionType `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e EmailSubscriptionEdges) SubscriptionsOrErr() ([]*EmailSubscriptionType, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailsubscription.FieldVerified:
			values[i] = new(sql.NullBool)
		case emailsubscription.FieldLatitude, emailsubscription.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case emailsubscription.FieldID:
			values[i] = new(sql.NullInt64)
		case emailsubscription.FieldEmail, emailsubscription.FieldConfirmationCode:
			values[i] = new(sql.NullString)
		case emailsubscription.FieldCreatedAt, emailsubscription.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailSubscription fields.
func (es *EmailSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = int(value.Int64)
		case emailsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case emailsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case emailsubscription.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				es.Email = value.String
			}
		case emailsubscription.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				es.Verified = value.Bool
			}
		case emailsubscription.FieldConfirmationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field confirmation_code", values[i])
			} else if value.Valid {
				es.ConfirmationCode = value.String
			}
		case emailsubscription.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				es.Latitude = value.Float64
			}
		case emailsubscription.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				es.Longitude = value.Float64
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailSubscription.
// This includes values selected through modifiers, order, etc.
func (es *EmailSubscription) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// QuerySubscriptions queries the "subscriptions" edge of the EmailSubscription entity.
func (es *EmailSubscription) QuerySubscriptions() *EmailSubscriptionTypeQuery {
	return NewEmailSubscriptionClient(es.config).QuerySubscriptions(es)
}

// Update returns a builder for updating this EmailSubscription.
// Note that you need to call EmailSubscription.Unwrap() before calling this method if this EmailSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EmailSubscription) Update() *EmailSubscriptionUpdateOne {
	return NewEmailSubscriptionClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the EmailSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EmailSubscription) Unwrap() *EmailSubscription {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailSubscription is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EmailSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("EmailSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(es.Email)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", es.Verified))
	builder.WriteString(", ")
	builder.WriteString("confirmation_code=")
	builder.WriteString(es.ConfirmationCode)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", es.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", es.Longitude))
	builder.WriteByte(')')
	return builder.String()
}

// EmailSubscriptions is a parsable slice of EmailSubscription.
type EmailSubscriptions []*EmailSubscription
