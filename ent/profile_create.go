// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/fcmsubscriptions"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/invitation"
	"github.com/mikestefanello/pagoda/ent/monthlysubscription"
	"github.com/mikestefanello/pagoda/ent/notification"
	"github.com/mikestefanello/pagoda/ent/notificationpermission"
	"github.com/mikestefanello/pagoda/ent/notificationtime"
	"github.com/mikestefanello/pagoda/ent/phoneverificationcode"
	"github.com/mikestefanello/pagoda/ent/profile"
	"github.com/mikestefanello/pagoda/ent/pwapushsubscription"
	"github.com/mikestefanello/pagoda/ent/sentemail"
	"github.com/mikestefanello/pagoda/ent/user"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProfileCreate) SetCreatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProfileCreate) SetUpdatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableUpdatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetBio sets the "bio" field.
func (pc *ProfileCreate) SetBio(s string) *ProfileCreate {
	pc.mutation.SetBio(s)
	return pc
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBio(s *string) *ProfileCreate {
	if s != nil {
		pc.SetBio(*s)
	}
	return pc
}

// SetBirthdate sets the "birthdate" field.
func (pc *ProfileCreate) SetBirthdate(t time.Time) *ProfileCreate {
	pc.mutation.SetBirthdate(t)
	return pc
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBirthdate(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetBirthdate(*t)
	}
	return pc
}

// SetAge sets the "age" field.
func (pc *ProfileCreate) SetAge(i int) *ProfileCreate {
	pc.mutation.SetAge(i)
	return pc
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableAge(i *int) *ProfileCreate {
	if i != nil {
		pc.SetAge(*i)
	}
	return pc
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (pc *ProfileCreate) SetFullyOnboarded(b bool) *ProfileCreate {
	pc.mutation.SetFullyOnboarded(b)
	return pc
}

// SetNillableFullyOnboarded sets the "fully_onboarded" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableFullyOnboarded(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetFullyOnboarded(*b)
	}
	return pc
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (pc *ProfileCreate) SetPhoneNumberE164(s string) *ProfileCreate {
	pc.mutation.SetPhoneNumberE164(s)
	return pc
}

// SetNillablePhoneNumberE164 sets the "phone_number_e164" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePhoneNumberE164(s *string) *ProfileCreate {
	if s != nil {
		pc.SetPhoneNumberE164(*s)
	}
	return pc
}

// SetCountryCode sets the "country_code" field.
func (pc *ProfileCreate) SetCountryCode(s string) *ProfileCreate {
	pc.mutation.SetCountryCode(s)
	return pc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCountryCode(s *string) *ProfileCreate {
	if s != nil {
		pc.SetCountryCode(*s)
	}
	return pc
}

// SetPhoneVerified sets the "phone_verified" field.
func (pc *ProfileCreate) SetPhoneVerified(b bool) *ProfileCreate {
	pc.mutation.SetPhoneVerified(b)
	return pc
}

// SetNillablePhoneVerified sets the "phone_verified" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePhoneVerified(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetPhoneVerified(*b)
	}
	return pc
}

// SetStripeID sets the "stripe_id" field.
func (pc *ProfileCreate) SetStripeID(s string) *ProfileCreate {
	pc.mutation.SetStripeID(s)
	return pc
}

// SetNillableStripeID sets the "stripe_id" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableStripeID(s *string) *ProfileCreate {
	if s != nil {
		pc.SetStripeID(*s)
	}
	return pc
}

// AddFriendIDs adds the "friends" edge to the Profile entity by IDs.
func (pc *ProfileCreate) AddFriendIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddFriendIDs(ids...)
	return pc
}

// AddFriends adds the "friends" edges to the Profile entity.
func (pc *ProfileCreate) AddFriends(p ...*Profile) *ProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddFriendIDs(ids...)
}

// AddPhotoIDs adds the "photos" edge to the Image entity by IDs.
func (pc *ProfileCreate) AddPhotoIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddPhotoIDs(ids...)
	return pc
}

// AddPhotos adds the "photos" edges to the Image entity.
func (pc *ProfileCreate) AddPhotos(i ...*Image) *ProfileCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddPhotoIDs(ids...)
}

// SetProfileImageID sets the "profile_image" edge to the Image entity by ID.
func (pc *ProfileCreate) SetProfileImageID(id int) *ProfileCreate {
	pc.mutation.SetProfileImageID(id)
	return pc
}

// SetNillableProfileImageID sets the "profile_image" edge to the Image entity by ID if the given value is not nil.
func (pc *ProfileCreate) SetNillableProfileImageID(id *int) *ProfileCreate {
	if id != nil {
		pc = pc.SetProfileImageID(*id)
	}
	return pc
}

// SetProfileImage sets the "profile_image" edge to the Image entity.
func (pc *ProfileCreate) SetProfileImage(i *Image) *ProfileCreate {
	return pc.SetProfileImageID(i.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (pc *ProfileCreate) AddNotificationIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddNotificationIDs(ids...)
	return pc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (pc *ProfileCreate) AddNotifications(n ...*Notification) *ProfileCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNotificationIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (pc *ProfileCreate) AddInvitationIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddInvitationIDs(ids...)
	return pc
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (pc *ProfileCreate) AddInvitations(i ...*Invitation) *ProfileCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddInvitationIDs(ids...)
}

// AddFcmPushSubscriptionIDs adds the "fcm_push_subscriptions" edge to the FCMSubscriptions entity by IDs.
func (pc *ProfileCreate) AddFcmPushSubscriptionIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddFcmPushSubscriptionIDs(ids...)
	return pc
}

// AddFcmPushSubscriptions adds the "fcm_push_subscriptions" edges to the FCMSubscriptions entity.
func (pc *ProfileCreate) AddFcmPushSubscriptions(f ...*FCMSubscriptions) *ProfileCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pc.AddFcmPushSubscriptionIDs(ids...)
}

// AddPwaPushSubscriptionIDs adds the "pwa_push_subscriptions" edge to the PwaPushSubscription entity by IDs.
func (pc *ProfileCreate) AddPwaPushSubscriptionIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddPwaPushSubscriptionIDs(ids...)
	return pc
}

// AddPwaPushSubscriptions adds the "pwa_push_subscriptions" edges to the PwaPushSubscription entity.
func (pc *ProfileCreate) AddPwaPushSubscriptions(p ...*PwaPushSubscription) *ProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPwaPushSubscriptionIDs(ids...)
}

// AddNotificationPermissionIDs adds the "notification_permissions" edge to the NotificationPermission entity by IDs.
func (pc *ProfileCreate) AddNotificationPermissionIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddNotificationPermissionIDs(ids...)
	return pc
}

// AddNotificationPermissions adds the "notification_permissions" edges to the NotificationPermission entity.
func (pc *ProfileCreate) AddNotificationPermissions(n ...*NotificationPermission) *ProfileCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNotificationPermissionIDs(ids...)
}

// AddNotificationTimeIDs adds the "notification_times" edge to the NotificationTime entity by IDs.
func (pc *ProfileCreate) AddNotificationTimeIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddNotificationTimeIDs(ids...)
	return pc
}

// AddNotificationTimes adds the "notification_times" edges to the NotificationTime entity.
func (pc *ProfileCreate) AddNotificationTimes(n ...*NotificationTime) *ProfileCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNotificationTimeIDs(ids...)
}

// AddPhoneVerificationCodeIDs adds the "phone_verification_code" edge to the PhoneVerificationCode entity by IDs.
func (pc *ProfileCreate) AddPhoneVerificationCodeIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddPhoneVerificationCodeIDs(ids...)
	return pc
}

// AddPhoneVerificationCode adds the "phone_verification_code" edges to the PhoneVerificationCode entity.
func (pc *ProfileCreate) AddPhoneVerificationCode(p ...*PhoneVerificationCode) *ProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPhoneVerificationCodeIDs(ids...)
}

// AddSentEmailIDs adds the "sent_emails" edge to the SentEmail entity by IDs.
func (pc *ProfileCreate) AddSentEmailIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddSentEmailIDs(ids...)
	return pc
}

// AddSentEmails adds the "sent_emails" edges to the SentEmail entity.
func (pc *ProfileCreate) AddSentEmails(s ...*SentEmail) *ProfileCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSentEmailIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *ProfileCreate) SetUserID(id int) *ProfileCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *ProfileCreate) SetUser(u *User) *ProfileCreate {
	return pc.SetUserID(u.ID)
}

// AddSubscriptionIDs adds the "subscription" edge to the MonthlySubscription entity by IDs.
func (pc *ProfileCreate) AddSubscriptionIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddSubscriptionIDs(ids...)
	return pc
}

// AddSubscription adds the "subscription" edges to the MonthlySubscription entity.
func (pc *ProfileCreate) AddSubscription(m ...*MonthlySubscription) *ProfileCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddSubscriptionIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := profile.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := profile.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.FullyOnboarded(); !ok {
		v := profile.DefaultFullyOnboarded
		pc.mutation.SetFullyOnboarded(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Profile.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Profile.updated_at"`)}
	}
	if _, ok := pc.mutation.FullyOnboarded(); !ok {
		return &ValidationError{Name: "fully_onboarded", err: errors.New(`ent: missing required field "Profile.fully_onboarded"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Profile.user"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(profile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := pc.mutation.Birthdate(); ok {
		_spec.SetField(profile.FieldBirthdate, field.TypeTime, value)
		_node.Birthdate = value
	}
	if value, ok := pc.mutation.Age(); ok {
		_spec.SetField(profile.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := pc.mutation.FullyOnboarded(); ok {
		_spec.SetField(profile.FieldFullyOnboarded, field.TypeBool, value)
		_node.FullyOnboarded = value
	}
	if value, ok := pc.mutation.PhoneNumberE164(); ok {
		_spec.SetField(profile.FieldPhoneNumberE164, field.TypeString, value)
		_node.PhoneNumberE164 = value
	}
	if value, ok := pc.mutation.CountryCode(); ok {
		_spec.SetField(profile.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := pc.mutation.PhoneVerified(); ok {
		_spec.SetField(profile.FieldPhoneVerified, field.TypeBool, value)
		_node.PhoneVerified = value
	}
	if value, ok := pc.mutation.StripeID(); ok {
		_spec.SetField(profile.FieldStripeID, field.TypeString, value)
		_node.StripeID = value
	}
	if nodes := pc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.FriendsTable,
			Columns: profile.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProfileImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profile.ProfileImageTable,
			Columns: []string{profile.ProfileImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_profile_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationsTable,
			Columns: []string{profile.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.InvitationsTable,
			Columns: []string{profile.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FcmPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.FcmPushSubscriptionsTable,
			Columns: []string{profile.FcmPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PwaPushSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PwaPushSubscriptionsTable,
			Columns: []string{profile.PwaPushSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NotificationPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationPermissionsTable,
			Columns: []string{profile.NotificationPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NotificationTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.NotificationTimesTable,
			Columns: []string{profile.NotificationTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PhoneVerificationCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhoneVerificationCodeTable,
			Columns: []string{profile.PhoneVerificationCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SentEmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.SentEmailsTable,
			Columns: []string{profile.SentEmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.SubscriptionTable,
			Columns: profile.SubscriptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Profile.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProfileCreate) OnConflict(opts ...sql.ConflictOption) *ProfileUpsertOne {
	pc.conflict = opts
	return &ProfileUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProfileCreate) OnConflictColumns(columns ...string) *ProfileUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProfileUpsertOne{
		create: pc,
	}
}

type (
	// ProfileUpsertOne is the builder for "upsert"-ing
	//  one Profile node.
	ProfileUpsertOne struct {
		create *ProfileCreate
	}

	// ProfileUpsert is the "OnConflict" setter.
	ProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfileUpsert) SetUpdatedAt(v time.Time) *ProfileUpsert {
	u.Set(profile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateUpdatedAt() *ProfileUpsert {
	u.SetExcluded(profile.FieldUpdatedAt)
	return u
}

// SetBio sets the "bio" field.
func (u *ProfileUpsert) SetBio(v string) *ProfileUpsert {
	u.Set(profile.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateBio() *ProfileUpsert {
	u.SetExcluded(profile.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *ProfileUpsert) ClearBio() *ProfileUpsert {
	u.SetNull(profile.FieldBio)
	return u
}

// SetBirthdate sets the "birthdate" field.
func (u *ProfileUpsert) SetBirthdate(v time.Time) *ProfileUpsert {
	u.Set(profile.FieldBirthdate, v)
	return u
}

// UpdateBirthdate sets the "birthdate" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateBirthdate() *ProfileUpsert {
	u.SetExcluded(profile.FieldBirthdate)
	return u
}

// ClearBirthdate clears the value of the "birthdate" field.
func (u *ProfileUpsert) ClearBirthdate() *ProfileUpsert {
	u.SetNull(profile.FieldBirthdate)
	return u
}

// SetAge sets the "age" field.
func (u *ProfileUpsert) SetAge(v int) *ProfileUpsert {
	u.Set(profile.FieldAge, v)
	return u
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateAge() *ProfileUpsert {
	u.SetExcluded(profile.FieldAge)
	return u
}

// AddAge adds v to the "age" field.
func (u *ProfileUpsert) AddAge(v int) *ProfileUpsert {
	u.Add(profile.FieldAge, v)
	return u
}

// ClearAge clears the value of the "age" field.
func (u *ProfileUpsert) ClearAge() *ProfileUpsert {
	u.SetNull(profile.FieldAge)
	return u
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (u *ProfileUpsert) SetFullyOnboarded(v bool) *ProfileUpsert {
	u.Set(profile.FieldFullyOnboarded, v)
	return u
}

// UpdateFullyOnboarded sets the "fully_onboarded" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateFullyOnboarded() *ProfileUpsert {
	u.SetExcluded(profile.FieldFullyOnboarded)
	return u
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (u *ProfileUpsert) SetPhoneNumberE164(v string) *ProfileUpsert {
	u.Set(profile.FieldPhoneNumberE164, v)
	return u
}

// UpdatePhoneNumberE164 sets the "phone_number_e164" field to the value that was provided on create.
func (u *ProfileUpsert) UpdatePhoneNumberE164() *ProfileUpsert {
	u.SetExcluded(profile.FieldPhoneNumberE164)
	return u
}

// ClearPhoneNumberE164 clears the value of the "phone_number_e164" field.
func (u *ProfileUpsert) ClearPhoneNumberE164() *ProfileUpsert {
	u.SetNull(profile.FieldPhoneNumberE164)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *ProfileUpsert) SetCountryCode(v string) *ProfileUpsert {
	u.Set(profile.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateCountryCode() *ProfileUpsert {
	u.SetExcluded(profile.FieldCountryCode)
	return u
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *ProfileUpsert) ClearCountryCode() *ProfileUpsert {
	u.SetNull(profile.FieldCountryCode)
	return u
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *ProfileUpsert) SetPhoneVerified(v bool) *ProfileUpsert {
	u.Set(profile.FieldPhoneVerified, v)
	return u
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *ProfileUpsert) UpdatePhoneVerified() *ProfileUpsert {
	u.SetExcluded(profile.FieldPhoneVerified)
	return u
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (u *ProfileUpsert) ClearPhoneVerified() *ProfileUpsert {
	u.SetNull(profile.FieldPhoneVerified)
	return u
}

// SetStripeID sets the "stripe_id" field.
func (u *ProfileUpsert) SetStripeID(v string) *ProfileUpsert {
	u.Set(profile.FieldStripeID, v)
	return u
}

// UpdateStripeID sets the "stripe_id" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateStripeID() *ProfileUpsert {
	u.SetExcluded(profile.FieldStripeID)
	return u
}

// ClearStripeID clears the value of the "stripe_id" field.
func (u *ProfileUpsert) ClearStripeID() *ProfileUpsert {
	u.SetNull(profile.FieldStripeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProfileUpsertOne) UpdateNewValues() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(profile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProfileUpsertOne) Ignore() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfileUpsertOne) DoNothing() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfileCreate.OnConflict
// documentation for more info.
func (u *ProfileUpsertOne) Update(set func(*ProfileUpsert)) *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfileUpsertOne) SetUpdatedAt(v time.Time) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateUpdatedAt() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBio sets the "bio" field.
func (u *ProfileUpsertOne) SetBio(v string) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateBio() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *ProfileUpsertOne) ClearBio() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearBio()
	})
}

// SetBirthdate sets the "birthdate" field.
func (u *ProfileUpsertOne) SetBirthdate(v time.Time) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetBirthdate(v)
	})
}

// UpdateBirthdate sets the "birthdate" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateBirthdate() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateBirthdate()
	})
}

// ClearBirthdate clears the value of the "birthdate" field.
func (u *ProfileUpsertOne) ClearBirthdate() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearBirthdate()
	})
}

// SetAge sets the "age" field.
func (u *ProfileUpsertOne) SetAge(v int) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *ProfileUpsertOne) AddAge(v int) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateAge() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateAge()
	})
}

// ClearAge clears the value of the "age" field.
func (u *ProfileUpsertOne) ClearAge() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearAge()
	})
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (u *ProfileUpsertOne) SetFullyOnboarded(v bool) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetFullyOnboarded(v)
	})
}

// UpdateFullyOnboarded sets the "fully_onboarded" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateFullyOnboarded() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateFullyOnboarded()
	})
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (u *ProfileUpsertOne) SetPhoneNumberE164(v string) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetPhoneNumberE164(v)
	})
}

// UpdatePhoneNumberE164 sets the "phone_number_e164" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdatePhoneNumberE164() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdatePhoneNumberE164()
	})
}

// ClearPhoneNumberE164 clears the value of the "phone_number_e164" field.
func (u *ProfileUpsertOne) ClearPhoneNumberE164() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearPhoneNumberE164()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ProfileUpsertOne) SetCountryCode(v string) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateCountryCode() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *ProfileUpsertOne) ClearCountryCode() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearCountryCode()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *ProfileUpsertOne) SetPhoneVerified(v bool) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdatePhoneVerified() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdatePhoneVerified()
	})
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (u *ProfileUpsertOne) ClearPhoneVerified() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearPhoneVerified()
	})
}

// SetStripeID sets the "stripe_id" field.
func (u *ProfileUpsertOne) SetStripeID(v string) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetStripeID(v)
	})
}

// UpdateStripeID sets the "stripe_id" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateStripeID() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateStripeID()
	})
}

// ClearStripeID clears the value of the "stripe_id" field.
func (u *ProfileUpsertOne) ClearStripeID() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearStripeID()
	})
}

// Exec executes the query.
func (u *ProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProfileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProfileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	err      error
	builders []*ProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Profile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProfileUpsertBulk {
	pcb.conflict = opts
	return &ProfileUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProfileCreateBulk) OnConflictColumns(columns ...string) *ProfileUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProfileUpsertBulk{
		create: pcb,
	}
}

// ProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of Profile nodes.
type ProfileUpsertBulk struct {
	create *ProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProfileUpsertBulk) UpdateNewValues() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(profile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProfileUpsertBulk) Ignore() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfileUpsertBulk) DoNothing() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfileCreateBulk.OnConflict
// documentation for more info.
func (u *ProfileUpsertBulk) Update(set func(*ProfileUpsert)) *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProfileUpsertBulk) SetUpdatedAt(v time.Time) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateUpdatedAt() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBio sets the "bio" field.
func (u *ProfileUpsertBulk) SetBio(v string) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateBio() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *ProfileUpsertBulk) ClearBio() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearBio()
	})
}

// SetBirthdate sets the "birthdate" field.
func (u *ProfileUpsertBulk) SetBirthdate(v time.Time) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetBirthdate(v)
	})
}

// UpdateBirthdate sets the "birthdate" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateBirthdate() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateBirthdate()
	})
}

// ClearBirthdate clears the value of the "birthdate" field.
func (u *ProfileUpsertBulk) ClearBirthdate() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearBirthdate()
	})
}

// SetAge sets the "age" field.
func (u *ProfileUpsertBulk) SetAge(v int) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *ProfileUpsertBulk) AddAge(v int) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateAge() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateAge()
	})
}

// ClearAge clears the value of the "age" field.
func (u *ProfileUpsertBulk) ClearAge() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearAge()
	})
}

// SetFullyOnboarded sets the "fully_onboarded" field.
func (u *ProfileUpsertBulk) SetFullyOnboarded(v bool) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetFullyOnboarded(v)
	})
}

// UpdateFullyOnboarded sets the "fully_onboarded" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateFullyOnboarded() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateFullyOnboarded()
	})
}

// SetPhoneNumberE164 sets the "phone_number_e164" field.
func (u *ProfileUpsertBulk) SetPhoneNumberE164(v string) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetPhoneNumberE164(v)
	})
}

// UpdatePhoneNumberE164 sets the "phone_number_e164" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdatePhoneNumberE164() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdatePhoneNumberE164()
	})
}

// ClearPhoneNumberE164 clears the value of the "phone_number_e164" field.
func (u *ProfileUpsertBulk) ClearPhoneNumberE164() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearPhoneNumberE164()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *ProfileUpsertBulk) SetCountryCode(v string) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateCountryCode() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *ProfileUpsertBulk) ClearCountryCode() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearCountryCode()
	})
}

// SetPhoneVerified sets the "phone_verified" field.
func (u *ProfileUpsertBulk) SetPhoneVerified(v bool) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetPhoneVerified(v)
	})
}

// UpdatePhoneVerified sets the "phone_verified" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdatePhoneVerified() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdatePhoneVerified()
	})
}

// ClearPhoneVerified clears the value of the "phone_verified" field.
func (u *ProfileUpsertBulk) ClearPhoneVerified() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearPhoneVerified()
	})
}

// SetStripeID sets the "stripe_id" field.
func (u *ProfileUpsertBulk) SetStripeID(v string) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetStripeID(v)
	})
}

// UpdateStripeID sets the "stripe_id" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateStripeID() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateStripeID()
	})
}

// ClearStripeID clears the value of the "stripe_id" field.
func (u *ProfileUpsertBulk) ClearStripeID() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearStripeID()
	})
}

// Exec executes the query.
func (u *ProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
