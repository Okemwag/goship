// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/notificationpermission"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationPermissionUpdate is the builder for updating NotificationPermission entities.
type NotificationPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationPermissionMutation
}

// Where appends a list predicates to the NotificationPermissionUpdate builder.
func (npu *NotificationPermissionUpdate) Where(ps ...predicate.NotificationPermission) *NotificationPermissionUpdate {
	npu.mutation.Where(ps...)
	return npu
}

// SetUpdatedAt sets the "updated_at" field.
func (npu *NotificationPermissionUpdate) SetUpdatedAt(t time.Time) *NotificationPermissionUpdate {
	npu.mutation.SetUpdatedAt(t)
	return npu
}

// SetPermission sets the "permission" field.
func (npu *NotificationPermissionUpdate) SetPermission(n notificationpermission.Permission) *NotificationPermissionUpdate {
	npu.mutation.SetPermission(n)
	return npu
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (npu *NotificationPermissionUpdate) SetNillablePermission(n *notificationpermission.Permission) *NotificationPermissionUpdate {
	if n != nil {
		npu.SetPermission(*n)
	}
	return npu
}

// SetPlatform sets the "platform" field.
func (npu *NotificationPermissionUpdate) SetPlatform(n notificationpermission.Platform) *NotificationPermissionUpdate {
	npu.mutation.SetPlatform(n)
	return npu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (npu *NotificationPermissionUpdate) SetNillablePlatform(n *notificationpermission.Platform) *NotificationPermissionUpdate {
	if n != nil {
		npu.SetPlatform(*n)
	}
	return npu
}

// SetProfileID sets the "profile_id" field.
func (npu *NotificationPermissionUpdate) SetProfileID(i int) *NotificationPermissionUpdate {
	npu.mutation.SetProfileID(i)
	return npu
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (npu *NotificationPermissionUpdate) SetNillableProfileID(i *int) *NotificationPermissionUpdate {
	if i != nil {
		npu.SetProfileID(*i)
	}
	return npu
}

// SetToken sets the "token" field.
func (npu *NotificationPermissionUpdate) SetToken(s string) *NotificationPermissionUpdate {
	npu.mutation.SetToken(s)
	return npu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (npu *NotificationPermissionUpdate) SetNillableToken(s *string) *NotificationPermissionUpdate {
	if s != nil {
		npu.SetToken(*s)
	}
	return npu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (npu *NotificationPermissionUpdate) SetProfile(p *Profile) *NotificationPermissionUpdate {
	return npu.SetProfileID(p.ID)
}

// Mutation returns the NotificationPermissionMutation object of the builder.
func (npu *NotificationPermissionUpdate) Mutation() *NotificationPermissionMutation {
	return npu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (npu *NotificationPermissionUpdate) ClearProfile() *NotificationPermissionUpdate {
	npu.mutation.ClearProfile()
	return npu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (npu *NotificationPermissionUpdate) Save(ctx context.Context) (int, error) {
	npu.defaults()
	return withHooks(ctx, npu.sqlSave, npu.mutation, npu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (npu *NotificationPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := npu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (npu *NotificationPermissionUpdate) Exec(ctx context.Context) error {
	_, err := npu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npu *NotificationPermissionUpdate) ExecX(ctx context.Context) {
	if err := npu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npu *NotificationPermissionUpdate) defaults() {
	if _, ok := npu.mutation.UpdatedAt(); !ok {
		v := notificationpermission.UpdateDefaultUpdatedAt()
		npu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npu *NotificationPermissionUpdate) check() error {
	if v, ok := npu.mutation.Permission(); ok {
		if err := notificationpermission.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`ent: validator failed for field "NotificationPermission.permission": %w`, err)}
		}
	}
	if v, ok := npu.mutation.Platform(); ok {
		if err := notificationpermission.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "NotificationPermission.platform": %w`, err)}
		}
	}
	if npu.mutation.ProfileCleared() && len(npu.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotificationPermission.profile"`)
	}
	return nil
}

func (npu *NotificationPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := npu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationpermission.Table, notificationpermission.Columns, sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt))
	if ps := npu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npu.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationpermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := npu.mutation.Permission(); ok {
		_spec.SetField(notificationpermission.FieldPermission, field.TypeEnum, value)
	}
	if value, ok := npu.mutation.Platform(); ok {
		_spec.SetField(notificationpermission.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := npu.mutation.Token(); ok {
		_spec.SetField(notificationpermission.FieldToken, field.TypeString, value)
	}
	if npu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationpermission.ProfileTable,
			Columns: []string{notificationpermission.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationpermission.ProfileTable,
			Columns: []string{notificationpermission.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, npu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	npu.mutation.done = true
	return n, nil
}

// NotificationPermissionUpdateOne is the builder for updating a single NotificationPermission entity.
type NotificationPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationPermissionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (npuo *NotificationPermissionUpdateOne) SetUpdatedAt(t time.Time) *NotificationPermissionUpdateOne {
	npuo.mutation.SetUpdatedAt(t)
	return npuo
}

// SetPermission sets the "permission" field.
func (npuo *NotificationPermissionUpdateOne) SetPermission(n notificationpermission.Permission) *NotificationPermissionUpdateOne {
	npuo.mutation.SetPermission(n)
	return npuo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (npuo *NotificationPermissionUpdateOne) SetNillablePermission(n *notificationpermission.Permission) *NotificationPermissionUpdateOne {
	if n != nil {
		npuo.SetPermission(*n)
	}
	return npuo
}

// SetPlatform sets the "platform" field.
func (npuo *NotificationPermissionUpdateOne) SetPlatform(n notificationpermission.Platform) *NotificationPermissionUpdateOne {
	npuo.mutation.SetPlatform(n)
	return npuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (npuo *NotificationPermissionUpdateOne) SetNillablePlatform(n *notificationpermission.Platform) *NotificationPermissionUpdateOne {
	if n != nil {
		npuo.SetPlatform(*n)
	}
	return npuo
}

// SetProfileID sets the "profile_id" field.
func (npuo *NotificationPermissionUpdateOne) SetProfileID(i int) *NotificationPermissionUpdateOne {
	npuo.mutation.SetProfileID(i)
	return npuo
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (npuo *NotificationPermissionUpdateOne) SetNillableProfileID(i *int) *NotificationPermissionUpdateOne {
	if i != nil {
		npuo.SetProfileID(*i)
	}
	return npuo
}

// SetToken sets the "token" field.
func (npuo *NotificationPermissionUpdateOne) SetToken(s string) *NotificationPermissionUpdateOne {
	npuo.mutation.SetToken(s)
	return npuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (npuo *NotificationPermissionUpdateOne) SetNillableToken(s *string) *NotificationPermissionUpdateOne {
	if s != nil {
		npuo.SetToken(*s)
	}
	return npuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (npuo *NotificationPermissionUpdateOne) SetProfile(p *Profile) *NotificationPermissionUpdateOne {
	return npuo.SetProfileID(p.ID)
}

// Mutation returns the NotificationPermissionMutation object of the builder.
func (npuo *NotificationPermissionUpdateOne) Mutation() *NotificationPermissionMutation {
	return npuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (npuo *NotificationPermissionUpdateOne) ClearProfile() *NotificationPermissionUpdateOne {
	npuo.mutation.ClearProfile()
	return npuo
}

// Where appends a list predicates to the NotificationPermissionUpdate builder.
func (npuo *NotificationPermissionUpdateOne) Where(ps ...predicate.NotificationPermission) *NotificationPermissionUpdateOne {
	npuo.mutation.Where(ps...)
	return npuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (npuo *NotificationPermissionUpdateOne) Select(field string, fields ...string) *NotificationPermissionUpdateOne {
	npuo.fields = append([]string{field}, fields...)
	return npuo
}

// Save executes the query and returns the updated NotificationPermission entity.
func (npuo *NotificationPermissionUpdateOne) Save(ctx context.Context) (*NotificationPermission, error) {
	npuo.defaults()
	return withHooks(ctx, npuo.sqlSave, npuo.mutation, npuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (npuo *NotificationPermissionUpdateOne) SaveX(ctx context.Context) *NotificationPermission {
	node, err := npuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (npuo *NotificationPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := npuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npuo *NotificationPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := npuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npuo *NotificationPermissionUpdateOne) defaults() {
	if _, ok := npuo.mutation.UpdatedAt(); !ok {
		v := notificationpermission.UpdateDefaultUpdatedAt()
		npuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npuo *NotificationPermissionUpdateOne) check() error {
	if v, ok := npuo.mutation.Permission(); ok {
		if err := notificationpermission.PermissionValidator(v); err != nil {
			return &ValidationError{Name: "permission", err: fmt.Errorf(`ent: validator failed for field "NotificationPermission.permission": %w`, err)}
		}
	}
	if v, ok := npuo.mutation.Platform(); ok {
		if err := notificationpermission.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "NotificationPermission.platform": %w`, err)}
		}
	}
	if npuo.mutation.ProfileCleared() && len(npuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotificationPermission.profile"`)
	}
	return nil
}

func (npuo *NotificationPermissionUpdateOne) sqlSave(ctx context.Context) (_node *NotificationPermission, err error) {
	if err := npuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationpermission.Table, notificationpermission.Columns, sqlgraph.NewFieldSpec(notificationpermission.FieldID, field.TypeInt))
	id, ok := npuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := npuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationpermission.FieldID)
		for _, f := range fields {
			if !notificationpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := npuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationpermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := npuo.mutation.Permission(); ok {
		_spec.SetField(notificationpermission.FieldPermission, field.TypeEnum, value)
	}
	if value, ok := npuo.mutation.Platform(); ok {
		_spec.SetField(notificationpermission.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := npuo.mutation.Token(); ok {
		_spec.SetField(notificationpermission.FieldToken, field.TypeString, value)
	}
	if npuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationpermission.ProfileTable,
			Columns: []string{notificationpermission.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationpermission.ProfileTable,
			Columns: []string{notificationpermission.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationPermission{config: npuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, npuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	npuo.mutation.done = true
	return _node, nil
}
