// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/notificationpermission"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationPermission is the model entity for the NotificationPermission schema.
type NotificationPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Permission holds the value of the "permission" field.
	Permission notificationpermission.Permission `json:"permission,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform notificationpermission.Platform `json:"platform,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID int `json:"profile_id,omitempty"`
	// For permissions cancellable through out-of-app-platform, this is like an auth token
	Token string `json:"token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationPermissionQuery when eager-loading is set.
	Edges        NotificationPermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationPermissionEdges holds the relations/edges for other nodes in the graph.
type NotificationPermissionEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationPermissionEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationpermission.FieldID, notificationpermission.FieldProfileID:
			values[i] = new(sql.NullInt64)
		case notificationpermission.FieldPermission, notificationpermission.FieldPlatform, notificationpermission.FieldToken:
			values[i] = new(sql.NullString)
		case notificationpermission.FieldCreatedAt, notificationpermission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationPermission fields.
func (np *NotificationPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			np.ID = int(value.Int64)
		case notificationpermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				np.CreatedAt = value.Time
			}
		case notificationpermission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				np.UpdatedAt = value.Time
			}
		case notificationpermission.FieldPermission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission", values[i])
			} else if value.Valid {
				np.Permission = notificationpermission.Permission(value.String)
			}
		case notificationpermission.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				np.Platform = notificationpermission.Platform(value.String)
			}
		case notificationpermission.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				np.ProfileID = int(value.Int64)
			}
		case notificationpermission.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				np.Token = value.String
			}
		default:
			np.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationPermission.
// This includes values selected through modifiers, order, etc.
func (np *NotificationPermission) Value(name string) (ent.Value, error) {
	return np.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the NotificationPermission entity.
func (np *NotificationPermission) QueryProfile() *ProfileQuery {
	return NewNotificationPermissionClient(np.config).QueryProfile(np)
}

// Update returns a builder for updating this NotificationPermission.
// Note that you need to call NotificationPermission.Unwrap() before calling this method if this NotificationPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (np *NotificationPermission) Update() *NotificationPermissionUpdateOne {
	return NewNotificationPermissionClient(np.config).UpdateOne(np)
}

// Unwrap unwraps the NotificationPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (np *NotificationPermission) Unwrap() *NotificationPermission {
	_tx, ok := np.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationPermission is not a transactional entity")
	}
	np.config.driver = _tx.drv
	return np
}

// String implements the fmt.Stringer.
func (np *NotificationPermission) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", np.ID))
	builder.WriteString("created_at=")
	builder.WriteString(np.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(np.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("permission=")
	builder.WriteString(fmt.Sprintf("%v", np.Permission))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", np.Platform))
	builder.WriteString(", ")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", np.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(np.Token)
	builder.WriteByte(')')
	return builder.String()
}

// NotificationPermissions is a parsable slice of NotificationPermission.
type NotificationPermissions []*NotificationPermission
