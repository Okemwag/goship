// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/profile"
	"github.com/mikestefanello/pagoda/ent/user"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// A short bio of the user.
	Bio string `json:"bio,omitempty"`
	// The birthdate of the user.
	Birthdate time.Time `json:"birthdate,omitempty"`
	// The age of the user.
	Age int `json:"age,omitempty"`
	// An onboarded user has entered all required data to allow for basic app functionalities.
	FullyOnboarded bool `json:"fully_onboarded,omitempty"`
	// Phone number in E164 format
	PhoneNumberE164 string `json:"phone_number_e164,omitempty"`
	// Phone number country code
	CountryCode string `json:"country_code,omitempty"`
	// Whether the associated phone number was verified to be reachable
	PhoneVerified bool `json:"phone_verified,omitempty"`
	// ID used by stripe payment system
	StripeID string `json:"stripe_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges                 ProfileEdges `json:"edges"`
	profile_profile_image *int
	user_profile          *int
	selectValues          sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Who the profile is friends/connected to.
	Friends []*Profile `json:"friends,omitempty"`
	// Photos associated to that profile, not including the profile picture.
	Photos []*Image `json:"photos,omitempty"`
	// ProfileImage holds the value of the profile_image edge.
	ProfileImage *Image `json:"profile_image,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// Invitations holds the value of the invitations edge.
	Invitations []*Invitation `json:"invitations,omitempty"`
	// Track FCM push notification subscriptions, used for iOS
	FcmPushSubscriptions []*FCMSubscriptions `json:"fcm_push_subscriptions,omitempty"`
	// Track PWA push notification subscriptions, used for all device types but iOS
	PwaPushSubscriptions []*PwaPushSubscription `json:"pwa_push_subscriptions,omitempty"`
	// NotificationPermissions holds the value of the notification_permissions edge.
	NotificationPermissions []*NotificationPermission `json:"notification_permissions,omitempty"`
	// Times at which a notification type should be sent to a profile
	NotificationTimes []*NotificationTime `json:"notification_times,omitempty"`
	// Phone verification code associated with this user
	PhoneVerificationCode []*PhoneVerificationCode `json:"phone_verification_code,omitempty"`
	// Emails this profile was sent
	SentEmails []*SentEmail `json:"sent_emails,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription []*MonthlySubscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) FriendsOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// PhotosOrErr returns the Photos value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) PhotosOrErr() ([]*Image, error) {
	if e.loadedTypes[1] {
		return e.Photos, nil
	}
	return nil, &NotLoadedError{edge: "photos"}
}

// ProfileImageOrErr returns the ProfileImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) ProfileImageOrErr() (*Image, error) {
	if e.ProfileImage != nil {
		return e.ProfileImage, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "profile_image"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[3] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// InvitationsOrErr returns the Invitations value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) InvitationsOrErr() ([]*Invitation, error) {
	if e.loadedTypes[4] {
		return e.Invitations, nil
	}
	return nil, &NotLoadedError{edge: "invitations"}
}

// FcmPushSubscriptionsOrErr returns the FcmPushSubscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) FcmPushSubscriptionsOrErr() ([]*FCMSubscriptions, error) {
	if e.loadedTypes[5] {
		return e.FcmPushSubscriptions, nil
	}
	return nil, &NotLoadedError{edge: "fcm_push_subscriptions"}
}

// PwaPushSubscriptionsOrErr returns the PwaPushSubscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) PwaPushSubscriptionsOrErr() ([]*PwaPushSubscription, error) {
	if e.loadedTypes[6] {
		return e.PwaPushSubscriptions, nil
	}
	return nil, &NotLoadedError{edge: "pwa_push_subscriptions"}
}

// NotificationPermissionsOrErr returns the NotificationPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) NotificationPermissionsOrErr() ([]*NotificationPermission, error) {
	if e.loadedTypes[7] {
		return e.NotificationPermissions, nil
	}
	return nil, &NotLoadedError{edge: "notification_permissions"}
}

// NotificationTimesOrErr returns the NotificationTimes value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) NotificationTimesOrErr() ([]*NotificationTime, error) {
	if e.loadedTypes[8] {
		return e.NotificationTimes, nil
	}
	return nil, &NotLoadedError{edge: "notification_times"}
}

// PhoneVerificationCodeOrErr returns the PhoneVerificationCode value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) PhoneVerificationCodeOrErr() ([]*PhoneVerificationCode, error) {
	if e.loadedTypes[9] {
		return e.PhoneVerificationCode, nil
	}
	return nil, &NotLoadedError{edge: "phone_verification_code"}
}

// SentEmailsOrErr returns the SentEmails value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) SentEmailsOrErr() ([]*SentEmail, error) {
	if e.loadedTypes[10] {
		return e.SentEmails, nil
	}
	return nil, &NotLoadedError{edge: "sent_emails"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) SubscriptionOrErr() ([]*MonthlySubscription, error) {
	if e.loadedTypes[12] {
		return e.Subscription, nil
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldFullyOnboarded, profile.FieldPhoneVerified:
			values[i] = new(sql.NullBool)
		case profile.FieldID, profile.FieldAge:
			values[i] = new(sql.NullInt64)
		case profile.FieldBio, profile.FieldPhoneNumberE164, profile.FieldCountryCode, profile.FieldStripeID:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt, profile.FieldUpdatedAt, profile.FieldBirthdate:
			values[i] = new(sql.NullTime)
		case profile.ForeignKeys[0]: // profile_profile_image
			values[i] = new(sql.NullInt64)
		case profile.ForeignKeys[1]: // user_profile
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case profile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case profile.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				pr.Bio = value.String
			}
		case profile.FieldBirthdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthdate", values[i])
			} else if value.Valid {
				pr.Birthdate = value.Time
			}
		case profile.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				pr.Age = int(value.Int64)
			}
		case profile.FieldFullyOnboarded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fully_onboarded", values[i])
			} else if value.Valid {
				pr.FullyOnboarded = value.Bool
			}
		case profile.FieldPhoneNumberE164:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number_e164", values[i])
			} else if value.Valid {
				pr.PhoneNumberE164 = value.String
			}
		case profile.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				pr.CountryCode = value.String
			}
		case profile.FieldPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field phone_verified", values[i])
			} else if value.Valid {
				pr.PhoneVerified = value.Bool
			}
		case profile.FieldStripeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_id", values[i])
			} else if value.Valid {
				pr.StripeID = value.String
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_profile_image", value)
			} else if value.Valid {
				pr.profile_profile_image = new(int)
				*pr.profile_profile_image = int(value.Int64)
			}
		case profile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_profile", value)
			} else if value.Valid {
				pr.user_profile = new(int)
				*pr.user_profile = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryFriends queries the "friends" edge of the Profile entity.
func (pr *Profile) QueryFriends() *ProfileQuery {
	return NewProfileClient(pr.config).QueryFriends(pr)
}

// QueryPhotos queries the "photos" edge of the Profile entity.
func (pr *Profile) QueryPhotos() *ImageQuery {
	return NewProfileClient(pr.config).QueryPhotos(pr)
}

// QueryProfileImage queries the "profile_image" edge of the Profile entity.
func (pr *Profile) QueryProfileImage() *ImageQuery {
	return NewProfileClient(pr.config).QueryProfileImage(pr)
}

// QueryNotifications queries the "notifications" edge of the Profile entity.
func (pr *Profile) QueryNotifications() *NotificationQuery {
	return NewProfileClient(pr.config).QueryNotifications(pr)
}

// QueryInvitations queries the "invitations" edge of the Profile entity.
func (pr *Profile) QueryInvitations() *InvitationQuery {
	return NewProfileClient(pr.config).QueryInvitations(pr)
}

// QueryFcmPushSubscriptions queries the "fcm_push_subscriptions" edge of the Profile entity.
func (pr *Profile) QueryFcmPushSubscriptions() *FCMSubscriptionsQuery {
	return NewProfileClient(pr.config).QueryFcmPushSubscriptions(pr)
}

// QueryPwaPushSubscriptions queries the "pwa_push_subscriptions" edge of the Profile entity.
func (pr *Profile) QueryPwaPushSubscriptions() *PwaPushSubscriptionQuery {
	return NewProfileClient(pr.config).QueryPwaPushSubscriptions(pr)
}

// QueryNotificationPermissions queries the "notification_permissions" edge of the Profile entity.
func (pr *Profile) QueryNotificationPermissions() *NotificationPermissionQuery {
	return NewProfileClient(pr.config).QueryNotificationPermissions(pr)
}

// QueryNotificationTimes queries the "notification_times" edge of the Profile entity.
func (pr *Profile) QueryNotificationTimes() *NotificationTimeQuery {
	return NewProfileClient(pr.config).QueryNotificationTimes(pr)
}

// QueryPhoneVerificationCode queries the "phone_verification_code" edge of the Profile entity.
func (pr *Profile) QueryPhoneVerificationCode() *PhoneVerificationCodeQuery {
	return NewProfileClient(pr.config).QueryPhoneVerificationCode(pr)
}

// QuerySentEmails queries the "sent_emails" edge of the Profile entity.
func (pr *Profile) QuerySentEmails() *SentEmailQuery {
	return NewProfileClient(pr.config).QuerySentEmails(pr)
}

// QueryUser queries the "user" edge of the Profile entity.
func (pr *Profile) QueryUser() *UserQuery {
	return NewProfileClient(pr.config).QueryUser(pr)
}

// QuerySubscription queries the "subscription" edge of the Profile entity.
func (pr *Profile) QuerySubscription() *MonthlySubscriptionQuery {
	return NewProfileClient(pr.config).QuerySubscription(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(pr.Bio)
	builder.WriteString(", ")
	builder.WriteString("birthdate=")
	builder.WriteString(pr.Birthdate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", pr.Age))
	builder.WriteString(", ")
	builder.WriteString("fully_onboarded=")
	builder.WriteString(fmt.Sprintf("%v", pr.FullyOnboarded))
	builder.WriteString(", ")
	builder.WriteString("phone_number_e164=")
	builder.WriteString(pr.PhoneNumberE164)
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(pr.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", pr.PhoneVerified))
	builder.WriteString(", ")
	builder.WriteString("stripe_id=")
	builder.WriteString(pr.StripeID)
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
