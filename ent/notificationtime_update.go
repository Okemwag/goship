// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/notificationtime"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationTimeUpdate is the builder for updating NotificationTime entities.
type NotificationTimeUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationTimeMutation
}

// Where appends a list predicates to the NotificationTimeUpdate builder.
func (ntu *NotificationTimeUpdate) Where(ps ...predicate.NotificationTime) *NotificationTimeUpdate {
	ntu.mutation.Where(ps...)
	return ntu
}

// SetUpdatedAt sets the "updated_at" field.
func (ntu *NotificationTimeUpdate) SetUpdatedAt(t time.Time) *NotificationTimeUpdate {
	ntu.mutation.SetUpdatedAt(t)
	return ntu
}

// SetType sets the "type" field.
func (ntu *NotificationTimeUpdate) SetType(n notificationtime.Type) *NotificationTimeUpdate {
	ntu.mutation.SetType(n)
	return ntu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ntu *NotificationTimeUpdate) SetNillableType(n *notificationtime.Type) *NotificationTimeUpdate {
	if n != nil {
		ntu.SetType(*n)
	}
	return ntu
}

// SetSendMinute sets the "send_minute" field.
func (ntu *NotificationTimeUpdate) SetSendMinute(i int) *NotificationTimeUpdate {
	ntu.mutation.ResetSendMinute()
	ntu.mutation.SetSendMinute(i)
	return ntu
}

// SetNillableSendMinute sets the "send_minute" field if the given value is not nil.
func (ntu *NotificationTimeUpdate) SetNillableSendMinute(i *int) *NotificationTimeUpdate {
	if i != nil {
		ntu.SetSendMinute(*i)
	}
	return ntu
}

// AddSendMinute adds i to the "send_minute" field.
func (ntu *NotificationTimeUpdate) AddSendMinute(i int) *NotificationTimeUpdate {
	ntu.mutation.AddSendMinute(i)
	return ntu
}

// SetProfileID sets the "profile_id" field.
func (ntu *NotificationTimeUpdate) SetProfileID(i int) *NotificationTimeUpdate {
	ntu.mutation.SetProfileID(i)
	return ntu
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (ntu *NotificationTimeUpdate) SetNillableProfileID(i *int) *NotificationTimeUpdate {
	if i != nil {
		ntu.SetProfileID(*i)
	}
	return ntu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ntu *NotificationTimeUpdate) SetProfile(p *Profile) *NotificationTimeUpdate {
	return ntu.SetProfileID(p.ID)
}

// Mutation returns the NotificationTimeMutation object of the builder.
func (ntu *NotificationTimeUpdate) Mutation() *NotificationTimeMutation {
	return ntu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ntu *NotificationTimeUpdate) ClearProfile() *NotificationTimeUpdate {
	ntu.mutation.ClearProfile()
	return ntu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NotificationTimeUpdate) Save(ctx context.Context) (int, error) {
	ntu.defaults()
	return withHooks(ctx, ntu.sqlSave, ntu.mutation, ntu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NotificationTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NotificationTimeUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NotificationTimeUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntu *NotificationTimeUpdate) defaults() {
	if _, ok := ntu.mutation.UpdatedAt(); !ok {
		v := notificationtime.UpdateDefaultUpdatedAt()
		ntu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntu *NotificationTimeUpdate) check() error {
	if v, ok := ntu.mutation.GetType(); ok {
		if err := notificationtime.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "NotificationTime.type": %w`, err)}
		}
	}
	if v, ok := ntu.mutation.SendMinute(); ok {
		if err := notificationtime.SendMinuteValidator(v); err != nil {
			return &ValidationError{Name: "send_minute", err: fmt.Errorf(`ent: validator failed for field "NotificationTime.send_minute": %w`, err)}
		}
	}
	if ntu.mutation.ProfileCleared() && len(ntu.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotificationTime.profile"`)
	}
	return nil
}

func (ntu *NotificationTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ntu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationtime.Table, notificationtime.Columns, sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt))
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ntu.mutation.GetType(); ok {
		_spec.SetField(notificationtime.FieldType, field.TypeEnum, value)
	}
	if value, ok := ntu.mutation.SendMinute(); ok {
		_spec.SetField(notificationtime.FieldSendMinute, field.TypeInt, value)
	}
	if value, ok := ntu.mutation.AddedSendMinute(); ok {
		_spec.AddField(notificationtime.FieldSendMinute, field.TypeInt, value)
	}
	if ntu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationtime.ProfileTable,
			Columns: []string{notificationtime.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationtime.ProfileTable,
			Columns: []string{notificationtime.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ntu.mutation.done = true
	return n, nil
}

// NotificationTimeUpdateOne is the builder for updating a single NotificationTime entity.
type NotificationTimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationTimeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ntuo *NotificationTimeUpdateOne) SetUpdatedAt(t time.Time) *NotificationTimeUpdateOne {
	ntuo.mutation.SetUpdatedAt(t)
	return ntuo
}

// SetType sets the "type" field.
func (ntuo *NotificationTimeUpdateOne) SetType(n notificationtime.Type) *NotificationTimeUpdateOne {
	ntuo.mutation.SetType(n)
	return ntuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ntuo *NotificationTimeUpdateOne) SetNillableType(n *notificationtime.Type) *NotificationTimeUpdateOne {
	if n != nil {
		ntuo.SetType(*n)
	}
	return ntuo
}

// SetSendMinute sets the "send_minute" field.
func (ntuo *NotificationTimeUpdateOne) SetSendMinute(i int) *NotificationTimeUpdateOne {
	ntuo.mutation.ResetSendMinute()
	ntuo.mutation.SetSendMinute(i)
	return ntuo
}

// SetNillableSendMinute sets the "send_minute" field if the given value is not nil.
func (ntuo *NotificationTimeUpdateOne) SetNillableSendMinute(i *int) *NotificationTimeUpdateOne {
	if i != nil {
		ntuo.SetSendMinute(*i)
	}
	return ntuo
}

// AddSendMinute adds i to the "send_minute" field.
func (ntuo *NotificationTimeUpdateOne) AddSendMinute(i int) *NotificationTimeUpdateOne {
	ntuo.mutation.AddSendMinute(i)
	return ntuo
}

// SetProfileID sets the "profile_id" field.
func (ntuo *NotificationTimeUpdateOne) SetProfileID(i int) *NotificationTimeUpdateOne {
	ntuo.mutation.SetProfileID(i)
	return ntuo
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (ntuo *NotificationTimeUpdateOne) SetNillableProfileID(i *int) *NotificationTimeUpdateOne {
	if i != nil {
		ntuo.SetProfileID(*i)
	}
	return ntuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ntuo *NotificationTimeUpdateOne) SetProfile(p *Profile) *NotificationTimeUpdateOne {
	return ntuo.SetProfileID(p.ID)
}

// Mutation returns the NotificationTimeMutation object of the builder.
func (ntuo *NotificationTimeUpdateOne) Mutation() *NotificationTimeMutation {
	return ntuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ntuo *NotificationTimeUpdateOne) ClearProfile() *NotificationTimeUpdateOne {
	ntuo.mutation.ClearProfile()
	return ntuo
}

// Where appends a list predicates to the NotificationTimeUpdate builder.
func (ntuo *NotificationTimeUpdateOne) Where(ps ...predicate.NotificationTime) *NotificationTimeUpdateOne {
	ntuo.mutation.Where(ps...)
	return ntuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntuo *NotificationTimeUpdateOne) Select(field string, fields ...string) *NotificationTimeUpdateOne {
	ntuo.fields = append([]string{field}, fields...)
	return ntuo
}

// Save executes the query and returns the updated NotificationTime entity.
func (ntuo *NotificationTimeUpdateOne) Save(ctx context.Context) (*NotificationTime, error) {
	ntuo.defaults()
	return withHooks(ctx, ntuo.sqlSave, ntuo.mutation, ntuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NotificationTimeUpdateOne) SaveX(ctx context.Context) *NotificationTime {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NotificationTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NotificationTimeUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntuo *NotificationTimeUpdateOne) defaults() {
	if _, ok := ntuo.mutation.UpdatedAt(); !ok {
		v := notificationtime.UpdateDefaultUpdatedAt()
		ntuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntuo *NotificationTimeUpdateOne) check() error {
	if v, ok := ntuo.mutation.GetType(); ok {
		if err := notificationtime.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "NotificationTime.type": %w`, err)}
		}
	}
	if v, ok := ntuo.mutation.SendMinute(); ok {
		if err := notificationtime.SendMinuteValidator(v); err != nil {
			return &ValidationError{Name: "send_minute", err: fmt.Errorf(`ent: validator failed for field "NotificationTime.send_minute": %w`, err)}
		}
	}
	if ntuo.mutation.ProfileCleared() && len(ntuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NotificationTime.profile"`)
	}
	return nil
}

func (ntuo *NotificationTimeUpdateOne) sqlSave(ctx context.Context) (_node *NotificationTime, err error) {
	if err := ntuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationtime.Table, notificationtime.Columns, sqlgraph.NewFieldSpec(notificationtime.FieldID, field.TypeInt))
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationTime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ntuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationtime.FieldID)
		for _, f := range fields {
			if !notificationtime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationtime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtime.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ntuo.mutation.GetType(); ok {
		_spec.SetField(notificationtime.FieldType, field.TypeEnum, value)
	}
	if value, ok := ntuo.mutation.SendMinute(); ok {
		_spec.SetField(notificationtime.FieldSendMinute, field.TypeInt, value)
	}
	if value, ok := ntuo.mutation.AddedSendMinute(); ok {
		_spec.AddField(notificationtime.FieldSendMinute, field.TypeInt, value)
	}
	if ntuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationtime.ProfileTable,
			Columns: []string{notificationtime.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationtime.ProfileTable,
			Columns: []string{notificationtime.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationTime{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ntuo.mutation.done = true
	return _node, nil
}
