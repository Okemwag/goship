// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/fcmsubscriptions"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// FCMSubscriptionsUpdate is the builder for updating FCMSubscriptions entities.
type FCMSubscriptionsUpdate struct {
	config
	hooks    []Hook
	mutation *FCMSubscriptionsMutation
}

// Where appends a list predicates to the FCMSubscriptionsUpdate builder.
func (fsu *FCMSubscriptionsUpdate) Where(ps ...predicate.FCMSubscriptions) *FCMSubscriptionsUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FCMSubscriptionsUpdate) SetUpdatedAt(t time.Time) *FCMSubscriptionsUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// SetToken sets the "token" field.
func (fsu *FCMSubscriptionsUpdate) SetToken(s string) *FCMSubscriptionsUpdate {
	fsu.mutation.SetToken(s)
	return fsu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (fsu *FCMSubscriptionsUpdate) SetNillableToken(s *string) *FCMSubscriptionsUpdate {
	if s != nil {
		fsu.SetToken(*s)
	}
	return fsu
}

// SetProfileID sets the "profile_id" field.
func (fsu *FCMSubscriptionsUpdate) SetProfileID(i int) *FCMSubscriptionsUpdate {
	fsu.mutation.SetProfileID(i)
	return fsu
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (fsu *FCMSubscriptionsUpdate) SetNillableProfileID(i *int) *FCMSubscriptionsUpdate {
	if i != nil {
		fsu.SetProfileID(*i)
	}
	return fsu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (fsu *FCMSubscriptionsUpdate) SetProfile(p *Profile) *FCMSubscriptionsUpdate {
	return fsu.SetProfileID(p.ID)
}

// Mutation returns the FCMSubscriptionsMutation object of the builder.
func (fsu *FCMSubscriptionsUpdate) Mutation() *FCMSubscriptionsMutation {
	return fsu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (fsu *FCMSubscriptionsUpdate) ClearProfile() *FCMSubscriptionsUpdate {
	fsu.mutation.ClearProfile()
	return fsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FCMSubscriptionsUpdate) Save(ctx context.Context) (int, error) {
	fsu.defaults()
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FCMSubscriptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FCMSubscriptionsUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FCMSubscriptionsUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsu *FCMSubscriptionsUpdate) defaults() {
	if _, ok := fsu.mutation.UpdatedAt(); !ok {
		v := fcmsubscriptions.UpdateDefaultUpdatedAt()
		fsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsu *FCMSubscriptionsUpdate) check() error {
	if v, ok := fsu.mutation.Token(); ok {
		if err := fcmsubscriptions.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "FCMSubscriptions.token": %w`, err)}
		}
	}
	if fsu.mutation.ProfileCleared() && len(fsu.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FCMSubscriptions.profile"`)
	}
	return nil
}

func (fsu *FCMSubscriptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fcmsubscriptions.Table, fcmsubscriptions.Columns, sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.SetField(fcmsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fsu.mutation.Token(); ok {
		_spec.SetField(fcmsubscriptions.FieldToken, field.TypeString, value)
	}
	if fsu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmsubscriptions.ProfileTable,
			Columns: []string{fcmsubscriptions.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmsubscriptions.ProfileTable,
			Columns: []string{fcmsubscriptions.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fcmsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FCMSubscriptionsUpdateOne is the builder for updating a single FCMSubscriptions entity.
type FCMSubscriptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FCMSubscriptionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FCMSubscriptionsUpdateOne) SetUpdatedAt(t time.Time) *FCMSubscriptionsUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// SetToken sets the "token" field.
func (fsuo *FCMSubscriptionsUpdateOne) SetToken(s string) *FCMSubscriptionsUpdateOne {
	fsuo.mutation.SetToken(s)
	return fsuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (fsuo *FCMSubscriptionsUpdateOne) SetNillableToken(s *string) *FCMSubscriptionsUpdateOne {
	if s != nil {
		fsuo.SetToken(*s)
	}
	return fsuo
}

// SetProfileID sets the "profile_id" field.
func (fsuo *FCMSubscriptionsUpdateOne) SetProfileID(i int) *FCMSubscriptionsUpdateOne {
	fsuo.mutation.SetProfileID(i)
	return fsuo
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (fsuo *FCMSubscriptionsUpdateOne) SetNillableProfileID(i *int) *FCMSubscriptionsUpdateOne {
	if i != nil {
		fsuo.SetProfileID(*i)
	}
	return fsuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (fsuo *FCMSubscriptionsUpdateOne) SetProfile(p *Profile) *FCMSubscriptionsUpdateOne {
	return fsuo.SetProfileID(p.ID)
}

// Mutation returns the FCMSubscriptionsMutation object of the builder.
func (fsuo *FCMSubscriptionsUpdateOne) Mutation() *FCMSubscriptionsMutation {
	return fsuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (fsuo *FCMSubscriptionsUpdateOne) ClearProfile() *FCMSubscriptionsUpdateOne {
	fsuo.mutation.ClearProfile()
	return fsuo
}

// Where appends a list predicates to the FCMSubscriptionsUpdate builder.
func (fsuo *FCMSubscriptionsUpdateOne) Where(ps ...predicate.FCMSubscriptions) *FCMSubscriptionsUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FCMSubscriptionsUpdateOne) Select(field string, fields ...string) *FCMSubscriptionsUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FCMSubscriptions entity.
func (fsuo *FCMSubscriptionsUpdateOne) Save(ctx context.Context) (*FCMSubscriptions, error) {
	fsuo.defaults()
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FCMSubscriptionsUpdateOne) SaveX(ctx context.Context) *FCMSubscriptions {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FCMSubscriptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FCMSubscriptionsUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsuo *FCMSubscriptionsUpdateOne) defaults() {
	if _, ok := fsuo.mutation.UpdatedAt(); !ok {
		v := fcmsubscriptions.UpdateDefaultUpdatedAt()
		fsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsuo *FCMSubscriptionsUpdateOne) check() error {
	if v, ok := fsuo.mutation.Token(); ok {
		if err := fcmsubscriptions.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "FCMSubscriptions.token": %w`, err)}
		}
	}
	if fsuo.mutation.ProfileCleared() && len(fsuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FCMSubscriptions.profile"`)
	}
	return nil
}

func (fsuo *FCMSubscriptionsUpdateOne) sqlSave(ctx context.Context) (_node *FCMSubscriptions, err error) {
	if err := fsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fcmsubscriptions.Table, fcmsubscriptions.Columns, sqlgraph.NewFieldSpec(fcmsubscriptions.FieldID, field.TypeInt))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FCMSubscriptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fcmsubscriptions.FieldID)
		for _, f := range fields {
			if !fcmsubscriptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fcmsubscriptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fcmsubscriptions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fsuo.mutation.Token(); ok {
		_spec.SetField(fcmsubscriptions.FieldToken, field.TypeString, value)
	}
	if fsuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmsubscriptions.ProfileTable,
			Columns: []string{fcmsubscriptions.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fcmsubscriptions.ProfileTable,
			Columns: []string{fcmsubscriptions.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FCMSubscriptions{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fcmsubscriptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
