// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/emailsubscriptiontype"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// EmailSubscriptionTypeDelete is the builder for deleting a EmailSubscriptionType entity.
type EmailSubscriptionTypeDelete struct {
	config
	hooks    []Hook
	mutation *EmailSubscriptionTypeMutation
}

// Where appends a list predicates to the EmailSubscriptionTypeDelete builder.
func (estd *EmailSubscriptionTypeDelete) Where(ps ...predicate.EmailSubscriptionType) *EmailSubscriptionTypeDelete {
	estd.mutation.Where(ps...)
	return estd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (estd *EmailSubscriptionTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, estd.sqlExec, estd.mutation, estd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (estd *EmailSubscriptionTypeDelete) ExecX(ctx context.Context) int {
	n, err := estd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (estd *EmailSubscriptionTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(emailsubscriptiontype.Table, sqlgraph.NewFieldSpec(emailsubscriptiontype.FieldID, field.TypeInt))
	if ps := estd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, estd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	estd.mutation.done = true
	return affected, err
}

// EmailSubscriptionTypeDeleteOne is the builder for deleting a single EmailSubscriptionType entity.
type EmailSubscriptionTypeDeleteOne struct {
	estd *EmailSubscriptionTypeDelete
}

// Where appends a list predicates to the EmailSubscriptionTypeDelete builder.
func (estdo *EmailSubscriptionTypeDeleteOne) Where(ps ...predicate.EmailSubscriptionType) *EmailSubscriptionTypeDeleteOne {
	estdo.estd.mutation.Where(ps...)
	return estdo
}

// Exec executes the deletion query.
func (estdo *EmailSubscriptionTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := estdo.estd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{emailsubscriptiontype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (estdo *EmailSubscriptionTypeDeleteOne) ExecX(ctx context.Context) {
	if err := estdo.Exec(ctx); err != nil {
		panic(err)
	}
}
