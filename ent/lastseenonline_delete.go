// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/lastseenonline"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// LastSeenOnlineDelete is the builder for deleting a LastSeenOnline entity.
type LastSeenOnlineDelete struct {
	config
	hooks    []Hook
	mutation *LastSeenOnlineMutation
}

// Where appends a list predicates to the LastSeenOnlineDelete builder.
func (lsod *LastSeenOnlineDelete) Where(ps ...predicate.LastSeenOnline) *LastSeenOnlineDelete {
	lsod.mutation.Where(ps...)
	return lsod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lsod *LastSeenOnlineDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lsod.sqlExec, lsod.mutation, lsod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lsod *LastSeenOnlineDelete) ExecX(ctx context.Context) int {
	n, err := lsod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lsod *LastSeenOnlineDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lastseenonline.Table, sqlgraph.NewFieldSpec(lastseenonline.FieldID, field.TypeInt))
	if ps := lsod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lsod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lsod.mutation.done = true
	return affected, err
}

// LastSeenOnlineDeleteOne is the builder for deleting a single LastSeenOnline entity.
type LastSeenOnlineDeleteOne struct {
	lsod *LastSeenOnlineDelete
}

// Where appends a list predicates to the LastSeenOnlineDelete builder.
func (lsodo *LastSeenOnlineDeleteOne) Where(ps ...predicate.LastSeenOnline) *LastSeenOnlineDeleteOne {
	lsodo.lsod.mutation.Where(ps...)
	return lsodo
}

// Exec executes the deletion query.
func (lsodo *LastSeenOnlineDeleteOne) Exec(ctx context.Context) error {
	n, err := lsodo.lsod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lastseenonline.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lsodo *LastSeenOnlineDeleteOne) ExecX(ctx context.Context) {
	if err := lsodo.Exec(ctx); err != nil {
		panic(err)
	}
}
