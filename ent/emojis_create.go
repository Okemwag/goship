// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/emojis"
)

// EmojisCreate is the builder for creating a Emojis entity.
type EmojisCreate struct {
	config
	mutation *EmojisMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUnifiedCode sets the "unified_code" field.
func (ec *EmojisCreate) SetUnifiedCode(s string) *EmojisCreate {
	ec.mutation.SetUnifiedCode(s)
	return ec
}

// SetShortcode sets the "shortcode" field.
func (ec *EmojisCreate) SetShortcode(s string) *EmojisCreate {
	ec.mutation.SetShortcode(s)
	return ec
}

// Mutation returns the EmojisMutation object of the builder.
func (ec *EmojisCreate) Mutation() *EmojisMutation {
	return ec.mutation
}

// Save creates the Emojis in the database.
func (ec *EmojisCreate) Save(ctx context.Context) (*Emojis, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmojisCreate) SaveX(ctx context.Context) *Emojis {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmojisCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmojisCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmojisCreate) check() error {
	if _, ok := ec.mutation.UnifiedCode(); !ok {
		return &ValidationError{Name: "unified_code", err: errors.New(`ent: missing required field "Emojis.unified_code"`)}
	}
	if v, ok := ec.mutation.UnifiedCode(); ok {
		if err := emojis.UnifiedCodeValidator(v); err != nil {
			return &ValidationError{Name: "unified_code", err: fmt.Errorf(`ent: validator failed for field "Emojis.unified_code": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Shortcode(); !ok {
		return &ValidationError{Name: "shortcode", err: errors.New(`ent: missing required field "Emojis.shortcode"`)}
	}
	if v, ok := ec.mutation.Shortcode(); ok {
		if err := emojis.ShortcodeValidator(v); err != nil {
			return &ValidationError{Name: "shortcode", err: fmt.Errorf(`ent: validator failed for field "Emojis.shortcode": %w`, err)}
		}
	}
	return nil
}

func (ec *EmojisCreate) sqlSave(ctx context.Context) (*Emojis, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmojisCreate) createSpec() (*Emojis, *sqlgraph.CreateSpec) {
	var (
		_node = &Emojis{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(emojis.Table, sqlgraph.NewFieldSpec(emojis.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.UnifiedCode(); ok {
		_spec.SetField(emojis.FieldUnifiedCode, field.TypeString, value)
		_node.UnifiedCode = value
	}
	if value, ok := ec.mutation.Shortcode(); ok {
		_spec.SetField(emojis.FieldShortcode, field.TypeString, value)
		_node.Shortcode = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Emojis.Create().
//		SetUnifiedCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmojisUpsert) {
//			SetUnifiedCode(v+v).
//		}).
//		Exec(ctx)
func (ec *EmojisCreate) OnConflict(opts ...sql.ConflictOption) *EmojisUpsertOne {
	ec.conflict = opts
	return &EmojisUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Emojis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EmojisCreate) OnConflictColumns(columns ...string) *EmojisUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EmojisUpsertOne{
		create: ec,
	}
}

type (
	// EmojisUpsertOne is the builder for "upsert"-ing
	//  one Emojis node.
	EmojisUpsertOne struct {
		create *EmojisCreate
	}

	// EmojisUpsert is the "OnConflict" setter.
	EmojisUpsert struct {
		*sql.UpdateSet
	}
)

// SetUnifiedCode sets the "unified_code" field.
func (u *EmojisUpsert) SetUnifiedCode(v string) *EmojisUpsert {
	u.Set(emojis.FieldUnifiedCode, v)
	return u
}

// UpdateUnifiedCode sets the "unified_code" field to the value that was provided on create.
func (u *EmojisUpsert) UpdateUnifiedCode() *EmojisUpsert {
	u.SetExcluded(emojis.FieldUnifiedCode)
	return u
}

// SetShortcode sets the "shortcode" field.
func (u *EmojisUpsert) SetShortcode(v string) *EmojisUpsert {
	u.Set(emojis.FieldShortcode, v)
	return u
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *EmojisUpsert) UpdateShortcode() *EmojisUpsert {
	u.SetExcluded(emojis.FieldShortcode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Emojis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmojisUpsertOne) UpdateNewValues() *EmojisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Emojis.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmojisUpsertOne) Ignore() *EmojisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmojisUpsertOne) DoNothing() *EmojisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmojisCreate.OnConflict
// documentation for more info.
func (u *EmojisUpsertOne) Update(set func(*EmojisUpsert)) *EmojisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmojisUpsert{UpdateSet: update})
	}))
	return u
}

// SetUnifiedCode sets the "unified_code" field.
func (u *EmojisUpsertOne) SetUnifiedCode(v string) *EmojisUpsertOne {
	return u.Update(func(s *EmojisUpsert) {
		s.SetUnifiedCode(v)
	})
}

// UpdateUnifiedCode sets the "unified_code" field to the value that was provided on create.
func (u *EmojisUpsertOne) UpdateUnifiedCode() *EmojisUpsertOne {
	return u.Update(func(s *EmojisUpsert) {
		s.UpdateUnifiedCode()
	})
}

// SetShortcode sets the "shortcode" field.
func (u *EmojisUpsertOne) SetShortcode(v string) *EmojisUpsertOne {
	return u.Update(func(s *EmojisUpsert) {
		s.SetShortcode(v)
	})
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *EmojisUpsertOne) UpdateShortcode() *EmojisUpsertOne {
	return u.Update(func(s *EmojisUpsert) {
		s.UpdateShortcode()
	})
}

// Exec executes the query.
func (u *EmojisUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmojisCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmojisUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmojisUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmojisUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmojisCreateBulk is the builder for creating many Emojis entities in bulk.
type EmojisCreateBulk struct {
	config
	err      error
	builders []*EmojisCreate
	conflict []sql.ConflictOption
}

// Save creates the Emojis entities in the database.
func (ecb *EmojisCreateBulk) Save(ctx context.Context) ([]*Emojis, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Emojis, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmojisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmojisCreateBulk) SaveX(ctx context.Context) []*Emojis {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmojisCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmojisCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Emojis.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmojisUpsert) {
//			SetUnifiedCode(v+v).
//		}).
//		Exec(ctx)
func (ecb *EmojisCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmojisUpsertBulk {
	ecb.conflict = opts
	return &EmojisUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Emojis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EmojisCreateBulk) OnConflictColumns(columns ...string) *EmojisUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EmojisUpsertBulk{
		create: ecb,
	}
}

// EmojisUpsertBulk is the builder for "upsert"-ing
// a bulk of Emojis nodes.
type EmojisUpsertBulk struct {
	create *EmojisCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Emojis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmojisUpsertBulk) UpdateNewValues() *EmojisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Emojis.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmojisUpsertBulk) Ignore() *EmojisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmojisUpsertBulk) DoNothing() *EmojisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmojisCreateBulk.OnConflict
// documentation for more info.
func (u *EmojisUpsertBulk) Update(set func(*EmojisUpsert)) *EmojisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmojisUpsert{UpdateSet: update})
	}))
	return u
}

// SetUnifiedCode sets the "unified_code" field.
func (u *EmojisUpsertBulk) SetUnifiedCode(v string) *EmojisUpsertBulk {
	return u.Update(func(s *EmojisUpsert) {
		s.SetUnifiedCode(v)
	})
}

// UpdateUnifiedCode sets the "unified_code" field to the value that was provided on create.
func (u *EmojisUpsertBulk) UpdateUnifiedCode() *EmojisUpsertBulk {
	return u.Update(func(s *EmojisUpsert) {
		s.UpdateUnifiedCode()
	})
}

// SetShortcode sets the "shortcode" field.
func (u *EmojisUpsertBulk) SetShortcode(v string) *EmojisUpsertBulk {
	return u.Update(func(s *EmojisUpsert) {
		s.SetShortcode(v)
	})
}

// UpdateShortcode sets the "shortcode" field to the value that was provided on create.
func (u *EmojisUpsertBulk) UpdateShortcode() *EmojisUpsertBulk {
	return u.Update(func(s *EmojisUpsert) {
		s.UpdateShortcode()
	})
}

// Exec executes the query.
func (u *EmojisUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmojisCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmojisCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmojisUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
