// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/filestorage"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/imagesize"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ImageSizeUpdate is the builder for updating ImageSize entities.
type ImageSizeUpdate struct {
	config
	hooks    []Hook
	mutation *ImageSizeMutation
}

// Where appends a list predicates to the ImageSizeUpdate builder.
func (isu *ImageSizeUpdate) Where(ps ...predicate.ImageSize) *ImageSizeUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// SetUpdatedAt sets the "updated_at" field.
func (isu *ImageSizeUpdate) SetUpdatedAt(t time.Time) *ImageSizeUpdate {
	isu.mutation.SetUpdatedAt(t)
	return isu
}

// SetSize sets the "size" field.
func (isu *ImageSizeUpdate) SetSize(i imagesize.Size) *ImageSizeUpdate {
	isu.mutation.SetSize(i)
	return isu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (isu *ImageSizeUpdate) SetNillableSize(i *imagesize.Size) *ImageSizeUpdate {
	if i != nil {
		isu.SetSize(*i)
	}
	return isu
}

// SetWidth sets the "width" field.
func (isu *ImageSizeUpdate) SetWidth(i int) *ImageSizeUpdate {
	isu.mutation.ResetWidth()
	isu.mutation.SetWidth(i)
	return isu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (isu *ImageSizeUpdate) SetNillableWidth(i *int) *ImageSizeUpdate {
	if i != nil {
		isu.SetWidth(*i)
	}
	return isu
}

// AddWidth adds i to the "width" field.
func (isu *ImageSizeUpdate) AddWidth(i int) *ImageSizeUpdate {
	isu.mutation.AddWidth(i)
	return isu
}

// SetHeight sets the "height" field.
func (isu *ImageSizeUpdate) SetHeight(i int) *ImageSizeUpdate {
	isu.mutation.ResetHeight()
	isu.mutation.SetHeight(i)
	return isu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (isu *ImageSizeUpdate) SetNillableHeight(i *int) *ImageSizeUpdate {
	if i != nil {
		isu.SetHeight(*i)
	}
	return isu
}

// AddHeight adds i to the "height" field.
func (isu *ImageSizeUpdate) AddHeight(i int) *ImageSizeUpdate {
	isu.mutation.AddHeight(i)
	return isu
}

// SetFileID sets the "file" edge to the FileStorage entity by ID.
func (isu *ImageSizeUpdate) SetFileID(id int) *ImageSizeUpdate {
	isu.mutation.SetFileID(id)
	return isu
}

// SetFile sets the "file" edge to the FileStorage entity.
func (isu *ImageSizeUpdate) SetFile(f *FileStorage) *ImageSizeUpdate {
	return isu.SetFileID(f.ID)
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (isu *ImageSizeUpdate) SetImageID(id int) *ImageSizeUpdate {
	isu.mutation.SetImageID(id)
	return isu
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (isu *ImageSizeUpdate) SetNillableImageID(id *int) *ImageSizeUpdate {
	if id != nil {
		isu = isu.SetImageID(*id)
	}
	return isu
}

// SetImage sets the "image" edge to the Image entity.
func (isu *ImageSizeUpdate) SetImage(i *Image) *ImageSizeUpdate {
	return isu.SetImageID(i.ID)
}

// Mutation returns the ImageSizeMutation object of the builder.
func (isu *ImageSizeUpdate) Mutation() *ImageSizeMutation {
	return isu.mutation
}

// ClearFile clears the "file" edge to the FileStorage entity.
func (isu *ImageSizeUpdate) ClearFile() *ImageSizeUpdate {
	isu.mutation.ClearFile()
	return isu
}

// ClearImage clears the "image" edge to the Image entity.
func (isu *ImageSizeUpdate) ClearImage() *ImageSizeUpdate {
	isu.mutation.ClearImage()
	return isu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *ImageSizeUpdate) Save(ctx context.Context) (int, error) {
	isu.defaults()
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *ImageSizeUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *ImageSizeUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *ImageSizeUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isu *ImageSizeUpdate) defaults() {
	if _, ok := isu.mutation.UpdatedAt(); !ok {
		v := imagesize.UpdateDefaultUpdatedAt()
		isu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isu *ImageSizeUpdate) check() error {
	if v, ok := isu.mutation.Size(); ok {
		if err := imagesize.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "ImageSize.size": %w`, err)}
		}
	}
	if v, ok := isu.mutation.Width(); ok {
		if err := imagesize.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "ImageSize.width": %w`, err)}
		}
	}
	if v, ok := isu.mutation.Height(); ok {
		if err := imagesize.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "ImageSize.height": %w`, err)}
		}
	}
	if isu.mutation.FileCleared() && len(isu.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImageSize.file"`)
	}
	return nil
}

func (isu *ImageSizeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := isu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagesize.Table, imagesize.Columns, sqlgraph.NewFieldSpec(imagesize.FieldID, field.TypeInt))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isu.mutation.UpdatedAt(); ok {
		_spec.SetField(imagesize.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := isu.mutation.Size(); ok {
		_spec.SetField(imagesize.FieldSize, field.TypeEnum, value)
	}
	if value, ok := isu.mutation.Width(); ok {
		_spec.SetField(imagesize.FieldWidth, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedWidth(); ok {
		_spec.AddField(imagesize.FieldWidth, field.TypeInt, value)
	}
	if value, ok := isu.mutation.Height(); ok {
		_spec.SetField(imagesize.FieldHeight, field.TypeInt, value)
	}
	if value, ok := isu.mutation.AddedHeight(); ok {
		_spec.AddField(imagesize.FieldHeight, field.TypeInt, value)
	}
	if isu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagesize.FileTable,
			Columns: []string{imagesize.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagesize.FileTable,
			Columns: []string{imagesize.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagesize.ImageTable,
			Columns: []string{imagesize.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagesize.ImageTable,
			Columns: []string{imagesize.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagesize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// ImageSizeUpdateOne is the builder for updating a single ImageSize entity.
type ImageSizeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageSizeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (isuo *ImageSizeUpdateOne) SetUpdatedAt(t time.Time) *ImageSizeUpdateOne {
	isuo.mutation.SetUpdatedAt(t)
	return isuo
}

// SetSize sets the "size" field.
func (isuo *ImageSizeUpdateOne) SetSize(i imagesize.Size) *ImageSizeUpdateOne {
	isuo.mutation.SetSize(i)
	return isuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (isuo *ImageSizeUpdateOne) SetNillableSize(i *imagesize.Size) *ImageSizeUpdateOne {
	if i != nil {
		isuo.SetSize(*i)
	}
	return isuo
}

// SetWidth sets the "width" field.
func (isuo *ImageSizeUpdateOne) SetWidth(i int) *ImageSizeUpdateOne {
	isuo.mutation.ResetWidth()
	isuo.mutation.SetWidth(i)
	return isuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (isuo *ImageSizeUpdateOne) SetNillableWidth(i *int) *ImageSizeUpdateOne {
	if i != nil {
		isuo.SetWidth(*i)
	}
	return isuo
}

// AddWidth adds i to the "width" field.
func (isuo *ImageSizeUpdateOne) AddWidth(i int) *ImageSizeUpdateOne {
	isuo.mutation.AddWidth(i)
	return isuo
}

// SetHeight sets the "height" field.
func (isuo *ImageSizeUpdateOne) SetHeight(i int) *ImageSizeUpdateOne {
	isuo.mutation.ResetHeight()
	isuo.mutation.SetHeight(i)
	return isuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (isuo *ImageSizeUpdateOne) SetNillableHeight(i *int) *ImageSizeUpdateOne {
	if i != nil {
		isuo.SetHeight(*i)
	}
	return isuo
}

// AddHeight adds i to the "height" field.
func (isuo *ImageSizeUpdateOne) AddHeight(i int) *ImageSizeUpdateOne {
	isuo.mutation.AddHeight(i)
	return isuo
}

// SetFileID sets the "file" edge to the FileStorage entity by ID.
func (isuo *ImageSizeUpdateOne) SetFileID(id int) *ImageSizeUpdateOne {
	isuo.mutation.SetFileID(id)
	return isuo
}

// SetFile sets the "file" edge to the FileStorage entity.
func (isuo *ImageSizeUpdateOne) SetFile(f *FileStorage) *ImageSizeUpdateOne {
	return isuo.SetFileID(f.ID)
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (isuo *ImageSizeUpdateOne) SetImageID(id int) *ImageSizeUpdateOne {
	isuo.mutation.SetImageID(id)
	return isuo
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (isuo *ImageSizeUpdateOne) SetNillableImageID(id *int) *ImageSizeUpdateOne {
	if id != nil {
		isuo = isuo.SetImageID(*id)
	}
	return isuo
}

// SetImage sets the "image" edge to the Image entity.
func (isuo *ImageSizeUpdateOne) SetImage(i *Image) *ImageSizeUpdateOne {
	return isuo.SetImageID(i.ID)
}

// Mutation returns the ImageSizeMutation object of the builder.
func (isuo *ImageSizeUpdateOne) Mutation() *ImageSizeMutation {
	return isuo.mutation
}

// ClearFile clears the "file" edge to the FileStorage entity.
func (isuo *ImageSizeUpdateOne) ClearFile() *ImageSizeUpdateOne {
	isuo.mutation.ClearFile()
	return isuo
}

// ClearImage clears the "image" edge to the Image entity.
func (isuo *ImageSizeUpdateOne) ClearImage() *ImageSizeUpdateOne {
	isuo.mutation.ClearImage()
	return isuo
}

// Where appends a list predicates to the ImageSizeUpdate builder.
func (isuo *ImageSizeUpdateOne) Where(ps ...predicate.ImageSize) *ImageSizeUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *ImageSizeUpdateOne) Select(field string, fields ...string) *ImageSizeUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated ImageSize entity.
func (isuo *ImageSizeUpdateOne) Save(ctx context.Context) (*ImageSize, error) {
	isuo.defaults()
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *ImageSizeUpdateOne) SaveX(ctx context.Context) *ImageSize {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *ImageSizeUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *ImageSizeUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isuo *ImageSizeUpdateOne) defaults() {
	if _, ok := isuo.mutation.UpdatedAt(); !ok {
		v := imagesize.UpdateDefaultUpdatedAt()
		isuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isuo *ImageSizeUpdateOne) check() error {
	if v, ok := isuo.mutation.Size(); ok {
		if err := imagesize.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "ImageSize.size": %w`, err)}
		}
	}
	if v, ok := isuo.mutation.Width(); ok {
		if err := imagesize.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "ImageSize.width": %w`, err)}
		}
	}
	if v, ok := isuo.mutation.Height(); ok {
		if err := imagesize.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "ImageSize.height": %w`, err)}
		}
	}
	if isuo.mutation.FileCleared() && len(isuo.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImageSize.file"`)
	}
	return nil
}

func (isuo *ImageSizeUpdateOne) sqlSave(ctx context.Context) (_node *ImageSize, err error) {
	if err := isuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagesize.Table, imagesize.Columns, sqlgraph.NewFieldSpec(imagesize.FieldID, field.TypeInt))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageSize.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagesize.FieldID)
		for _, f := range fields {
			if !imagesize.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagesize.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isuo.mutation.UpdatedAt(); ok {
		_spec.SetField(imagesize.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := isuo.mutation.Size(); ok {
		_spec.SetField(imagesize.FieldSize, field.TypeEnum, value)
	}
	if value, ok := isuo.mutation.Width(); ok {
		_spec.SetField(imagesize.FieldWidth, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedWidth(); ok {
		_spec.AddField(imagesize.FieldWidth, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.Height(); ok {
		_spec.SetField(imagesize.FieldHeight, field.TypeInt, value)
	}
	if value, ok := isuo.mutation.AddedHeight(); ok {
		_spec.AddField(imagesize.FieldHeight, field.TypeInt, value)
	}
	if isuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagesize.FileTable,
			Columns: []string{imagesize.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagesize.FileTable,
			Columns: []string{imagesize.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagesize.ImageTable,
			Columns: []string{imagesize.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagesize.ImageTable,
			Columns: []string{imagesize.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageSize{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagesize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}
