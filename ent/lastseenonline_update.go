// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/lastseenonline"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/user"
)

// LastSeenOnlineUpdate is the builder for updating LastSeenOnline entities.
type LastSeenOnlineUpdate struct {
	config
	hooks    []Hook
	mutation *LastSeenOnlineMutation
}

// Where appends a list predicates to the LastSeenOnlineUpdate builder.
func (lsou *LastSeenOnlineUpdate) Where(ps ...predicate.LastSeenOnline) *LastSeenOnlineUpdate {
	lsou.mutation.Where(ps...)
	return lsou
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lsou *LastSeenOnlineUpdate) SetUserID(id int) *LastSeenOnlineUpdate {
	lsou.mutation.SetUserID(id)
	return lsou
}

// SetUser sets the "user" edge to the User entity.
func (lsou *LastSeenOnlineUpdate) SetUser(u *User) *LastSeenOnlineUpdate {
	return lsou.SetUserID(u.ID)
}

// Mutation returns the LastSeenOnlineMutation object of the builder.
func (lsou *LastSeenOnlineUpdate) Mutation() *LastSeenOnlineMutation {
	return lsou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lsou *LastSeenOnlineUpdate) ClearUser() *LastSeenOnlineUpdate {
	lsou.mutation.ClearUser()
	return lsou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsou *LastSeenOnlineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lsou.sqlSave, lsou.mutation, lsou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsou *LastSeenOnlineUpdate) SaveX(ctx context.Context) int {
	affected, err := lsou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsou *LastSeenOnlineUpdate) Exec(ctx context.Context) error {
	_, err := lsou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsou *LastSeenOnlineUpdate) ExecX(ctx context.Context) {
	if err := lsou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsou *LastSeenOnlineUpdate) check() error {
	if lsou.mutation.UserCleared() && len(lsou.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LastSeenOnline.user"`)
	}
	return nil
}

func (lsou *LastSeenOnlineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lsou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lastseenonline.Table, lastseenonline.Columns, sqlgraph.NewFieldSpec(lastseenonline.FieldID, field.TypeInt))
	if ps := lsou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lsou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lastseenonline.UserTable,
			Columns: []string{lastseenonline.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lastseenonline.UserTable,
			Columns: []string{lastseenonline.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lsou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lastseenonline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lsou.mutation.done = true
	return n, nil
}

// LastSeenOnlineUpdateOne is the builder for updating a single LastSeenOnline entity.
type LastSeenOnlineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LastSeenOnlineMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lsouo *LastSeenOnlineUpdateOne) SetUserID(id int) *LastSeenOnlineUpdateOne {
	lsouo.mutation.SetUserID(id)
	return lsouo
}

// SetUser sets the "user" edge to the User entity.
func (lsouo *LastSeenOnlineUpdateOne) SetUser(u *User) *LastSeenOnlineUpdateOne {
	return lsouo.SetUserID(u.ID)
}

// Mutation returns the LastSeenOnlineMutation object of the builder.
func (lsouo *LastSeenOnlineUpdateOne) Mutation() *LastSeenOnlineMutation {
	return lsouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lsouo *LastSeenOnlineUpdateOne) ClearUser() *LastSeenOnlineUpdateOne {
	lsouo.mutation.ClearUser()
	return lsouo
}

// Where appends a list predicates to the LastSeenOnlineUpdate builder.
func (lsouo *LastSeenOnlineUpdateOne) Where(ps ...predicate.LastSeenOnline) *LastSeenOnlineUpdateOne {
	lsouo.mutation.Where(ps...)
	return lsouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsouo *LastSeenOnlineUpdateOne) Select(field string, fields ...string) *LastSeenOnlineUpdateOne {
	lsouo.fields = append([]string{field}, fields...)
	return lsouo
}

// Save executes the query and returns the updated LastSeenOnline entity.
func (lsouo *LastSeenOnlineUpdateOne) Save(ctx context.Context) (*LastSeenOnline, error) {
	return withHooks(ctx, lsouo.sqlSave, lsouo.mutation, lsouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsouo *LastSeenOnlineUpdateOne) SaveX(ctx context.Context) *LastSeenOnline {
	node, err := lsouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsouo *LastSeenOnlineUpdateOne) Exec(ctx context.Context) error {
	_, err := lsouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsouo *LastSeenOnlineUpdateOne) ExecX(ctx context.Context) {
	if err := lsouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsouo *LastSeenOnlineUpdateOne) check() error {
	if lsouo.mutation.UserCleared() && len(lsouo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LastSeenOnline.user"`)
	}
	return nil
}

func (lsouo *LastSeenOnlineUpdateOne) sqlSave(ctx context.Context) (_node *LastSeenOnline, err error) {
	if err := lsouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lastseenonline.Table, lastseenonline.Columns, sqlgraph.NewFieldSpec(lastseenonline.FieldID, field.TypeInt))
	id, ok := lsouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LastSeenOnline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lsouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lastseenonline.FieldID)
		for _, f := range fields {
			if !lastseenonline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lastseenonline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lsouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lastseenonline.UserTable,
			Columns: []string{lastseenonline.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lastseenonline.UserTable,
			Columns: []string{lastseenonline.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LastSeenOnline{config: lsouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lastseenonline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lsouo.mutation.done = true
	return _node, nil
}
