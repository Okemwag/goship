// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/fcmsubscriptions"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// FCMSubscriptions is the model entity for the FCMSubscriptions schema.
type FCMSubscriptions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID int `json:"profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FCMSubscriptionsQuery when eager-loading is set.
	Edges        FCMSubscriptionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FCMSubscriptionsEdges holds the relations/edges for other nodes in the graph.
type FCMSubscriptionsEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FCMSubscriptionsEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FCMSubscriptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fcmsubscriptions.FieldID, fcmsubscriptions.FieldProfileID:
			values[i] = new(sql.NullInt64)
		case fcmsubscriptions.FieldToken:
			values[i] = new(sql.NullString)
		case fcmsubscriptions.FieldCreatedAt, fcmsubscriptions.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FCMSubscriptions fields.
func (fs *FCMSubscriptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fcmsubscriptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case fcmsubscriptions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case fcmsubscriptions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		case fcmsubscriptions.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				fs.Token = value.String
			}
		case fcmsubscriptions.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				fs.ProfileID = int(value.Int64)
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FCMSubscriptions.
// This includes values selected through modifiers, order, etc.
func (fs *FCMSubscriptions) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the FCMSubscriptions entity.
func (fs *FCMSubscriptions) QueryProfile() *ProfileQuery {
	return NewFCMSubscriptionsClient(fs.config).QueryProfile(fs)
}

// Update returns a builder for updating this FCMSubscriptions.
// Note that you need to call FCMSubscriptions.Unwrap() before calling this method if this FCMSubscriptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FCMSubscriptions) Update() *FCMSubscriptionsUpdateOne {
	return NewFCMSubscriptionsClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FCMSubscriptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FCMSubscriptions) Unwrap() *FCMSubscriptions {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FCMSubscriptions is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FCMSubscriptions) String() string {
	var builder strings.Builder
	builder.WriteString("FCMSubscriptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(fs.Token)
	builder.WriteString(", ")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", fs.ProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// FCMSubscriptionsSlice is a parsable slice of FCMSubscriptions.
type FCMSubscriptionsSlice []*FCMSubscriptions
