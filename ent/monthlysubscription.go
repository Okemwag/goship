// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/monthlysubscription"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// MonthlySubscription is the model entity for the MonthlySubscription schema.
type MonthlySubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Product holds the value of the "product" field.
	Product monthlysubscription.Product `json:"product,omitempty"`
	// Whether this subscription is active or not.
	IsActive bool `json:"is_active,omitempty"`
	// Whether this subscription was paid or not.
	Paid bool `json:"paid,omitempty"`
	// Whether this subscription is a trial or not.
	IsTrial bool `json:"is_trial,omitempty"`
	// When the subscription started being effective.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// If the subscription expires, when it does so.
	ExpiredOn *time.Time `json:"expired_on,omitempty"`
	// Cancelling is effective after current period ends.
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	// PayingProfileID holds the value of the "paying_profile_id" field.
	PayingProfileID int `json:"paying_profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MonthlySubscriptionQuery when eager-loading is set.
	Edges        MonthlySubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MonthlySubscriptionEdges holds the relations/edges for other nodes in the graph.
type MonthlySubscriptionEdges struct {
	// Who is on this subscription.
	Benefactors []*Profile `json:"benefactors,omitempty"`
	// Who is paying for this subscription
	Payer *Profile `json:"payer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BenefactorsOrErr returns the Benefactors value or an error if the edge
// was not loaded in eager-loading.
func (e MonthlySubscriptionEdges) BenefactorsOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Benefactors, nil
	}
	return nil, &NotLoadedError{edge: "benefactors"}
}

// PayerOrErr returns the Payer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MonthlySubscriptionEdges) PayerOrErr() (*Profile, error) {
	if e.Payer != nil {
		return e.Payer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "payer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MonthlySubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case monthlysubscription.FieldIsActive, monthlysubscription.FieldPaid, monthlysubscription.FieldIsTrial:
			values[i] = new(sql.NullBool)
		case monthlysubscription.FieldID, monthlysubscription.FieldPayingProfileID:
			values[i] = new(sql.NullInt64)
		case monthlysubscription.FieldProduct:
			values[i] = new(sql.NullString)
		case monthlysubscription.FieldCreatedAt, monthlysubscription.FieldUpdatedAt, monthlysubscription.FieldStartedAt, monthlysubscription.FieldExpiredOn, monthlysubscription.FieldCancelledAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MonthlySubscription fields.
func (ms *MonthlySubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case monthlysubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case monthlysubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case monthlysubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		case monthlysubscription.FieldProduct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product", values[i])
			} else if value.Valid {
				ms.Product = monthlysubscription.Product(value.String)
			}
		case monthlysubscription.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				ms.IsActive = value.Bool
			}
		case monthlysubscription.FieldPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field paid", values[i])
			} else if value.Valid {
				ms.Paid = value.Bool
			}
		case monthlysubscription.FieldIsTrial:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_trial", values[i])
			} else if value.Valid {
				ms.IsTrial = value.Bool
			}
		case monthlysubscription.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				ms.StartedAt = new(time.Time)
				*ms.StartedAt = value.Time
			}
		case monthlysubscription.FieldExpiredOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_on", values[i])
			} else if value.Valid {
				ms.ExpiredOn = new(time.Time)
				*ms.ExpiredOn = value.Time
			}
		case monthlysubscription.FieldCancelledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled_at", values[i])
			} else if value.Valid {
				ms.CancelledAt = new(time.Time)
				*ms.CancelledAt = value.Time
			}
		case monthlysubscription.FieldPayingProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paying_profile_id", values[i])
			} else if value.Valid {
				ms.PayingProfileID = int(value.Int64)
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MonthlySubscription.
// This includes values selected through modifiers, order, etc.
func (ms *MonthlySubscription) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryBenefactors queries the "benefactors" edge of the MonthlySubscription entity.
func (ms *MonthlySubscription) QueryBenefactors() *ProfileQuery {
	return NewMonthlySubscriptionClient(ms.config).QueryBenefactors(ms)
}

// QueryPayer queries the "payer" edge of the MonthlySubscription entity.
func (ms *MonthlySubscription) QueryPayer() *ProfileQuery {
	return NewMonthlySubscriptionClient(ms.config).QueryPayer(ms)
}

// Update returns a builder for updating this MonthlySubscription.
// Note that you need to call MonthlySubscription.Unwrap() before calling this method if this MonthlySubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MonthlySubscription) Update() *MonthlySubscriptionUpdateOne {
	return NewMonthlySubscriptionClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MonthlySubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MonthlySubscription) Unwrap() *MonthlySubscription {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MonthlySubscription is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MonthlySubscription) String() string {
	var builder strings.Builder
	builder.WriteString("MonthlySubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("product=")
	builder.WriteString(fmt.Sprintf("%v", ms.Product))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", ms.IsActive))
	builder.WriteString(", ")
	builder.WriteString("paid=")
	builder.WriteString(fmt.Sprintf("%v", ms.Paid))
	builder.WriteString(", ")
	builder.WriteString("is_trial=")
	builder.WriteString(fmt.Sprintf("%v", ms.IsTrial))
	builder.WriteString(", ")
	if v := ms.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ms.ExpiredOn; v != nil {
		builder.WriteString("expired_on=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ms.CancelledAt; v != nil {
		builder.WriteString("cancelled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("paying_profile_id=")
	builder.WriteString(fmt.Sprintf("%v", ms.PayingProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// MonthlySubscriptions is a parsable slice of MonthlySubscription.
type MonthlySubscriptions []*MonthlySubscription
