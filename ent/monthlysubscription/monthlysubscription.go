// Code generated by ent, DO NOT EDIT.

package monthlysubscription

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the monthlysubscription type in the database.
	Label = "monthly_subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProduct holds the string denoting the product field in the database.
	FieldProduct = "product"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldPaid holds the string denoting the paid field in the database.
	FieldPaid = "paid"
	// FieldIsTrial holds the string denoting the is_trial field in the database.
	FieldIsTrial = "is_trial"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldExpiredOn holds the string denoting the expired_on field in the database.
	FieldExpiredOn = "expired_on"
	// FieldCancelledAt holds the string denoting the cancelled_at field in the database.
	FieldCancelledAt = "cancelled_at"
	// FieldPayingProfileID holds the string denoting the paying_profile_id field in the database.
	FieldPayingProfileID = "paying_profile_id"
	// EdgeBenefactors holds the string denoting the benefactors edge name in mutations.
	EdgeBenefactors = "benefactors"
	// EdgePayer holds the string denoting the payer edge name in mutations.
	EdgePayer = "payer"
	// Table holds the table name of the monthlysubscription in the database.
	Table = "monthly_subscriptions"
	// BenefactorsTable is the table that holds the benefactors relation/edge. The primary key declared below.
	BenefactorsTable = "monthly_subscription_benefactors"
	// BenefactorsInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	BenefactorsInverseTable = "profiles"
	// PayerTable is the table that holds the payer relation/edge.
	PayerTable = "monthly_subscriptions"
	// PayerInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	PayerInverseTable = "profiles"
	// PayerColumn is the table column denoting the payer relation/edge.
	PayerColumn = "paying_profile_id"
)

// Columns holds all SQL columns for monthlysubscription fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProduct,
	FieldIsActive,
	FieldPaid,
	FieldIsTrial,
	FieldStartedAt,
	FieldExpiredOn,
	FieldCancelledAt,
	FieldPayingProfileID,
}

var (
	// BenefactorsPrimaryKey and BenefactorsColumn2 are the table columns denoting the
	// primary key for the benefactors relation (M2M).
	BenefactorsPrimaryKey = []string{"monthly_subscription_id", "profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultPaid holds the default value on creation for the "paid" field.
	DefaultPaid bool
	// DefaultIsTrial holds the default value on creation for the "is_trial" field.
	DefaultIsTrial bool
)

// Product defines the type for the "product" enum field.
type Product string

// ProductFree is the default value of the Product enum.
const DefaultProduct = ProductFree

// Product values.
const (
	ProductFree Product = "free"
	ProductPro  Product = "pro"
)

func (pr Product) String() string {
	return string(pr)
}

// ProductValidator is a validator for the "product" field enum values. It is called by the builders before save.
func ProductValidator(pr Product) error {
	switch pr {
	case ProductFree, ProductPro:
		return nil
	default:
		return fmt.Errorf("monthlysubscription: invalid enum value for product field: %q", pr)
	}
}

// OrderOption defines the ordering options for the MonthlySubscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProduct orders the results by the product field.
func ByProduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProduct, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByPaid orders the results by the paid field.
func ByPaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaid, opts...).ToFunc()
}

// ByIsTrial orders the results by the is_trial field.
func ByIsTrial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTrial, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByExpiredOn orders the results by the expired_on field.
func ByExpiredOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredOn, opts...).ToFunc()
}

// ByCancelledAt orders the results by the cancelled_at field.
func ByCancelledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelledAt, opts...).ToFunc()
}

// ByPayingProfileID orders the results by the paying_profile_id field.
func ByPayingProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayingProfileID, opts...).ToFunc()
}

// ByBenefactorsCount orders the results by benefactors count.
func ByBenefactorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBenefactorsStep(), opts...)
	}
}

// ByBenefactors orders the results by benefactors terms.
func ByBenefactors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefactorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPayerField orders the results by payer field.
func ByPayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPayerStep(), sql.OrderByField(field, opts...))
	}
}
func newBenefactorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefactorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BenefactorsTable, BenefactorsPrimaryKey...),
	)
}
func newPayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PayerTable, PayerColumn),
	)
}
