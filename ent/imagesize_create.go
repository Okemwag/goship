// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/filestorage"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/imagesize"
)

// ImageSizeCreate is the builder for creating a ImageSize entity.
type ImageSizeCreate struct {
	config
	mutation *ImageSizeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (isc *ImageSizeCreate) SetCreatedAt(t time.Time) *ImageSizeCreate {
	isc.mutation.SetCreatedAt(t)
	return isc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (isc *ImageSizeCreate) SetNillableCreatedAt(t *time.Time) *ImageSizeCreate {
	if t != nil {
		isc.SetCreatedAt(*t)
	}
	return isc
}

// SetUpdatedAt sets the "updated_at" field.
func (isc *ImageSizeCreate) SetUpdatedAt(t time.Time) *ImageSizeCreate {
	isc.mutation.SetUpdatedAt(t)
	return isc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (isc *ImageSizeCreate) SetNillableUpdatedAt(t *time.Time) *ImageSizeCreate {
	if t != nil {
		isc.SetUpdatedAt(*t)
	}
	return isc
}

// SetSize sets the "size" field.
func (isc *ImageSizeCreate) SetSize(i imagesize.Size) *ImageSizeCreate {
	isc.mutation.SetSize(i)
	return isc
}

// SetWidth sets the "width" field.
func (isc *ImageSizeCreate) SetWidth(i int) *ImageSizeCreate {
	isc.mutation.SetWidth(i)
	return isc
}

// SetHeight sets the "height" field.
func (isc *ImageSizeCreate) SetHeight(i int) *ImageSizeCreate {
	isc.mutation.SetHeight(i)
	return isc
}

// SetFileID sets the "file" edge to the FileStorage entity by ID.
func (isc *ImageSizeCreate) SetFileID(id int) *ImageSizeCreate {
	isc.mutation.SetFileID(id)
	return isc
}

// SetFile sets the "file" edge to the FileStorage entity.
func (isc *ImageSizeCreate) SetFile(f *FileStorage) *ImageSizeCreate {
	return isc.SetFileID(f.ID)
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (isc *ImageSizeCreate) SetImageID(id int) *ImageSizeCreate {
	isc.mutation.SetImageID(id)
	return isc
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (isc *ImageSizeCreate) SetNillableImageID(id *int) *ImageSizeCreate {
	if id != nil {
		isc = isc.SetImageID(*id)
	}
	return isc
}

// SetImage sets the "image" edge to the Image entity.
func (isc *ImageSizeCreate) SetImage(i *Image) *ImageSizeCreate {
	return isc.SetImageID(i.ID)
}

// Mutation returns the ImageSizeMutation object of the builder.
func (isc *ImageSizeCreate) Mutation() *ImageSizeMutation {
	return isc.mutation
}

// Save creates the ImageSize in the database.
func (isc *ImageSizeCreate) Save(ctx context.Context) (*ImageSize, error) {
	isc.defaults()
	return withHooks(ctx, isc.sqlSave, isc.mutation, isc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (isc *ImageSizeCreate) SaveX(ctx context.Context) *ImageSize {
	v, err := isc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isc *ImageSizeCreate) Exec(ctx context.Context) error {
	_, err := isc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isc *ImageSizeCreate) ExecX(ctx context.Context) {
	if err := isc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isc *ImageSizeCreate) defaults() {
	if _, ok := isc.mutation.CreatedAt(); !ok {
		v := imagesize.DefaultCreatedAt()
		isc.mutation.SetCreatedAt(v)
	}
	if _, ok := isc.mutation.UpdatedAt(); !ok {
		v := imagesize.DefaultUpdatedAt()
		isc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isc *ImageSizeCreate) check() error {
	if _, ok := isc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageSize.created_at"`)}
	}
	if _, ok := isc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImageSize.updated_at"`)}
	}
	if _, ok := isc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "ImageSize.size"`)}
	}
	if v, ok := isc.mutation.Size(); ok {
		if err := imagesize.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "ImageSize.size": %w`, err)}
		}
	}
	if _, ok := isc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "ImageSize.width"`)}
	}
	if v, ok := isc.mutation.Width(); ok {
		if err := imagesize.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "ImageSize.width": %w`, err)}
		}
	}
	if _, ok := isc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "ImageSize.height"`)}
	}
	if v, ok := isc.mutation.Height(); ok {
		if err := imagesize.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "ImageSize.height": %w`, err)}
		}
	}
	if len(isc.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "ImageSize.file"`)}
	}
	return nil
}

func (isc *ImageSizeCreate) sqlSave(ctx context.Context) (*ImageSize, error) {
	if err := isc.check(); err != nil {
		return nil, err
	}
	_node, _spec := isc.createSpec()
	if err := sqlgraph.CreateNode(ctx, isc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	isc.mutation.id = &_node.ID
	isc.mutation.done = true
	return _node, nil
}

func (isc *ImageSizeCreate) createSpec() (*ImageSize, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageSize{config: isc.config}
		_spec = sqlgraph.NewCreateSpec(imagesize.Table, sqlgraph.NewFieldSpec(imagesize.FieldID, field.TypeInt))
	)
	_spec.OnConflict = isc.conflict
	if value, ok := isc.mutation.CreatedAt(); ok {
		_spec.SetField(imagesize.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := isc.mutation.UpdatedAt(); ok {
		_spec.SetField(imagesize.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := isc.mutation.Size(); ok {
		_spec.SetField(imagesize.FieldSize, field.TypeEnum, value)
		_node.Size = value
	}
	if value, ok := isc.mutation.Width(); ok {
		_spec.SetField(imagesize.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := isc.mutation.Height(); ok {
		_spec.SetField(imagesize.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if nodes := isc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagesize.FileTable,
			Columns: []string{imagesize.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_size_file = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := isc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagesize.ImageTable,
			Columns: []string{imagesize.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_sizes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImageSize.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImageSizeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (isc *ImageSizeCreate) OnConflict(opts ...sql.ConflictOption) *ImageSizeUpsertOne {
	isc.conflict = opts
	return &ImageSizeUpsertOne{
		create: isc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (isc *ImageSizeCreate) OnConflictColumns(columns ...string) *ImageSizeUpsertOne {
	isc.conflict = append(isc.conflict, sql.ConflictColumns(columns...))
	return &ImageSizeUpsertOne{
		create: isc,
	}
}

type (
	// ImageSizeUpsertOne is the builder for "upsert"-ing
	//  one ImageSize node.
	ImageSizeUpsertOne struct {
		create *ImageSizeCreate
	}

	// ImageSizeUpsert is the "OnConflict" setter.
	ImageSizeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageSizeUpsert) SetUpdatedAt(v time.Time) *ImageSizeUpsert {
	u.Set(imagesize.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageSizeUpsert) UpdateUpdatedAt() *ImageSizeUpsert {
	u.SetExcluded(imagesize.FieldUpdatedAt)
	return u
}

// SetSize sets the "size" field.
func (u *ImageSizeUpsert) SetSize(v imagesize.Size) *ImageSizeUpsert {
	u.Set(imagesize.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ImageSizeUpsert) UpdateSize() *ImageSizeUpsert {
	u.SetExcluded(imagesize.FieldSize)
	return u
}

// SetWidth sets the "width" field.
func (u *ImageSizeUpsert) SetWidth(v int) *ImageSizeUpsert {
	u.Set(imagesize.FieldWidth, v)
	return u
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ImageSizeUpsert) UpdateWidth() *ImageSizeUpsert {
	u.SetExcluded(imagesize.FieldWidth)
	return u
}

// AddWidth adds v to the "width" field.
func (u *ImageSizeUpsert) AddWidth(v int) *ImageSizeUpsert {
	u.Add(imagesize.FieldWidth, v)
	return u
}

// SetHeight sets the "height" field.
func (u *ImageSizeUpsert) SetHeight(v int) *ImageSizeUpsert {
	u.Set(imagesize.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ImageSizeUpsert) UpdateHeight() *ImageSizeUpsert {
	u.SetExcluded(imagesize.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *ImageSizeUpsert) AddHeight(v int) *ImageSizeUpsert {
	u.Add(imagesize.FieldHeight, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImageSizeUpsertOne) UpdateNewValues() *ImageSizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(imagesize.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ImageSizeUpsertOne) Ignore() *ImageSizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImageSizeUpsertOne) DoNothing() *ImageSizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImageSizeCreate.OnConflict
// documentation for more info.
func (u *ImageSizeUpsertOne) Update(set func(*ImageSizeUpsert)) *ImageSizeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImageSizeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageSizeUpsertOne) SetUpdatedAt(v time.Time) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageSizeUpsertOne) UpdateUpdatedAt() *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSize sets the "size" field.
func (u *ImageSizeUpsertOne) SetSize(v imagesize.Size) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ImageSizeUpsertOne) UpdateSize() *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateSize()
	})
}

// SetWidth sets the "width" field.
func (u *ImageSizeUpsertOne) SetWidth(v int) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *ImageSizeUpsertOne) AddWidth(v int) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ImageSizeUpsertOne) UpdateWidth() *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *ImageSizeUpsertOne) SetHeight(v int) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *ImageSizeUpsertOne) AddHeight(v int) *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ImageSizeUpsertOne) UpdateHeight() *ImageSizeUpsertOne {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateHeight()
	})
}

// Exec executes the query.
func (u *ImageSizeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImageSizeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImageSizeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ImageSizeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ImageSizeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ImageSizeCreateBulk is the builder for creating many ImageSize entities in bulk.
type ImageSizeCreateBulk struct {
	config
	err      error
	builders []*ImageSizeCreate
	conflict []sql.ConflictOption
}

// Save creates the ImageSize entities in the database.
func (iscb *ImageSizeCreateBulk) Save(ctx context.Context) ([]*ImageSize, error) {
	if iscb.err != nil {
		return nil, iscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iscb.builders))
	nodes := make([]*ImageSize, len(iscb.builders))
	mutators := make([]Mutator, len(iscb.builders))
	for i := range iscb.builders {
		func(i int, root context.Context) {
			builder := iscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageSizeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iscb *ImageSizeCreateBulk) SaveX(ctx context.Context) []*ImageSize {
	v, err := iscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscb *ImageSizeCreateBulk) Exec(ctx context.Context) error {
	_, err := iscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscb *ImageSizeCreateBulk) ExecX(ctx context.Context) {
	if err := iscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImageSize.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImageSizeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iscb *ImageSizeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ImageSizeUpsertBulk {
	iscb.conflict = opts
	return &ImageSizeUpsertBulk{
		create: iscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iscb *ImageSizeCreateBulk) OnConflictColumns(columns ...string) *ImageSizeUpsertBulk {
	iscb.conflict = append(iscb.conflict, sql.ConflictColumns(columns...))
	return &ImageSizeUpsertBulk{
		create: iscb,
	}
}

// ImageSizeUpsertBulk is the builder for "upsert"-ing
// a bulk of ImageSize nodes.
type ImageSizeUpsertBulk struct {
	create *ImageSizeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImageSizeUpsertBulk) UpdateNewValues() *ImageSizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(imagesize.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImageSize.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ImageSizeUpsertBulk) Ignore() *ImageSizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImageSizeUpsertBulk) DoNothing() *ImageSizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImageSizeCreateBulk.OnConflict
// documentation for more info.
func (u *ImageSizeUpsertBulk) Update(set func(*ImageSizeUpsert)) *ImageSizeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImageSizeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImageSizeUpsertBulk) SetUpdatedAt(v time.Time) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImageSizeUpsertBulk) UpdateUpdatedAt() *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSize sets the "size" field.
func (u *ImageSizeUpsertBulk) SetSize(v imagesize.Size) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ImageSizeUpsertBulk) UpdateSize() *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateSize()
	})
}

// SetWidth sets the "width" field.
func (u *ImageSizeUpsertBulk) SetWidth(v int) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetWidth(v)
	})
}

// AddWidth adds v to the "width" field.
func (u *ImageSizeUpsertBulk) AddWidth(v int) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.AddWidth(v)
	})
}

// UpdateWidth sets the "width" field to the value that was provided on create.
func (u *ImageSizeUpsertBulk) UpdateWidth() *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateWidth()
	})
}

// SetHeight sets the "height" field.
func (u *ImageSizeUpsertBulk) SetHeight(v int) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *ImageSizeUpsertBulk) AddHeight(v int) *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *ImageSizeUpsertBulk) UpdateHeight() *ImageSizeUpsertBulk {
	return u.Update(func(s *ImageSizeUpsert) {
		s.UpdateHeight()
	})
}

// Exec executes the query.
func (u *ImageSizeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ImageSizeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImageSizeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImageSizeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
