// Code generated by ent, DO NOT EDIT.

package notificationpermission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notificationpermission type in the database.
	Label = "notification_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPermission holds the string denoting the permission field in the database.
	FieldPermission = "permission"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// Table holds the table name of the notificationpermission in the database.
	Table = "notification_permissions"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "notification_permissions"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_id"
)

// Columns holds all SQL columns for notificationpermission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPermission,
	FieldPlatform,
	FieldProfileID,
	FieldToken,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Permission defines the type for the "permission" enum field.
type Permission string

// Permission values.
const (
	PermissionDailyReminder   Permission = "daily_reminder"
	PermissionPartnerActivity Permission = "partner_activity"
)

func (pe Permission) String() string {
	return string(pe)
}

// PermissionValidator is a validator for the "permission" field enum values. It is called by the builders before save.
func PermissionValidator(pe Permission) error {
	switch pe {
	case PermissionDailyReminder, PermissionPartnerActivity:
		return nil
	default:
		return fmt.Errorf("notificationpermission: invalid enum value for permission field: %q", pe)
	}
}

// Platform defines the type for the "platform" enum field.
type Platform string

// Platform values.
const (
	PlatformPush    Platform = "push"
	PlatformFcmPush Platform = "fcm_push"
	PlatformEmail   Platform = "email"
	PlatformSms     Platform = "sms"
)

func (pl Platform) String() string {
	return string(pl)
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl Platform) error {
	switch pl {
	case PlatformPush, PlatformFcmPush, PlatformEmail, PlatformSms:
		return nil
	default:
		return fmt.Errorf("notificationpermission: invalid enum value for platform field: %q", pl)
	}
}

// OrderOption defines the ordering options for the NotificationPermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPermission orders the results by the permission field.
func ByPermission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermission, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
