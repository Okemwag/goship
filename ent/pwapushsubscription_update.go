// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
	"github.com/mikestefanello/pagoda/ent/pwapushsubscription"
)

// PwaPushSubscriptionUpdate is the builder for updating PwaPushSubscription entities.
type PwaPushSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *PwaPushSubscriptionMutation
}

// Where appends a list predicates to the PwaPushSubscriptionUpdate builder.
func (ppsu *PwaPushSubscriptionUpdate) Where(ps ...predicate.PwaPushSubscription) *PwaPushSubscriptionUpdate {
	ppsu.mutation.Where(ps...)
	return ppsu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppsu *PwaPushSubscriptionUpdate) SetUpdatedAt(t time.Time) *PwaPushSubscriptionUpdate {
	ppsu.mutation.SetUpdatedAt(t)
	return ppsu
}

// SetEndpoint sets the "endpoint" field.
func (ppsu *PwaPushSubscriptionUpdate) SetEndpoint(s string) *PwaPushSubscriptionUpdate {
	ppsu.mutation.SetEndpoint(s)
	return ppsu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ppsu *PwaPushSubscriptionUpdate) SetNillableEndpoint(s *string) *PwaPushSubscriptionUpdate {
	if s != nil {
		ppsu.SetEndpoint(*s)
	}
	return ppsu
}

// SetP256dh sets the "p256dh" field.
func (ppsu *PwaPushSubscriptionUpdate) SetP256dh(s string) *PwaPushSubscriptionUpdate {
	ppsu.mutation.SetP256dh(s)
	return ppsu
}

// SetNillableP256dh sets the "p256dh" field if the given value is not nil.
func (ppsu *PwaPushSubscriptionUpdate) SetNillableP256dh(s *string) *PwaPushSubscriptionUpdate {
	if s != nil {
		ppsu.SetP256dh(*s)
	}
	return ppsu
}

// SetAuth sets the "auth" field.
func (ppsu *PwaPushSubscriptionUpdate) SetAuth(s string) *PwaPushSubscriptionUpdate {
	ppsu.mutation.SetAuth(s)
	return ppsu
}

// SetNillableAuth sets the "auth" field if the given value is not nil.
func (ppsu *PwaPushSubscriptionUpdate) SetNillableAuth(s *string) *PwaPushSubscriptionUpdate {
	if s != nil {
		ppsu.SetAuth(*s)
	}
	return ppsu
}

// SetProfileID sets the "profile_id" field.
func (ppsu *PwaPushSubscriptionUpdate) SetProfileID(i int) *PwaPushSubscriptionUpdate {
	ppsu.mutation.SetProfileID(i)
	return ppsu
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (ppsu *PwaPushSubscriptionUpdate) SetNillableProfileID(i *int) *PwaPushSubscriptionUpdate {
	if i != nil {
		ppsu.SetProfileID(*i)
	}
	return ppsu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ppsu *PwaPushSubscriptionUpdate) SetProfile(p *Profile) *PwaPushSubscriptionUpdate {
	return ppsu.SetProfileID(p.ID)
}

// Mutation returns the PwaPushSubscriptionMutation object of the builder.
func (ppsu *PwaPushSubscriptionUpdate) Mutation() *PwaPushSubscriptionMutation {
	return ppsu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ppsu *PwaPushSubscriptionUpdate) ClearProfile() *PwaPushSubscriptionUpdate {
	ppsu.mutation.ClearProfile()
	return ppsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppsu *PwaPushSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	ppsu.defaults()
	return withHooks(ctx, ppsu.sqlSave, ppsu.mutation, ppsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppsu *PwaPushSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ppsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppsu *PwaPushSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := ppsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppsu *PwaPushSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := ppsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppsu *PwaPushSubscriptionUpdate) defaults() {
	if _, ok := ppsu.mutation.UpdatedAt(); !ok {
		v := pwapushsubscription.UpdateDefaultUpdatedAt()
		ppsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppsu *PwaPushSubscriptionUpdate) check() error {
	if v, ok := ppsu.mutation.Endpoint(); ok {
		if err := pwapushsubscription.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.endpoint": %w`, err)}
		}
	}
	if v, ok := ppsu.mutation.P256dh(); ok {
		if err := pwapushsubscription.P256dhValidator(v); err != nil {
			return &ValidationError{Name: "p256dh", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.p256dh": %w`, err)}
		}
	}
	if v, ok := ppsu.mutation.Auth(); ok {
		if err := pwapushsubscription.AuthValidator(v); err != nil {
			return &ValidationError{Name: "auth", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.auth": %w`, err)}
		}
	}
	if ppsu.mutation.ProfileCleared() && len(ppsu.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PwaPushSubscription.profile"`)
	}
	return nil
}

func (ppsu *PwaPushSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pwapushsubscription.Table, pwapushsubscription.Columns, sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt))
	if ps := ppsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppsu.mutation.UpdatedAt(); ok {
		_spec.SetField(pwapushsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppsu.mutation.Endpoint(); ok {
		_spec.SetField(pwapushsubscription.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := ppsu.mutation.P256dh(); ok {
		_spec.SetField(pwapushsubscription.FieldP256dh, field.TypeString, value)
	}
	if value, ok := ppsu.mutation.Auth(); ok {
		_spec.SetField(pwapushsubscription.FieldAuth, field.TypeString, value)
	}
	if ppsu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pwapushsubscription.ProfileTable,
			Columns: []string{pwapushsubscription.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppsu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pwapushsubscription.ProfileTable,
			Columns: []string{pwapushsubscription.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pwapushsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppsu.mutation.done = true
	return n, nil
}

// PwaPushSubscriptionUpdateOne is the builder for updating a single PwaPushSubscription entity.
type PwaPushSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PwaPushSubscriptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetUpdatedAt(t time.Time) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.SetUpdatedAt(t)
	return ppsuo
}

// SetEndpoint sets the "endpoint" field.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetEndpoint(s string) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.SetEndpoint(s)
	return ppsuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetNillableEndpoint(s *string) *PwaPushSubscriptionUpdateOne {
	if s != nil {
		ppsuo.SetEndpoint(*s)
	}
	return ppsuo
}

// SetP256dh sets the "p256dh" field.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetP256dh(s string) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.SetP256dh(s)
	return ppsuo
}

// SetNillableP256dh sets the "p256dh" field if the given value is not nil.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetNillableP256dh(s *string) *PwaPushSubscriptionUpdateOne {
	if s != nil {
		ppsuo.SetP256dh(*s)
	}
	return ppsuo
}

// SetAuth sets the "auth" field.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetAuth(s string) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.SetAuth(s)
	return ppsuo
}

// SetNillableAuth sets the "auth" field if the given value is not nil.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetNillableAuth(s *string) *PwaPushSubscriptionUpdateOne {
	if s != nil {
		ppsuo.SetAuth(*s)
	}
	return ppsuo
}

// SetProfileID sets the "profile_id" field.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetProfileID(i int) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.SetProfileID(i)
	return ppsuo
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetNillableProfileID(i *int) *PwaPushSubscriptionUpdateOne {
	if i != nil {
		ppsuo.SetProfileID(*i)
	}
	return ppsuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (ppsuo *PwaPushSubscriptionUpdateOne) SetProfile(p *Profile) *PwaPushSubscriptionUpdateOne {
	return ppsuo.SetProfileID(p.ID)
}

// Mutation returns the PwaPushSubscriptionMutation object of the builder.
func (ppsuo *PwaPushSubscriptionUpdateOne) Mutation() *PwaPushSubscriptionMutation {
	return ppsuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (ppsuo *PwaPushSubscriptionUpdateOne) ClearProfile() *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.ClearProfile()
	return ppsuo
}

// Where appends a list predicates to the PwaPushSubscriptionUpdate builder.
func (ppsuo *PwaPushSubscriptionUpdateOne) Where(ps ...predicate.PwaPushSubscription) *PwaPushSubscriptionUpdateOne {
	ppsuo.mutation.Where(ps...)
	return ppsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppsuo *PwaPushSubscriptionUpdateOne) Select(field string, fields ...string) *PwaPushSubscriptionUpdateOne {
	ppsuo.fields = append([]string{field}, fields...)
	return ppsuo
}

// Save executes the query and returns the updated PwaPushSubscription entity.
func (ppsuo *PwaPushSubscriptionUpdateOne) Save(ctx context.Context) (*PwaPushSubscription, error) {
	ppsuo.defaults()
	return withHooks(ctx, ppsuo.sqlSave, ppsuo.mutation, ppsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppsuo *PwaPushSubscriptionUpdateOne) SaveX(ctx context.Context) *PwaPushSubscription {
	node, err := ppsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppsuo *PwaPushSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ppsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppsuo *PwaPushSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := ppsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppsuo *PwaPushSubscriptionUpdateOne) defaults() {
	if _, ok := ppsuo.mutation.UpdatedAt(); !ok {
		v := pwapushsubscription.UpdateDefaultUpdatedAt()
		ppsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppsuo *PwaPushSubscriptionUpdateOne) check() error {
	if v, ok := ppsuo.mutation.Endpoint(); ok {
		if err := pwapushsubscription.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.endpoint": %w`, err)}
		}
	}
	if v, ok := ppsuo.mutation.P256dh(); ok {
		if err := pwapushsubscription.P256dhValidator(v); err != nil {
			return &ValidationError{Name: "p256dh", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.p256dh": %w`, err)}
		}
	}
	if v, ok := ppsuo.mutation.Auth(); ok {
		if err := pwapushsubscription.AuthValidator(v); err != nil {
			return &ValidationError{Name: "auth", err: fmt.Errorf(`ent: validator failed for field "PwaPushSubscription.auth": %w`, err)}
		}
	}
	if ppsuo.mutation.ProfileCleared() && len(ppsuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PwaPushSubscription.profile"`)
	}
	return nil
}

func (ppsuo *PwaPushSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *PwaPushSubscription, err error) {
	if err := ppsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pwapushsubscription.Table, pwapushsubscription.Columns, sqlgraph.NewFieldSpec(pwapushsubscription.FieldID, field.TypeInt))
	id, ok := ppsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PwaPushSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pwapushsubscription.FieldID)
		for _, f := range fields {
			if !pwapushsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pwapushsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pwapushsubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppsuo.mutation.Endpoint(); ok {
		_spec.SetField(pwapushsubscription.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := ppsuo.mutation.P256dh(); ok {
		_spec.SetField(pwapushsubscription.FieldP256dh, field.TypeString, value)
	}
	if value, ok := ppsuo.mutation.Auth(); ok {
		_spec.SetField(pwapushsubscription.FieldAuth, field.TypeString, value)
	}
	if ppsuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pwapushsubscription.ProfileTable,
			Columns: []string{pwapushsubscription.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppsuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pwapushsubscription.ProfileTable,
			Columns: []string{pwapushsubscription.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PwaPushSubscription{config: ppsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pwapushsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppsuo.mutation.done = true
	return _node, nil
}
