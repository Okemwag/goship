// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/emojis"
)

// Emojis is the model entity for the Emojis schema.
type Emojis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UnifiedCode holds the value of the "unified_code" field.
	UnifiedCode string `json:"unified_code,omitempty"`
	// Shortcode holds the value of the "shortcode" field.
	Shortcode    string `json:"shortcode,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Emojis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emojis.FieldID:
			values[i] = new(sql.NullInt64)
		case emojis.FieldUnifiedCode, emojis.FieldShortcode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Emojis fields.
func (e *Emojis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emojis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case emojis.FieldUnifiedCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unified_code", values[i])
			} else if value.Valid {
				e.UnifiedCode = value.String
			}
		case emojis.FieldShortcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shortcode", values[i])
			} else if value.Valid {
				e.Shortcode = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Emojis.
// This includes values selected through modifiers, order, etc.
func (e *Emojis) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Emojis.
// Note that you need to call Emojis.Unwrap() before calling this method if this Emojis
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Emojis) Update() *EmojisUpdateOne {
	return NewEmojisClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Emojis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Emojis) Unwrap() *Emojis {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Emojis is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Emojis) String() string {
	var builder strings.Builder
	builder.WriteString("Emojis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("unified_code=")
	builder.WriteString(e.UnifiedCode)
	builder.WriteString(", ")
	builder.WriteString("shortcode=")
	builder.WriteString(e.Shortcode)
	builder.WriteByte(')')
	return builder.String()
}

// EmojisSlice is a parsable slice of Emojis.
type EmojisSlice []*Emojis
