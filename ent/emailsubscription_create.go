// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/emailsubscription"
	"github.com/mikestefanello/pagoda/ent/emailsubscriptiontype"
)

// EmailSubscriptionCreate is the builder for creating a EmailSubscription entity.
type EmailSubscriptionCreate struct {
	config
	mutation *EmailSubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (esc *EmailSubscriptionCreate) SetCreatedAt(t time.Time) *EmailSubscriptionCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *EmailSubscriptionCreate) SetNillableCreatedAt(t *time.Time) *EmailSubscriptionCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *EmailSubscriptionCreate) SetUpdatedAt(t time.Time) *EmailSubscriptionCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *EmailSubscriptionCreate) SetNillableUpdatedAt(t *time.Time) *EmailSubscriptionCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetEmail sets the "email" field.
func (esc *EmailSubscriptionCreate) SetEmail(s string) *EmailSubscriptionCreate {
	esc.mutation.SetEmail(s)
	return esc
}

// SetVerified sets the "verified" field.
func (esc *EmailSubscriptionCreate) SetVerified(b bool) *EmailSubscriptionCreate {
	esc.mutation.SetVerified(b)
	return esc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (esc *EmailSubscriptionCreate) SetNillableVerified(b *bool) *EmailSubscriptionCreate {
	if b != nil {
		esc.SetVerified(*b)
	}
	return esc
}

// SetConfirmationCode sets the "confirmation_code" field.
func (esc *EmailSubscriptionCreate) SetConfirmationCode(s string) *EmailSubscriptionCreate {
	esc.mutation.SetConfirmationCode(s)
	return esc
}

// SetLatitude sets the "latitude" field.
func (esc *EmailSubscriptionCreate) SetLatitude(f float64) *EmailSubscriptionCreate {
	esc.mutation.SetLatitude(f)
	return esc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (esc *EmailSubscriptionCreate) SetNillableLatitude(f *float64) *EmailSubscriptionCreate {
	if f != nil {
		esc.SetLatitude(*f)
	}
	return esc
}

// SetLongitude sets the "longitude" field.
func (esc *EmailSubscriptionCreate) SetLongitude(f float64) *EmailSubscriptionCreate {
	esc.mutation.SetLongitude(f)
	return esc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (esc *EmailSubscriptionCreate) SetNillableLongitude(f *float64) *EmailSubscriptionCreate {
	if f != nil {
		esc.SetLongitude(*f)
	}
	return esc
}

// AddSubscriptionIDs adds the "subscriptions" edge to the EmailSubscriptionType entity by IDs.
func (esc *EmailSubscriptionCreate) AddSubscriptionIDs(ids ...int) *EmailSubscriptionCreate {
	esc.mutation.AddSubscriptionIDs(ids...)
	return esc
}

// AddSubscriptions adds the "subscriptions" edges to the EmailSubscriptionType entity.
func (esc *EmailSubscriptionCreate) AddSubscriptions(e ...*EmailSubscriptionType) *EmailSubscriptionCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esc.AddSubscriptionIDs(ids...)
}

// Mutation returns the EmailSubscriptionMutation object of the builder.
func (esc *EmailSubscriptionCreate) Mutation() *EmailSubscriptionMutation {
	return esc.mutation
}

// Save creates the EmailSubscription in the database.
func (esc *EmailSubscriptionCreate) Save(ctx context.Context) (*EmailSubscription, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EmailSubscriptionCreate) SaveX(ctx context.Context) *EmailSubscription {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EmailSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EmailSubscriptionCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EmailSubscriptionCreate) defaults() {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := emailsubscription.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		v := emailsubscription.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.Verified(); !ok {
		v := emailsubscription.DefaultVerified
		esc.mutation.SetVerified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EmailSubscriptionCreate) check() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailSubscription.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailSubscription.updated_at"`)}
	}
	if _, ok := esc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EmailSubscription.email"`)}
	}
	if v, ok := esc.mutation.Email(); ok {
		if err := emailsubscription.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmailSubscription.email": %w`, err)}
		}
	}
	if _, ok := esc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`ent: missing required field "EmailSubscription.verified"`)}
	}
	if _, ok := esc.mutation.ConfirmationCode(); !ok {
		return &ValidationError{Name: "confirmation_code", err: errors.New(`ent: missing required field "EmailSubscription.confirmation_code"`)}
	}
	if v, ok := esc.mutation.ConfirmationCode(); ok {
		if err := emailsubscription.ConfirmationCodeValidator(v); err != nil {
			return &ValidationError{Name: "confirmation_code", err: fmt.Errorf(`ent: validator failed for field "EmailSubscription.confirmation_code": %w`, err)}
		}
	}
	return nil
}

func (esc *EmailSubscriptionCreate) sqlSave(ctx context.Context) (*EmailSubscription, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *EmailSubscriptionCreate) createSpec() (*EmailSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailSubscription{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(emailsubscription.Table, sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt))
	)
	_spec.OnConflict = esc.conflict
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(emailsubscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailsubscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.Email(); ok {
		_spec.SetField(emailsubscription.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := esc.mutation.Verified(); ok {
		_spec.SetField(emailsubscription.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := esc.mutation.ConfirmationCode(); ok {
		_spec.SetField(emailsubscription.FieldConfirmationCode, field.TypeString, value)
		_node.ConfirmationCode = value
	}
	if value, ok := esc.mutation.Latitude(); ok {
		_spec.SetField(emailsubscription.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := esc.mutation.Longitude(); ok {
		_spec.SetField(emailsubscription.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if nodes := esc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   emailsubscription.SubscriptionsTable,
			Columns: emailsubscription.SubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscriptiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailSubscription.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailSubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (esc *EmailSubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *EmailSubscriptionUpsertOne {
	esc.conflict = opts
	return &EmailSubscriptionUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esc *EmailSubscriptionCreate) OnConflictColumns(columns ...string) *EmailSubscriptionUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &EmailSubscriptionUpsertOne{
		create: esc,
	}
}

type (
	// EmailSubscriptionUpsertOne is the builder for "upsert"-ing
	//  one EmailSubscription node.
	EmailSubscriptionUpsertOne struct {
		create *EmailSubscriptionCreate
	}

	// EmailSubscriptionUpsert is the "OnConflict" setter.
	EmailSubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriptionUpsert) SetUpdatedAt(v time.Time) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateUpdatedAt() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldUpdatedAt)
	return u
}

// SetEmail sets the "email" field.
func (u *EmailSubscriptionUpsert) SetEmail(v string) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateEmail() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldEmail)
	return u
}

// SetVerified sets the "verified" field.
func (u *EmailSubscriptionUpsert) SetVerified(v bool) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldVerified, v)
	return u
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateVerified() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldVerified)
	return u
}

// SetConfirmationCode sets the "confirmation_code" field.
func (u *EmailSubscriptionUpsert) SetConfirmationCode(v string) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldConfirmationCode, v)
	return u
}

// UpdateConfirmationCode sets the "confirmation_code" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateConfirmationCode() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldConfirmationCode)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *EmailSubscriptionUpsert) SetLatitude(v float64) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateLatitude() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *EmailSubscriptionUpsert) AddLatitude(v float64) *EmailSubscriptionUpsert {
	u.Add(emailsubscription.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *EmailSubscriptionUpsert) ClearLatitude() *EmailSubscriptionUpsert {
	u.SetNull(emailsubscription.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *EmailSubscriptionUpsert) SetLongitude(v float64) *EmailSubscriptionUpsert {
	u.Set(emailsubscription.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsert) UpdateLongitude() *EmailSubscriptionUpsert {
	u.SetExcluded(emailsubscription.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *EmailSubscriptionUpsert) AddLongitude(v float64) *EmailSubscriptionUpsert {
	u.Add(emailsubscription.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *EmailSubscriptionUpsert) ClearLongitude() *EmailSubscriptionUpsert {
	u.SetNull(emailsubscription.FieldLongitude)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmailSubscriptionUpsertOne) UpdateNewValues() *EmailSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(emailsubscription.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmailSubscriptionUpsertOne) Ignore() *EmailSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailSubscriptionUpsertOne) DoNothing() *EmailSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailSubscriptionCreate.OnConflict
// documentation for more info.
func (u *EmailSubscriptionUpsertOne) Update(set func(*EmailSubscriptionUpsert)) *EmailSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriptionUpsertOne) SetUpdatedAt(v time.Time) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateUpdatedAt() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *EmailSubscriptionUpsertOne) SetEmail(v string) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateEmail() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateEmail()
	})
}

// SetVerified sets the "verified" field.
func (u *EmailSubscriptionUpsertOne) SetVerified(v bool) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateVerified() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateVerified()
	})
}

// SetConfirmationCode sets the "confirmation_code" field.
func (u *EmailSubscriptionUpsertOne) SetConfirmationCode(v string) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetConfirmationCode(v)
	})
}

// UpdateConfirmationCode sets the "confirmation_code" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateConfirmationCode() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateConfirmationCode()
	})
}

// SetLatitude sets the "latitude" field.
func (u *EmailSubscriptionUpsertOne) SetLatitude(v float64) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *EmailSubscriptionUpsertOne) AddLatitude(v float64) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateLatitude() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *EmailSubscriptionUpsertOne) ClearLatitude() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *EmailSubscriptionUpsertOne) SetLongitude(v float64) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *EmailSubscriptionUpsertOne) AddLongitude(v float64) *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertOne) UpdateLongitude() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *EmailSubscriptionUpsertOne) ClearLongitude() *EmailSubscriptionUpsertOne {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.ClearLongitude()
	})
}

// Exec executes the query.
func (u *EmailSubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailSubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailSubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailSubscriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailSubscriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailSubscriptionCreateBulk is the builder for creating many EmailSubscription entities in bulk.
type EmailSubscriptionCreateBulk struct {
	config
	err      error
	builders []*EmailSubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailSubscription entities in the database.
func (escb *EmailSubscriptionCreateBulk) Save(ctx context.Context) ([]*EmailSubscription, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EmailSubscription, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EmailSubscriptionCreateBulk) SaveX(ctx context.Context) []*EmailSubscription {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EmailSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EmailSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailSubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailSubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (escb *EmailSubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailSubscriptionUpsertBulk {
	escb.conflict = opts
	return &EmailSubscriptionUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (escb *EmailSubscriptionCreateBulk) OnConflictColumns(columns ...string) *EmailSubscriptionUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &EmailSubscriptionUpsertBulk{
		create: escb,
	}
}

// EmailSubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailSubscription nodes.
type EmailSubscriptionUpsertBulk struct {
	create *EmailSubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmailSubscriptionUpsertBulk) UpdateNewValues() *EmailSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(emailsubscription.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailSubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmailSubscriptionUpsertBulk) Ignore() *EmailSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailSubscriptionUpsertBulk) DoNothing() *EmailSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailSubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *EmailSubscriptionUpsertBulk) Update(set func(*EmailSubscriptionUpsert)) *EmailSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailSubscriptionUpsertBulk) SetUpdatedAt(v time.Time) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateUpdatedAt() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *EmailSubscriptionUpsertBulk) SetEmail(v string) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateEmail() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateEmail()
	})
}

// SetVerified sets the "verified" field.
func (u *EmailSubscriptionUpsertBulk) SetVerified(v bool) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateVerified() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateVerified()
	})
}

// SetConfirmationCode sets the "confirmation_code" field.
func (u *EmailSubscriptionUpsertBulk) SetConfirmationCode(v string) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetConfirmationCode(v)
	})
}

// UpdateConfirmationCode sets the "confirmation_code" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateConfirmationCode() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateConfirmationCode()
	})
}

// SetLatitude sets the "latitude" field.
func (u *EmailSubscriptionUpsertBulk) SetLatitude(v float64) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *EmailSubscriptionUpsertBulk) AddLatitude(v float64) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateLatitude() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *EmailSubscriptionUpsertBulk) ClearLatitude() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *EmailSubscriptionUpsertBulk) SetLongitude(v float64) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *EmailSubscriptionUpsertBulk) AddLongitude(v float64) *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *EmailSubscriptionUpsertBulk) UpdateLongitude() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *EmailSubscriptionUpsertBulk) ClearLongitude() *EmailSubscriptionUpsertBulk {
	return u.Update(func(s *EmailSubscriptionUpsert) {
		s.ClearLongitude()
	})
}

// Exec executes the query.
func (u *EmailSubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailSubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailSubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailSubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
