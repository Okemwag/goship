// Code generated by ent, DO NOT EDIT.

package emailsubscriptiontype

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the emailsubscriptiontype type in the database.
	Label = "email_subscription_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeSubscriber holds the string denoting the subscriber edge name in mutations.
	EdgeSubscriber = "subscriber"
	// Table holds the table name of the emailsubscriptiontype in the database.
	Table = "email_subscription_types"
	// SubscriberTable is the table that holds the subscriber relation/edge. The primary key declared below.
	SubscriberTable = "email_subscription_subscriptions"
	// SubscriberInverseTable is the table name for the EmailSubscription entity.
	// It exists in this package in order to avoid circular dependency with the "emailsubscription" package.
	SubscriberInverseTable = "email_subscriptions"
)

// Columns holds all SQL columns for emailsubscriptiontype fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldActive,
}

var (
	// SubscriberPrimaryKey and SubscriberColumn2 are the table columns denoting the
	// primary key for the subscriber relation (M2M).
	SubscriberPrimaryKey = []string{"email_subscription_id", "email_subscription_type_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// Name defines the type for the "name" enum field.
type Name string

// Name values.
const (
	NameEmailNewsletter    Name = "email_newsletter"
	NameLaunchAnnouncement Name = "launch_announcement"
)

func (n Name) String() string {
	return string(n)
}

// NameValidator is a validator for the "name" field enum values. It is called by the builders before save.
func NameValidator(n Name) error {
	switch n {
	case NameEmailNewsletter, NameLaunchAnnouncement:
		return nil
	default:
		return fmt.Errorf("emailsubscriptiontype: invalid enum value for name field: %q", n)
	}
}

// OrderOption defines the ordering options for the EmailSubscriptionType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// BySubscriberCount orders the results by subscriber count.
func BySubscriberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriberStep(), opts...)
	}
}

// BySubscriber orders the results by subscriber terms.
func BySubscriber(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubscriberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubscriberTable, SubscriberPrimaryKey...),
	)
}
