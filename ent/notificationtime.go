// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/notificationtime"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationTime is the model entity for the NotificationTime schema.
type NotificationTime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type of notification (e.g., message, update)
	Type notificationtime.Type `json:"type,omitempty"`
	// Minutes since UTC midnight (0-1439) when the notification can be sent
	SendMinute int `json:"send_minute,omitempty"`
	// A user should only have 1 entry
	ProfileID int `json:"profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationTimeQuery when eager-loading is set.
	Edges        NotificationTimeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationTimeEdges holds the relations/edges for other nodes in the graph.
type NotificationTimeEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationTimeEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationTime) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationtime.FieldID, notificationtime.FieldSendMinute, notificationtime.FieldProfileID:
			values[i] = new(sql.NullInt64)
		case notificationtime.FieldType:
			values[i] = new(sql.NullString)
		case notificationtime.FieldCreatedAt, notificationtime.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationTime fields.
func (nt *NotificationTime) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationtime.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int(value.Int64)
		case notificationtime.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nt.CreatedAt = value.Time
			}
		case notificationtime.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nt.UpdatedAt = value.Time
			}
		case notificationtime.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				nt.Type = notificationtime.Type(value.String)
			}
		case notificationtime.FieldSendMinute:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_minute", values[i])
			} else if value.Valid {
				nt.SendMinute = int(value.Int64)
			}
		case notificationtime.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				nt.ProfileID = int(value.Int64)
			}
		default:
			nt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationTime.
// This includes values selected through modifiers, order, etc.
func (nt *NotificationTime) Value(name string) (ent.Value, error) {
	return nt.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the NotificationTime entity.
func (nt *NotificationTime) QueryProfile() *ProfileQuery {
	return NewNotificationTimeClient(nt.config).QueryProfile(nt)
}

// Update returns a builder for updating this NotificationTime.
// Note that you need to call NotificationTime.Unwrap() before calling this method if this NotificationTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NotificationTime) Update() *NotificationTimeUpdateOne {
	return NewNotificationTimeClient(nt.config).UpdateOne(nt)
}

// Unwrap unwraps the NotificationTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NotificationTime) Unwrap() *NotificationTime {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationTime is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NotificationTime) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationTime(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(nt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(nt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", nt.Type))
	builder.WriteString(", ")
	builder.WriteString("send_minute=")
	builder.WriteString(fmt.Sprintf("%v", nt.SendMinute))
	builder.WriteString(", ")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.ProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationTimes is a parsable slice of NotificationTime.
type NotificationTimes []*NotificationTime
