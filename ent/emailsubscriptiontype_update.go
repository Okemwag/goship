// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/emailsubscription"
	"github.com/mikestefanello/pagoda/ent/emailsubscriptiontype"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// EmailSubscriptionTypeUpdate is the builder for updating EmailSubscriptionType entities.
type EmailSubscriptionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *EmailSubscriptionTypeMutation
}

// Where appends a list predicates to the EmailSubscriptionTypeUpdate builder.
func (estu *EmailSubscriptionTypeUpdate) Where(ps ...predicate.EmailSubscriptionType) *EmailSubscriptionTypeUpdate {
	estu.mutation.Where(ps...)
	return estu
}

// SetUpdatedAt sets the "updated_at" field.
func (estu *EmailSubscriptionTypeUpdate) SetUpdatedAt(t time.Time) *EmailSubscriptionTypeUpdate {
	estu.mutation.SetUpdatedAt(t)
	return estu
}

// SetName sets the "name" field.
func (estu *EmailSubscriptionTypeUpdate) SetName(e emailsubscriptiontype.Name) *EmailSubscriptionTypeUpdate {
	estu.mutation.SetName(e)
	return estu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (estu *EmailSubscriptionTypeUpdate) SetNillableName(e *emailsubscriptiontype.Name) *EmailSubscriptionTypeUpdate {
	if e != nil {
		estu.SetName(*e)
	}
	return estu
}

// SetActive sets the "active" field.
func (estu *EmailSubscriptionTypeUpdate) SetActive(b bool) *EmailSubscriptionTypeUpdate {
	estu.mutation.SetActive(b)
	return estu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (estu *EmailSubscriptionTypeUpdate) SetNillableActive(b *bool) *EmailSubscriptionTypeUpdate {
	if b != nil {
		estu.SetActive(*b)
	}
	return estu
}

// AddSubscriberIDs adds the "subscriber" edge to the EmailSubscription entity by IDs.
func (estu *EmailSubscriptionTypeUpdate) AddSubscriberIDs(ids ...int) *EmailSubscriptionTypeUpdate {
	estu.mutation.AddSubscriberIDs(ids...)
	return estu
}

// AddSubscriber adds the "subscriber" edges to the EmailSubscription entity.
func (estu *EmailSubscriptionTypeUpdate) AddSubscriber(e ...*EmailSubscription) *EmailSubscriptionTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return estu.AddSubscriberIDs(ids...)
}

// Mutation returns the EmailSubscriptionTypeMutation object of the builder.
func (estu *EmailSubscriptionTypeUpdate) Mutation() *EmailSubscriptionTypeMutation {
	return estu.mutation
}

// ClearSubscriber clears all "subscriber" edges to the EmailSubscription entity.
func (estu *EmailSubscriptionTypeUpdate) ClearSubscriber() *EmailSubscriptionTypeUpdate {
	estu.mutation.ClearSubscriber()
	return estu
}

// RemoveSubscriberIDs removes the "subscriber" edge to EmailSubscription entities by IDs.
func (estu *EmailSubscriptionTypeUpdate) RemoveSubscriberIDs(ids ...int) *EmailSubscriptionTypeUpdate {
	estu.mutation.RemoveSubscriberIDs(ids...)
	return estu
}

// RemoveSubscriber removes "subscriber" edges to EmailSubscription entities.
func (estu *EmailSubscriptionTypeUpdate) RemoveSubscriber(e ...*EmailSubscription) *EmailSubscriptionTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return estu.RemoveSubscriberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (estu *EmailSubscriptionTypeUpdate) Save(ctx context.Context) (int, error) {
	estu.defaults()
	return withHooks(ctx, estu.sqlSave, estu.mutation, estu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (estu *EmailSubscriptionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := estu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (estu *EmailSubscriptionTypeUpdate) Exec(ctx context.Context) error {
	_, err := estu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (estu *EmailSubscriptionTypeUpdate) ExecX(ctx context.Context) {
	if err := estu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (estu *EmailSubscriptionTypeUpdate) defaults() {
	if _, ok := estu.mutation.UpdatedAt(); !ok {
		v := emailsubscriptiontype.UpdateDefaultUpdatedAt()
		estu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (estu *EmailSubscriptionTypeUpdate) check() error {
	if v, ok := estu.mutation.Name(); ok {
		if err := emailsubscriptiontype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailSubscriptionType.name": %w`, err)}
		}
	}
	return nil
}

func (estu *EmailSubscriptionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := estu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailsubscriptiontype.Table, emailsubscriptiontype.Columns, sqlgraph.NewFieldSpec(emailsubscriptiontype.FieldID, field.TypeInt))
	if ps := estu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := estu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailsubscriptiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := estu.mutation.Name(); ok {
		_spec.SetField(emailsubscriptiontype.FieldName, field.TypeEnum, value)
	}
	if value, ok := estu.mutation.Active(); ok {
		_spec.SetField(emailsubscriptiontype.FieldActive, field.TypeBool, value)
	}
	if estu.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := estu.mutation.RemovedSubscriberIDs(); len(nodes) > 0 && !estu.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := estu.mutation.SubscriberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, estu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailsubscriptiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	estu.mutation.done = true
	return n, nil
}

// EmailSubscriptionTypeUpdateOne is the builder for updating a single EmailSubscriptionType entity.
type EmailSubscriptionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailSubscriptionTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (estuo *EmailSubscriptionTypeUpdateOne) SetUpdatedAt(t time.Time) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.SetUpdatedAt(t)
	return estuo
}

// SetName sets the "name" field.
func (estuo *EmailSubscriptionTypeUpdateOne) SetName(e emailsubscriptiontype.Name) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.SetName(e)
	return estuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (estuo *EmailSubscriptionTypeUpdateOne) SetNillableName(e *emailsubscriptiontype.Name) *EmailSubscriptionTypeUpdateOne {
	if e != nil {
		estuo.SetName(*e)
	}
	return estuo
}

// SetActive sets the "active" field.
func (estuo *EmailSubscriptionTypeUpdateOne) SetActive(b bool) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.SetActive(b)
	return estuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (estuo *EmailSubscriptionTypeUpdateOne) SetNillableActive(b *bool) *EmailSubscriptionTypeUpdateOne {
	if b != nil {
		estuo.SetActive(*b)
	}
	return estuo
}

// AddSubscriberIDs adds the "subscriber" edge to the EmailSubscription entity by IDs.
func (estuo *EmailSubscriptionTypeUpdateOne) AddSubscriberIDs(ids ...int) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.AddSubscriberIDs(ids...)
	return estuo
}

// AddSubscriber adds the "subscriber" edges to the EmailSubscription entity.
func (estuo *EmailSubscriptionTypeUpdateOne) AddSubscriber(e ...*EmailSubscription) *EmailSubscriptionTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return estuo.AddSubscriberIDs(ids...)
}

// Mutation returns the EmailSubscriptionTypeMutation object of the builder.
func (estuo *EmailSubscriptionTypeUpdateOne) Mutation() *EmailSubscriptionTypeMutation {
	return estuo.mutation
}

// ClearSubscriber clears all "subscriber" edges to the EmailSubscription entity.
func (estuo *EmailSubscriptionTypeUpdateOne) ClearSubscriber() *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.ClearSubscriber()
	return estuo
}

// RemoveSubscriberIDs removes the "subscriber" edge to EmailSubscription entities by IDs.
func (estuo *EmailSubscriptionTypeUpdateOne) RemoveSubscriberIDs(ids ...int) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.RemoveSubscriberIDs(ids...)
	return estuo
}

// RemoveSubscriber removes "subscriber" edges to EmailSubscription entities.
func (estuo *EmailSubscriptionTypeUpdateOne) RemoveSubscriber(e ...*EmailSubscription) *EmailSubscriptionTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return estuo.RemoveSubscriberIDs(ids...)
}

// Where appends a list predicates to the EmailSubscriptionTypeUpdate builder.
func (estuo *EmailSubscriptionTypeUpdateOne) Where(ps ...predicate.EmailSubscriptionType) *EmailSubscriptionTypeUpdateOne {
	estuo.mutation.Where(ps...)
	return estuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (estuo *EmailSubscriptionTypeUpdateOne) Select(field string, fields ...string) *EmailSubscriptionTypeUpdateOne {
	estuo.fields = append([]string{field}, fields...)
	return estuo
}

// Save executes the query and returns the updated EmailSubscriptionType entity.
func (estuo *EmailSubscriptionTypeUpdateOne) Save(ctx context.Context) (*EmailSubscriptionType, error) {
	estuo.defaults()
	return withHooks(ctx, estuo.sqlSave, estuo.mutation, estuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (estuo *EmailSubscriptionTypeUpdateOne) SaveX(ctx context.Context) *EmailSubscriptionType {
	node, err := estuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (estuo *EmailSubscriptionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := estuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (estuo *EmailSubscriptionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := estuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (estuo *EmailSubscriptionTypeUpdateOne) defaults() {
	if _, ok := estuo.mutation.UpdatedAt(); !ok {
		v := emailsubscriptiontype.UpdateDefaultUpdatedAt()
		estuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (estuo *EmailSubscriptionTypeUpdateOne) check() error {
	if v, ok := estuo.mutation.Name(); ok {
		if err := emailsubscriptiontype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailSubscriptionType.name": %w`, err)}
		}
	}
	return nil
}

func (estuo *EmailSubscriptionTypeUpdateOne) sqlSave(ctx context.Context) (_node *EmailSubscriptionType, err error) {
	if err := estuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailsubscriptiontype.Table, emailsubscriptiontype.Columns, sqlgraph.NewFieldSpec(emailsubscriptiontype.FieldID, field.TypeInt))
	id, ok := estuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailSubscriptionType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := estuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailsubscriptiontype.FieldID)
		for _, f := range fields {
			if !emailsubscriptiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailsubscriptiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := estuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := estuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailsubscriptiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := estuo.mutation.Name(); ok {
		_spec.SetField(emailsubscriptiontype.FieldName, field.TypeEnum, value)
	}
	if value, ok := estuo.mutation.Active(); ok {
		_spec.SetField(emailsubscriptiontype.FieldActive, field.TypeBool, value)
	}
	if estuo.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := estuo.mutation.RemovedSubscriberIDs(); len(nodes) > 0 && !estuo.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := estuo.mutation.SubscriberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailsubscriptiontype.SubscriberTable,
			Columns: emailsubscriptiontype.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailsubscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailSubscriptionType{config: estuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, estuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailsubscriptiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	estuo.mutation.done = true
	return _node, nil
}
