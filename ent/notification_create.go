// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/notification"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// NotificationCreate is the builder for creating a Notification entity.
type NotificationCreate struct {
	config
	mutation *NotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (nc *NotificationCreate) SetCreatedAt(t time.Time) *NotificationCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableCreatedAt(t *time.Time) *NotificationCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NotificationCreate) SetUpdatedAt(t time.Time) *NotificationCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableUpdatedAt(t *time.Time) *NotificationCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetType sets the "type" field.
func (nc *NotificationCreate) SetType(n notification.Type) *NotificationCreate {
	nc.mutation.SetType(n)
	return nc
}

// SetTitle sets the "title" field.
func (nc *NotificationCreate) SetTitle(s string) *NotificationCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableTitle(s *string) *NotificationCreate {
	if s != nil {
		nc.SetTitle(*s)
	}
	return nc
}

// SetText sets the "text" field.
func (nc *NotificationCreate) SetText(s string) *NotificationCreate {
	nc.mutation.SetText(s)
	return nc
}

// SetLink sets the "link" field.
func (nc *NotificationCreate) SetLink(s string) *NotificationCreate {
	nc.mutation.SetLink(s)
	return nc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableLink(s *string) *NotificationCreate {
	if s != nil {
		nc.SetLink(*s)
	}
	return nc
}

// SetRead sets the "read" field.
func (nc *NotificationCreate) SetRead(b bool) *NotificationCreate {
	nc.mutation.SetRead(b)
	return nc
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableRead(b *bool) *NotificationCreate {
	if b != nil {
		nc.SetRead(*b)
	}
	return nc
}

// SetReadAt sets the "read_at" field.
func (nc *NotificationCreate) SetReadAt(t time.Time) *NotificationCreate {
	nc.mutation.SetReadAt(t)
	return nc
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableReadAt(t *time.Time) *NotificationCreate {
	if t != nil {
		nc.SetReadAt(*t)
	}
	return nc
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (nc *NotificationCreate) SetProfileIDWhoCausedNotification(i int) *NotificationCreate {
	nc.mutation.SetProfileIDWhoCausedNotification(i)
	return nc
}

// SetNillableProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableProfileIDWhoCausedNotification(i *int) *NotificationCreate {
	if i != nil {
		nc.SetProfileIDWhoCausedNotification(*i)
	}
	return nc
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (nc *NotificationCreate) SetResourceIDTiedToNotif(i int) *NotificationCreate {
	nc.mutation.SetResourceIDTiedToNotif(i)
	return nc
}

// SetNillableResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableResourceIDTiedToNotif(i *int) *NotificationCreate {
	if i != nil {
		nc.SetResourceIDTiedToNotif(*i)
	}
	return nc
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (nc *NotificationCreate) SetReadInNotificationsCenter(b bool) *NotificationCreate {
	nc.mutation.SetReadInNotificationsCenter(b)
	return nc
}

// SetNillableReadInNotificationsCenter sets the "read_in_notifications_center" field if the given value is not nil.
func (nc *NotificationCreate) SetNillableReadInNotificationsCenter(b *bool) *NotificationCreate {
	if b != nil {
		nc.SetReadInNotificationsCenter(*b)
	}
	return nc
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (nc *NotificationCreate) SetProfileID(id int) *NotificationCreate {
	nc.mutation.SetProfileID(id)
	return nc
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (nc *NotificationCreate) SetNillableProfileID(id *int) *NotificationCreate {
	if id != nil {
		nc = nc.SetProfileID(*id)
	}
	return nc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (nc *NotificationCreate) SetProfile(p *Profile) *NotificationCreate {
	return nc.SetProfileID(p.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nc *NotificationCreate) Mutation() *NotificationMutation {
	return nc.mutation
}

// Save creates the Notification in the database.
func (nc *NotificationCreate) Save(ctx context.Context) (*Notification, error) {
	if err := nc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotificationCreate) SaveX(ctx context.Context) *Notification {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotificationCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotificationCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NotificationCreate) defaults() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		if notification.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := notification.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		if notification.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized notification.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := notification.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.Title(); !ok {
		v := notification.DefaultTitle
		nc.mutation.SetTitle(v)
	}
	if _, ok := nc.mutation.Read(); !ok {
		v := notification.DefaultRead
		nc.mutation.SetRead(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotificationCreate) check() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Notification.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Notification.updated_at"`)}
	}
	if _, ok := nc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Notification.type"`)}
	}
	if v, ok := nc.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Notification.title"`)}
	}
	if _, ok := nc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Notification.text"`)}
	}
	if _, ok := nc.mutation.Read(); !ok {
		return &ValidationError{Name: "read", err: errors.New(`ent: missing required field "Notification.read"`)}
	}
	return nil
}

func (nc *NotificationCreate) sqlSave(ctx context.Context) (*Notification, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NotificationCreate) createSpec() (*Notification, *sqlgraph.CreateSpec) {
	var (
		_node = &Notification{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(notification.Table, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = nc.conflict
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := nc.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := nc.mutation.Text(); ok {
		_spec.SetField(notification.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := nc.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
		_node.Link = &value
	}
	if value, ok := nc.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
		_node.Read = value
	}
	if value, ok := nc.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = &value
	}
	if value, ok := nc.mutation.ProfileIDWhoCausedNotification(); ok {
		_spec.SetField(notification.FieldProfileIDWhoCausedNotification, field.TypeInt, value)
		_node.ProfileIDWhoCausedNotification = &value
	}
	if value, ok := nc.mutation.ResourceIDTiedToNotif(); ok {
		_spec.SetField(notification.FieldResourceIDTiedToNotif, field.TypeInt, value)
		_node.ResourceIDTiedToNotif = &value
	}
	if value, ok := nc.mutation.ReadInNotificationsCenter(); ok {
		_spec.SetField(notification.FieldReadInNotificationsCenter, field.TypeBool, value)
		_node.ReadInNotificationsCenter = &value
	}
	if nodes := nc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.ProfileTable,
			Columns: []string{notification.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_notifications = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (nc *NotificationCreate) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertOne {
	nc.conflict = opts
	return &NotificationUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NotificationCreate) OnConflictColumns(columns ...string) *NotificationUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertOne{
		create: nc,
	}
}

type (
	// NotificationUpsertOne is the builder for "upsert"-ing
	//  one Notification node.
	NotificationUpsertOne struct {
		create *NotificationCreate
	}

	// NotificationUpsert is the "OnConflict" setter.
	NotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsert) SetUpdatedAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateUpdatedAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *NotificationUpsert) SetType(v notification.Type) *NotificationUpsert {
	u.Set(notification.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateType() *NotificationUpsert {
	u.SetExcluded(notification.FieldType)
	return u
}

// SetTitle sets the "title" field.
func (u *NotificationUpsert) SetTitle(v string) *NotificationUpsert {
	u.Set(notification.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateTitle() *NotificationUpsert {
	u.SetExcluded(notification.FieldTitle)
	return u
}

// SetText sets the "text" field.
func (u *NotificationUpsert) SetText(v string) *NotificationUpsert {
	u.Set(notification.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateText() *NotificationUpsert {
	u.SetExcluded(notification.FieldText)
	return u
}

// SetLink sets the "link" field.
func (u *NotificationUpsert) SetLink(v string) *NotificationUpsert {
	u.Set(notification.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateLink() *NotificationUpsert {
	u.SetExcluded(notification.FieldLink)
	return u
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsert) ClearLink() *NotificationUpsert {
	u.SetNull(notification.FieldLink)
	return u
}

// SetRead sets the "read" field.
func (u *NotificationUpsert) SetRead(v bool) *NotificationUpsert {
	u.Set(notification.FieldRead, v)
	return u
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateRead() *NotificationUpsert {
	u.SetExcluded(notification.FieldRead)
	return u
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsert) SetReadAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldReadAt, v)
	return u
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateReadAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldReadAt)
	return u
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsert) ClearReadAt() *NotificationUpsert {
	u.SetNull(notification.FieldReadAt)
	return u
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (u *NotificationUpsert) SetProfileIDWhoCausedNotification(v int) *NotificationUpsert {
	u.Set(notification.FieldProfileIDWhoCausedNotification, v)
	return u
}

// UpdateProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateProfileIDWhoCausedNotification() *NotificationUpsert {
	u.SetExcluded(notification.FieldProfileIDWhoCausedNotification)
	return u
}

// AddProfileIDWhoCausedNotification adds v to the "profile_id_who_caused_notification" field.
func (u *NotificationUpsert) AddProfileIDWhoCausedNotification(v int) *NotificationUpsert {
	u.Add(notification.FieldProfileIDWhoCausedNotification, v)
	return u
}

// ClearProfileIDWhoCausedNotification clears the value of the "profile_id_who_caused_notification" field.
func (u *NotificationUpsert) ClearProfileIDWhoCausedNotification() *NotificationUpsert {
	u.SetNull(notification.FieldProfileIDWhoCausedNotification)
	return u
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (u *NotificationUpsert) SetResourceIDTiedToNotif(v int) *NotificationUpsert {
	u.Set(notification.FieldResourceIDTiedToNotif, v)
	return u
}

// UpdateResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateResourceIDTiedToNotif() *NotificationUpsert {
	u.SetExcluded(notification.FieldResourceIDTiedToNotif)
	return u
}

// AddResourceIDTiedToNotif adds v to the "resource_id_tied_to_notif" field.
func (u *NotificationUpsert) AddResourceIDTiedToNotif(v int) *NotificationUpsert {
	u.Add(notification.FieldResourceIDTiedToNotif, v)
	return u
}

// ClearResourceIDTiedToNotif clears the value of the "resource_id_tied_to_notif" field.
func (u *NotificationUpsert) ClearResourceIDTiedToNotif() *NotificationUpsert {
	u.SetNull(notification.FieldResourceIDTiedToNotif)
	return u
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (u *NotificationUpsert) SetReadInNotificationsCenter(v bool) *NotificationUpsert {
	u.Set(notification.FieldReadInNotificationsCenter, v)
	return u
}

// UpdateReadInNotificationsCenter sets the "read_in_notifications_center" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateReadInNotificationsCenter() *NotificationUpsert {
	u.SetExcluded(notification.FieldReadInNotificationsCenter)
	return u
}

// ClearReadInNotificationsCenter clears the value of the "read_in_notifications_center" field.
func (u *NotificationUpsert) ClearReadInNotificationsCenter() *NotificationUpsert {
	u.SetNull(notification.FieldReadInNotificationsCenter)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NotificationUpsertOne) UpdateNewValues() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notification.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationUpsertOne) Ignore() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertOne) DoNothing() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreate.OnConflict
// documentation for more info.
func (u *NotificationUpsertOne) Update(set func(*NotificationUpsert)) *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertOne) SetUpdatedAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateUpdatedAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *NotificationUpsertOne) SetType(v notification.Type) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateType() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertOne) SetTitle(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateTitle() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetText sets the "text" field.
func (u *NotificationUpsertOne) SetText(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateText() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateText()
	})
}

// SetLink sets the "link" field.
func (u *NotificationUpsertOne) SetLink(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateLink() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsertOne) ClearLink() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearLink()
	})
}

// SetRead sets the "read" field.
func (u *NotificationUpsertOne) SetRead(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetRead(v)
	})
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateRead() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateRead()
	})
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsertOne) SetReadAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateReadAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsertOne) ClearReadAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadAt()
	})
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertOne) SetProfileIDWhoCausedNotification(v int) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetProfileIDWhoCausedNotification(v)
	})
}

// AddProfileIDWhoCausedNotification adds v to the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertOne) AddProfileIDWhoCausedNotification(v int) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.AddProfileIDWhoCausedNotification(v)
	})
}

// UpdateProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateProfileIDWhoCausedNotification() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateProfileIDWhoCausedNotification()
	})
}

// ClearProfileIDWhoCausedNotification clears the value of the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertOne) ClearProfileIDWhoCausedNotification() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearProfileIDWhoCausedNotification()
	})
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertOne) SetResourceIDTiedToNotif(v int) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceIDTiedToNotif(v)
	})
}

// AddResourceIDTiedToNotif adds v to the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertOne) AddResourceIDTiedToNotif(v int) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.AddResourceIDTiedToNotif(v)
	})
}

// UpdateResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateResourceIDTiedToNotif() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceIDTiedToNotif()
	})
}

// ClearResourceIDTiedToNotif clears the value of the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertOne) ClearResourceIDTiedToNotif() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceIDTiedToNotif()
	})
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (u *NotificationUpsertOne) SetReadInNotificationsCenter(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadInNotificationsCenter(v)
	})
}

// UpdateReadInNotificationsCenter sets the "read_in_notifications_center" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateReadInNotificationsCenter() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadInNotificationsCenter()
	})
}

// ClearReadInNotificationsCenter clears the value of the "read_in_notifications_center" field.
func (u *NotificationUpsertOne) ClearReadInNotificationsCenter() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadInNotificationsCenter()
	})
}

// Exec executes the query.
func (u *NotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationCreateBulk is the builder for creating many Notification entities in bulk.
type NotificationCreateBulk struct {
	config
	err      error
	builders []*NotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Notification entities in the database.
func (ncb *NotificationCreateBulk) Save(ctx context.Context) ([]*Notification, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notification, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotificationCreateBulk) SaveX(ctx context.Context) []*Notification {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotificationCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ncb *NotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertBulk {
	ncb.conflict = opts
	return &NotificationUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NotificationCreateBulk) OnConflictColumns(columns ...string) *NotificationUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertBulk{
		create: ncb,
	}
}

// NotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Notification nodes.
type NotificationUpsertBulk struct {
	create *NotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NotificationUpsertBulk) UpdateNewValues() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notification.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationUpsertBulk) Ignore() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertBulk) DoNothing() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationUpsertBulk) Update(set func(*NotificationUpsert)) *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertBulk) SetUpdatedAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateUpdatedAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *NotificationUpsertBulk) SetType(v notification.Type) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateType() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertBulk) SetTitle(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateTitle() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetText sets the "text" field.
func (u *NotificationUpsertBulk) SetText(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateText() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateText()
	})
}

// SetLink sets the "link" field.
func (u *NotificationUpsertBulk) SetLink(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateLink() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsertBulk) ClearLink() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearLink()
	})
}

// SetRead sets the "read" field.
func (u *NotificationUpsertBulk) SetRead(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetRead(v)
	})
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateRead() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateRead()
	})
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsertBulk) SetReadAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateReadAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsertBulk) ClearReadAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadAt()
	})
}

// SetProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertBulk) SetProfileIDWhoCausedNotification(v int) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetProfileIDWhoCausedNotification(v)
	})
}

// AddProfileIDWhoCausedNotification adds v to the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertBulk) AddProfileIDWhoCausedNotification(v int) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.AddProfileIDWhoCausedNotification(v)
	})
}

// UpdateProfileIDWhoCausedNotification sets the "profile_id_who_caused_notification" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateProfileIDWhoCausedNotification() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateProfileIDWhoCausedNotification()
	})
}

// ClearProfileIDWhoCausedNotification clears the value of the "profile_id_who_caused_notification" field.
func (u *NotificationUpsertBulk) ClearProfileIDWhoCausedNotification() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearProfileIDWhoCausedNotification()
	})
}

// SetResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertBulk) SetResourceIDTiedToNotif(v int) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceIDTiedToNotif(v)
	})
}

// AddResourceIDTiedToNotif adds v to the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertBulk) AddResourceIDTiedToNotif(v int) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.AddResourceIDTiedToNotif(v)
	})
}

// UpdateResourceIDTiedToNotif sets the "resource_id_tied_to_notif" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateResourceIDTiedToNotif() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceIDTiedToNotif()
	})
}

// ClearResourceIDTiedToNotif clears the value of the "resource_id_tied_to_notif" field.
func (u *NotificationUpsertBulk) ClearResourceIDTiedToNotif() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceIDTiedToNotif()
	})
}

// SetReadInNotificationsCenter sets the "read_in_notifications_center" field.
func (u *NotificationUpsertBulk) SetReadInNotificationsCenter(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadInNotificationsCenter(v)
	})
}

// UpdateReadInNotificationsCenter sets the "read_in_notifications_center" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateReadInNotificationsCenter() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadInNotificationsCenter()
	})
}

// ClearReadInNotificationsCenter clears the value of the "read_in_notifications_center" field.
func (u *NotificationUpsertBulk) ClearReadInNotificationsCenter() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadInNotificationsCenter()
	})
}

// Exec executes the query.
func (u *NotificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
