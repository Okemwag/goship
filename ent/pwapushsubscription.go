// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/profile"
	"github.com/mikestefanello/pagoda/ent/pwapushsubscription"
)

// PwaPushSubscription is the model entity for the PwaPushSubscription schema.
type PwaPushSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// P256dh holds the value of the "p256dh" field.
	P256dh string `json:"p256dh,omitempty"`
	// Auth holds the value of the "auth" field.
	Auth string `json:"auth,omitempty"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID int `json:"profile_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PwaPushSubscriptionQuery when eager-loading is set.
	Edges        PwaPushSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PwaPushSubscriptionEdges holds the relations/edges for other nodes in the graph.
type PwaPushSubscriptionEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PwaPushSubscriptionEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PwaPushSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pwapushsubscription.FieldID, pwapushsubscription.FieldProfileID:
			values[i] = new(sql.NullInt64)
		case pwapushsubscription.FieldEndpoint, pwapushsubscription.FieldP256dh, pwapushsubscription.FieldAuth:
			values[i] = new(sql.NullString)
		case pwapushsubscription.FieldCreatedAt, pwapushsubscription.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PwaPushSubscription fields.
func (pps *PwaPushSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pwapushsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pps.ID = int(value.Int64)
		case pwapushsubscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pps.CreatedAt = value.Time
			}
		case pwapushsubscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pps.UpdatedAt = value.Time
			}
		case pwapushsubscription.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				pps.Endpoint = value.String
			}
		case pwapushsubscription.FieldP256dh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field p256dh", values[i])
			} else if value.Valid {
				pps.P256dh = value.String
			}
		case pwapushsubscription.FieldAuth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth", values[i])
			} else if value.Valid {
				pps.Auth = value.String
			}
		case pwapushsubscription.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				pps.ProfileID = int(value.Int64)
			}
		default:
			pps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PwaPushSubscription.
// This includes values selected through modifiers, order, etc.
func (pps *PwaPushSubscription) Value(name string) (ent.Value, error) {
	return pps.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the PwaPushSubscription entity.
func (pps *PwaPushSubscription) QueryProfile() *ProfileQuery {
	return NewPwaPushSubscriptionClient(pps.config).QueryProfile(pps)
}

// Update returns a builder for updating this PwaPushSubscription.
// Note that you need to call PwaPushSubscription.Unwrap() before calling this method if this PwaPushSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (pps *PwaPushSubscription) Update() *PwaPushSubscriptionUpdateOne {
	return NewPwaPushSubscriptionClient(pps.config).UpdateOne(pps)
}

// Unwrap unwraps the PwaPushSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pps *PwaPushSubscription) Unwrap() *PwaPushSubscription {
	_tx, ok := pps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PwaPushSubscription is not a transactional entity")
	}
	pps.config.driver = _tx.drv
	return pps
}

// String implements the fmt.Stringer.
func (pps *PwaPushSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("PwaPushSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(pps.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("p256dh=")
	builder.WriteString(pps.P256dh)
	builder.WriteString(", ")
	builder.WriteString("auth=")
	builder.WriteString(pps.Auth)
	builder.WriteString(", ")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", pps.ProfileID))
	builder.WriteByte(')')
	return builder.String()
}

// PwaPushSubscriptions is a parsable slice of PwaPushSubscription.
type PwaPushSubscriptions []*PwaPushSubscription
