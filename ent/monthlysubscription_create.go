// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/monthlysubscription"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// MonthlySubscriptionCreate is the builder for creating a MonthlySubscription entity.
type MonthlySubscriptionCreate struct {
	config
	mutation *MonthlySubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (msc *MonthlySubscriptionCreate) SetCreatedAt(t time.Time) *MonthlySubscriptionCreate {
	msc.mutation.SetCreatedAt(t)
	return msc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableCreatedAt(t *time.Time) *MonthlySubscriptionCreate {
	if t != nil {
		msc.SetCreatedAt(*t)
	}
	return msc
}

// SetUpdatedAt sets the "updated_at" field.
func (msc *MonthlySubscriptionCreate) SetUpdatedAt(t time.Time) *MonthlySubscriptionCreate {
	msc.mutation.SetUpdatedAt(t)
	return msc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableUpdatedAt(t *time.Time) *MonthlySubscriptionCreate {
	if t != nil {
		msc.SetUpdatedAt(*t)
	}
	return msc
}

// SetProduct sets the "product" field.
func (msc *MonthlySubscriptionCreate) SetProduct(m monthlysubscription.Product) *MonthlySubscriptionCreate {
	msc.mutation.SetProduct(m)
	return msc
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableProduct(m *monthlysubscription.Product) *MonthlySubscriptionCreate {
	if m != nil {
		msc.SetProduct(*m)
	}
	return msc
}

// SetIsActive sets the "is_active" field.
func (msc *MonthlySubscriptionCreate) SetIsActive(b bool) *MonthlySubscriptionCreate {
	msc.mutation.SetIsActive(b)
	return msc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableIsActive(b *bool) *MonthlySubscriptionCreate {
	if b != nil {
		msc.SetIsActive(*b)
	}
	return msc
}

// SetPaid sets the "paid" field.
func (msc *MonthlySubscriptionCreate) SetPaid(b bool) *MonthlySubscriptionCreate {
	msc.mutation.SetPaid(b)
	return msc
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillablePaid(b *bool) *MonthlySubscriptionCreate {
	if b != nil {
		msc.SetPaid(*b)
	}
	return msc
}

// SetIsTrial sets the "is_trial" field.
func (msc *MonthlySubscriptionCreate) SetIsTrial(b bool) *MonthlySubscriptionCreate {
	msc.mutation.SetIsTrial(b)
	return msc
}

// SetNillableIsTrial sets the "is_trial" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableIsTrial(b *bool) *MonthlySubscriptionCreate {
	if b != nil {
		msc.SetIsTrial(*b)
	}
	return msc
}

// SetStartedAt sets the "started_at" field.
func (msc *MonthlySubscriptionCreate) SetStartedAt(t time.Time) *MonthlySubscriptionCreate {
	msc.mutation.SetStartedAt(t)
	return msc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableStartedAt(t *time.Time) *MonthlySubscriptionCreate {
	if t != nil {
		msc.SetStartedAt(*t)
	}
	return msc
}

// SetExpiredOn sets the "expired_on" field.
func (msc *MonthlySubscriptionCreate) SetExpiredOn(t time.Time) *MonthlySubscriptionCreate {
	msc.mutation.SetExpiredOn(t)
	return msc
}

// SetNillableExpiredOn sets the "expired_on" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableExpiredOn(t *time.Time) *MonthlySubscriptionCreate {
	if t != nil {
		msc.SetExpiredOn(*t)
	}
	return msc
}

// SetCancelledAt sets the "cancelled_at" field.
func (msc *MonthlySubscriptionCreate) SetCancelledAt(t time.Time) *MonthlySubscriptionCreate {
	msc.mutation.SetCancelledAt(t)
	return msc
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (msc *MonthlySubscriptionCreate) SetNillableCancelledAt(t *time.Time) *MonthlySubscriptionCreate {
	if t != nil {
		msc.SetCancelledAt(*t)
	}
	return msc
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (msc *MonthlySubscriptionCreate) SetPayingProfileID(i int) *MonthlySubscriptionCreate {
	msc.mutation.SetPayingProfileID(i)
	return msc
}

// AddBenefactorIDs adds the "benefactors" edge to the Profile entity by IDs.
func (msc *MonthlySubscriptionCreate) AddBenefactorIDs(ids ...int) *MonthlySubscriptionCreate {
	msc.mutation.AddBenefactorIDs(ids...)
	return msc
}

// AddBenefactors adds the "benefactors" edges to the Profile entity.
func (msc *MonthlySubscriptionCreate) AddBenefactors(p ...*Profile) *MonthlySubscriptionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return msc.AddBenefactorIDs(ids...)
}

// SetPayerID sets the "payer" edge to the Profile entity by ID.
func (msc *MonthlySubscriptionCreate) SetPayerID(id int) *MonthlySubscriptionCreate {
	msc.mutation.SetPayerID(id)
	return msc
}

// SetPayer sets the "payer" edge to the Profile entity.
func (msc *MonthlySubscriptionCreate) SetPayer(p *Profile) *MonthlySubscriptionCreate {
	return msc.SetPayerID(p.ID)
}

// Mutation returns the MonthlySubscriptionMutation object of the builder.
func (msc *MonthlySubscriptionCreate) Mutation() *MonthlySubscriptionMutation {
	return msc.mutation
}

// Save creates the MonthlySubscription in the database.
func (msc *MonthlySubscriptionCreate) Save(ctx context.Context) (*MonthlySubscription, error) {
	msc.defaults()
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MonthlySubscriptionCreate) SaveX(ctx context.Context) *MonthlySubscription {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MonthlySubscriptionCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MonthlySubscriptionCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MonthlySubscriptionCreate) defaults() {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		v := monthlysubscription.DefaultCreatedAt()
		msc.mutation.SetCreatedAt(v)
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		v := monthlysubscription.DefaultUpdatedAt()
		msc.mutation.SetUpdatedAt(v)
	}
	if _, ok := msc.mutation.Product(); !ok {
		v := monthlysubscription.DefaultProduct
		msc.mutation.SetProduct(v)
	}
	if _, ok := msc.mutation.IsActive(); !ok {
		v := monthlysubscription.DefaultIsActive
		msc.mutation.SetIsActive(v)
	}
	if _, ok := msc.mutation.Paid(); !ok {
		v := monthlysubscription.DefaultPaid
		msc.mutation.SetPaid(v)
	}
	if _, ok := msc.mutation.IsTrial(); !ok {
		v := monthlysubscription.DefaultIsTrial
		msc.mutation.SetIsTrial(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MonthlySubscriptionCreate) check() error {
	if _, ok := msc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MonthlySubscription.created_at"`)}
	}
	if _, ok := msc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MonthlySubscription.updated_at"`)}
	}
	if _, ok := msc.mutation.Product(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required field "MonthlySubscription.product"`)}
	}
	if v, ok := msc.mutation.Product(); ok {
		if err := monthlysubscription.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "MonthlySubscription.product": %w`, err)}
		}
	}
	if _, ok := msc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "MonthlySubscription.is_active"`)}
	}
	if _, ok := msc.mutation.Paid(); !ok {
		return &ValidationError{Name: "paid", err: errors.New(`ent: missing required field "MonthlySubscription.paid"`)}
	}
	if _, ok := msc.mutation.IsTrial(); !ok {
		return &ValidationError{Name: "is_trial", err: errors.New(`ent: missing required field "MonthlySubscription.is_trial"`)}
	}
	if _, ok := msc.mutation.PayingProfileID(); !ok {
		return &ValidationError{Name: "paying_profile_id", err: errors.New(`ent: missing required field "MonthlySubscription.paying_profile_id"`)}
	}
	if len(msc.mutation.PayerIDs()) == 0 {
		return &ValidationError{Name: "payer", err: errors.New(`ent: missing required edge "MonthlySubscription.payer"`)}
	}
	return nil
}

func (msc *MonthlySubscriptionCreate) sqlSave(ctx context.Context) (*MonthlySubscription, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MonthlySubscriptionCreate) createSpec() (*MonthlySubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &MonthlySubscription{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(monthlysubscription.Table, sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt))
	)
	_spec.OnConflict = msc.conflict
	if value, ok := msc.mutation.CreatedAt(); ok {
		_spec.SetField(monthlysubscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := msc.mutation.UpdatedAt(); ok {
		_spec.SetField(monthlysubscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := msc.mutation.Product(); ok {
		_spec.SetField(monthlysubscription.FieldProduct, field.TypeEnum, value)
		_node.Product = value
	}
	if value, ok := msc.mutation.IsActive(); ok {
		_spec.SetField(monthlysubscription.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := msc.mutation.Paid(); ok {
		_spec.SetField(monthlysubscription.FieldPaid, field.TypeBool, value)
		_node.Paid = value
	}
	if value, ok := msc.mutation.IsTrial(); ok {
		_spec.SetField(monthlysubscription.FieldIsTrial, field.TypeBool, value)
		_node.IsTrial = value
	}
	if value, ok := msc.mutation.StartedAt(); ok {
		_spec.SetField(monthlysubscription.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := msc.mutation.ExpiredOn(); ok {
		_spec.SetField(monthlysubscription.FieldExpiredOn, field.TypeTime, value)
		_node.ExpiredOn = &value
	}
	if value, ok := msc.mutation.CancelledAt(); ok {
		_spec.SetField(monthlysubscription.FieldCancelledAt, field.TypeTime, value)
		_node.CancelledAt = &value
	}
	if nodes := msc.mutation.BenefactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := msc.mutation.PayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   monthlysubscription.PayerTable,
			Columns: []string{monthlysubscription.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PayingProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MonthlySubscription.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MonthlySubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (msc *MonthlySubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *MonthlySubscriptionUpsertOne {
	msc.conflict = opts
	return &MonthlySubscriptionUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *MonthlySubscriptionCreate) OnConflictColumns(columns ...string) *MonthlySubscriptionUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &MonthlySubscriptionUpsertOne{
		create: msc,
	}
}

type (
	// MonthlySubscriptionUpsertOne is the builder for "upsert"-ing
	//  one MonthlySubscription node.
	MonthlySubscriptionUpsertOne struct {
		create *MonthlySubscriptionCreate
	}

	// MonthlySubscriptionUpsert is the "OnConflict" setter.
	MonthlySubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MonthlySubscriptionUpsert) SetUpdatedAt(v time.Time) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateUpdatedAt() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldUpdatedAt)
	return u
}

// SetProduct sets the "product" field.
func (u *MonthlySubscriptionUpsert) SetProduct(v monthlysubscription.Product) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldProduct, v)
	return u
}

// UpdateProduct sets the "product" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateProduct() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldProduct)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *MonthlySubscriptionUpsert) SetIsActive(v bool) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateIsActive() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldIsActive)
	return u
}

// SetPaid sets the "paid" field.
func (u *MonthlySubscriptionUpsert) SetPaid(v bool) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldPaid, v)
	return u
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdatePaid() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldPaid)
	return u
}

// SetIsTrial sets the "is_trial" field.
func (u *MonthlySubscriptionUpsert) SetIsTrial(v bool) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldIsTrial, v)
	return u
}

// UpdateIsTrial sets the "is_trial" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateIsTrial() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldIsTrial)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *MonthlySubscriptionUpsert) SetStartedAt(v time.Time) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateStartedAt() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MonthlySubscriptionUpsert) ClearStartedAt() *MonthlySubscriptionUpsert {
	u.SetNull(monthlysubscription.FieldStartedAt)
	return u
}

// SetExpiredOn sets the "expired_on" field.
func (u *MonthlySubscriptionUpsert) SetExpiredOn(v time.Time) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldExpiredOn, v)
	return u
}

// UpdateExpiredOn sets the "expired_on" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateExpiredOn() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldExpiredOn)
	return u
}

// ClearExpiredOn clears the value of the "expired_on" field.
func (u *MonthlySubscriptionUpsert) ClearExpiredOn() *MonthlySubscriptionUpsert {
	u.SetNull(monthlysubscription.FieldExpiredOn)
	return u
}

// SetCancelledAt sets the "cancelled_at" field.
func (u *MonthlySubscriptionUpsert) SetCancelledAt(v time.Time) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldCancelledAt, v)
	return u
}

// UpdateCancelledAt sets the "cancelled_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdateCancelledAt() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldCancelledAt)
	return u
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (u *MonthlySubscriptionUpsert) ClearCancelledAt() *MonthlySubscriptionUpsert {
	u.SetNull(monthlysubscription.FieldCancelledAt)
	return u
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (u *MonthlySubscriptionUpsert) SetPayingProfileID(v int) *MonthlySubscriptionUpsert {
	u.Set(monthlysubscription.FieldPayingProfileID, v)
	return u
}

// UpdatePayingProfileID sets the "paying_profile_id" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsert) UpdatePayingProfileID() *MonthlySubscriptionUpsert {
	u.SetExcluded(monthlysubscription.FieldPayingProfileID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MonthlySubscriptionUpsertOne) UpdateNewValues() *MonthlySubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(monthlysubscription.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MonthlySubscriptionUpsertOne) Ignore() *MonthlySubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MonthlySubscriptionUpsertOne) DoNothing() *MonthlySubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MonthlySubscriptionCreate.OnConflict
// documentation for more info.
func (u *MonthlySubscriptionUpsertOne) Update(set func(*MonthlySubscriptionUpsert)) *MonthlySubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MonthlySubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MonthlySubscriptionUpsertOne) SetUpdatedAt(v time.Time) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateUpdatedAt() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProduct sets the "product" field.
func (u *MonthlySubscriptionUpsertOne) SetProduct(v monthlysubscription.Product) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetProduct(v)
	})
}

// UpdateProduct sets the "product" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateProduct() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateProduct()
	})
}

// SetIsActive sets the "is_active" field.
func (u *MonthlySubscriptionUpsertOne) SetIsActive(v bool) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateIsActive() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateIsActive()
	})
}

// SetPaid sets the "paid" field.
func (u *MonthlySubscriptionUpsertOne) SetPaid(v bool) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetPaid(v)
	})
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdatePaid() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdatePaid()
	})
}

// SetIsTrial sets the "is_trial" field.
func (u *MonthlySubscriptionUpsertOne) SetIsTrial(v bool) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetIsTrial(v)
	})
}

// UpdateIsTrial sets the "is_trial" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateIsTrial() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateIsTrial()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MonthlySubscriptionUpsertOne) SetStartedAt(v time.Time) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateStartedAt() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MonthlySubscriptionUpsertOne) ClearStartedAt() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearStartedAt()
	})
}

// SetExpiredOn sets the "expired_on" field.
func (u *MonthlySubscriptionUpsertOne) SetExpiredOn(v time.Time) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetExpiredOn(v)
	})
}

// UpdateExpiredOn sets the "expired_on" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateExpiredOn() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateExpiredOn()
	})
}

// ClearExpiredOn clears the value of the "expired_on" field.
func (u *MonthlySubscriptionUpsertOne) ClearExpiredOn() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearExpiredOn()
	})
}

// SetCancelledAt sets the "cancelled_at" field.
func (u *MonthlySubscriptionUpsertOne) SetCancelledAt(v time.Time) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetCancelledAt(v)
	})
}

// UpdateCancelledAt sets the "cancelled_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdateCancelledAt() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateCancelledAt()
	})
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (u *MonthlySubscriptionUpsertOne) ClearCancelledAt() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearCancelledAt()
	})
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (u *MonthlySubscriptionUpsertOne) SetPayingProfileID(v int) *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetPayingProfileID(v)
	})
}

// UpdatePayingProfileID sets the "paying_profile_id" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertOne) UpdatePayingProfileID() *MonthlySubscriptionUpsertOne {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdatePayingProfileID()
	})
}

// Exec executes the query.
func (u *MonthlySubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MonthlySubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MonthlySubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MonthlySubscriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MonthlySubscriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MonthlySubscriptionCreateBulk is the builder for creating many MonthlySubscription entities in bulk.
type MonthlySubscriptionCreateBulk struct {
	config
	err      error
	builders []*MonthlySubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the MonthlySubscription entities in the database.
func (mscb *MonthlySubscriptionCreateBulk) Save(ctx context.Context) ([]*MonthlySubscription, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MonthlySubscription, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MonthlySubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MonthlySubscriptionCreateBulk) SaveX(ctx context.Context) []*MonthlySubscription {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MonthlySubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MonthlySubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MonthlySubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MonthlySubscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mscb *MonthlySubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MonthlySubscriptionUpsertBulk {
	mscb.conflict = opts
	return &MonthlySubscriptionUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *MonthlySubscriptionCreateBulk) OnConflictColumns(columns ...string) *MonthlySubscriptionUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &MonthlySubscriptionUpsertBulk{
		create: mscb,
	}
}

// MonthlySubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of MonthlySubscription nodes.
type MonthlySubscriptionUpsertBulk struct {
	create *MonthlySubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MonthlySubscriptionUpsertBulk) UpdateNewValues() *MonthlySubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(monthlysubscription.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MonthlySubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MonthlySubscriptionUpsertBulk) Ignore() *MonthlySubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MonthlySubscriptionUpsertBulk) DoNothing() *MonthlySubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MonthlySubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *MonthlySubscriptionUpsertBulk) Update(set func(*MonthlySubscriptionUpsert)) *MonthlySubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MonthlySubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MonthlySubscriptionUpsertBulk) SetUpdatedAt(v time.Time) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateUpdatedAt() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProduct sets the "product" field.
func (u *MonthlySubscriptionUpsertBulk) SetProduct(v monthlysubscription.Product) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetProduct(v)
	})
}

// UpdateProduct sets the "product" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateProduct() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateProduct()
	})
}

// SetIsActive sets the "is_active" field.
func (u *MonthlySubscriptionUpsertBulk) SetIsActive(v bool) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateIsActive() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateIsActive()
	})
}

// SetPaid sets the "paid" field.
func (u *MonthlySubscriptionUpsertBulk) SetPaid(v bool) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetPaid(v)
	})
}

// UpdatePaid sets the "paid" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdatePaid() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdatePaid()
	})
}

// SetIsTrial sets the "is_trial" field.
func (u *MonthlySubscriptionUpsertBulk) SetIsTrial(v bool) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetIsTrial(v)
	})
}

// UpdateIsTrial sets the "is_trial" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateIsTrial() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateIsTrial()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *MonthlySubscriptionUpsertBulk) SetStartedAt(v time.Time) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateStartedAt() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *MonthlySubscriptionUpsertBulk) ClearStartedAt() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearStartedAt()
	})
}

// SetExpiredOn sets the "expired_on" field.
func (u *MonthlySubscriptionUpsertBulk) SetExpiredOn(v time.Time) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetExpiredOn(v)
	})
}

// UpdateExpiredOn sets the "expired_on" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateExpiredOn() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateExpiredOn()
	})
}

// ClearExpiredOn clears the value of the "expired_on" field.
func (u *MonthlySubscriptionUpsertBulk) ClearExpiredOn() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearExpiredOn()
	})
}

// SetCancelledAt sets the "cancelled_at" field.
func (u *MonthlySubscriptionUpsertBulk) SetCancelledAt(v time.Time) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetCancelledAt(v)
	})
}

// UpdateCancelledAt sets the "cancelled_at" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdateCancelledAt() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdateCancelledAt()
	})
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (u *MonthlySubscriptionUpsertBulk) ClearCancelledAt() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.ClearCancelledAt()
	})
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (u *MonthlySubscriptionUpsertBulk) SetPayingProfileID(v int) *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.SetPayingProfileID(v)
	})
}

// UpdatePayingProfileID sets the "paying_profile_id" field to the value that was provided on create.
func (u *MonthlySubscriptionUpsertBulk) UpdatePayingProfileID() *MonthlySubscriptionUpsertBulk {
	return u.Update(func(s *MonthlySubscriptionUpsert) {
		s.UpdatePayingProfileID()
	})
}

// Exec executes the query.
func (u *MonthlySubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MonthlySubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MonthlySubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MonthlySubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
