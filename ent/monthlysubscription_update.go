// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/monthlysubscription"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// MonthlySubscriptionUpdate is the builder for updating MonthlySubscription entities.
type MonthlySubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *MonthlySubscriptionMutation
}

// Where appends a list predicates to the MonthlySubscriptionUpdate builder.
func (msu *MonthlySubscriptionUpdate) Where(ps ...predicate.MonthlySubscription) *MonthlySubscriptionUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetUpdatedAt sets the "updated_at" field.
func (msu *MonthlySubscriptionUpdate) SetUpdatedAt(t time.Time) *MonthlySubscriptionUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// SetProduct sets the "product" field.
func (msu *MonthlySubscriptionUpdate) SetProduct(m monthlysubscription.Product) *MonthlySubscriptionUpdate {
	msu.mutation.SetProduct(m)
	return msu
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableProduct(m *monthlysubscription.Product) *MonthlySubscriptionUpdate {
	if m != nil {
		msu.SetProduct(*m)
	}
	return msu
}

// SetIsActive sets the "is_active" field.
func (msu *MonthlySubscriptionUpdate) SetIsActive(b bool) *MonthlySubscriptionUpdate {
	msu.mutation.SetIsActive(b)
	return msu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableIsActive(b *bool) *MonthlySubscriptionUpdate {
	if b != nil {
		msu.SetIsActive(*b)
	}
	return msu
}

// SetPaid sets the "paid" field.
func (msu *MonthlySubscriptionUpdate) SetPaid(b bool) *MonthlySubscriptionUpdate {
	msu.mutation.SetPaid(b)
	return msu
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillablePaid(b *bool) *MonthlySubscriptionUpdate {
	if b != nil {
		msu.SetPaid(*b)
	}
	return msu
}

// SetIsTrial sets the "is_trial" field.
func (msu *MonthlySubscriptionUpdate) SetIsTrial(b bool) *MonthlySubscriptionUpdate {
	msu.mutation.SetIsTrial(b)
	return msu
}

// SetNillableIsTrial sets the "is_trial" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableIsTrial(b *bool) *MonthlySubscriptionUpdate {
	if b != nil {
		msu.SetIsTrial(*b)
	}
	return msu
}

// SetStartedAt sets the "started_at" field.
func (msu *MonthlySubscriptionUpdate) SetStartedAt(t time.Time) *MonthlySubscriptionUpdate {
	msu.mutation.SetStartedAt(t)
	return msu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableStartedAt(t *time.Time) *MonthlySubscriptionUpdate {
	if t != nil {
		msu.SetStartedAt(*t)
	}
	return msu
}

// ClearStartedAt clears the value of the "started_at" field.
func (msu *MonthlySubscriptionUpdate) ClearStartedAt() *MonthlySubscriptionUpdate {
	msu.mutation.ClearStartedAt()
	return msu
}

// SetExpiredOn sets the "expired_on" field.
func (msu *MonthlySubscriptionUpdate) SetExpiredOn(t time.Time) *MonthlySubscriptionUpdate {
	msu.mutation.SetExpiredOn(t)
	return msu
}

// SetNillableExpiredOn sets the "expired_on" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableExpiredOn(t *time.Time) *MonthlySubscriptionUpdate {
	if t != nil {
		msu.SetExpiredOn(*t)
	}
	return msu
}

// ClearExpiredOn clears the value of the "expired_on" field.
func (msu *MonthlySubscriptionUpdate) ClearExpiredOn() *MonthlySubscriptionUpdate {
	msu.mutation.ClearExpiredOn()
	return msu
}

// SetCancelledAt sets the "cancelled_at" field.
func (msu *MonthlySubscriptionUpdate) SetCancelledAt(t time.Time) *MonthlySubscriptionUpdate {
	msu.mutation.SetCancelledAt(t)
	return msu
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillableCancelledAt(t *time.Time) *MonthlySubscriptionUpdate {
	if t != nil {
		msu.SetCancelledAt(*t)
	}
	return msu
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (msu *MonthlySubscriptionUpdate) ClearCancelledAt() *MonthlySubscriptionUpdate {
	msu.mutation.ClearCancelledAt()
	return msu
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (msu *MonthlySubscriptionUpdate) SetPayingProfileID(i int) *MonthlySubscriptionUpdate {
	msu.mutation.SetPayingProfileID(i)
	return msu
}

// SetNillablePayingProfileID sets the "paying_profile_id" field if the given value is not nil.
func (msu *MonthlySubscriptionUpdate) SetNillablePayingProfileID(i *int) *MonthlySubscriptionUpdate {
	if i != nil {
		msu.SetPayingProfileID(*i)
	}
	return msu
}

// AddBenefactorIDs adds the "benefactors" edge to the Profile entity by IDs.
func (msu *MonthlySubscriptionUpdate) AddBenefactorIDs(ids ...int) *MonthlySubscriptionUpdate {
	msu.mutation.AddBenefactorIDs(ids...)
	return msu
}

// AddBenefactors adds the "benefactors" edges to the Profile entity.
func (msu *MonthlySubscriptionUpdate) AddBenefactors(p ...*Profile) *MonthlySubscriptionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return msu.AddBenefactorIDs(ids...)
}

// SetPayerID sets the "payer" edge to the Profile entity by ID.
func (msu *MonthlySubscriptionUpdate) SetPayerID(id int) *MonthlySubscriptionUpdate {
	msu.mutation.SetPayerID(id)
	return msu
}

// SetPayer sets the "payer" edge to the Profile entity.
func (msu *MonthlySubscriptionUpdate) SetPayer(p *Profile) *MonthlySubscriptionUpdate {
	return msu.SetPayerID(p.ID)
}

// Mutation returns the MonthlySubscriptionMutation object of the builder.
func (msu *MonthlySubscriptionUpdate) Mutation() *MonthlySubscriptionMutation {
	return msu.mutation
}

// ClearBenefactors clears all "benefactors" edges to the Profile entity.
func (msu *MonthlySubscriptionUpdate) ClearBenefactors() *MonthlySubscriptionUpdate {
	msu.mutation.ClearBenefactors()
	return msu
}

// RemoveBenefactorIDs removes the "benefactors" edge to Profile entities by IDs.
func (msu *MonthlySubscriptionUpdate) RemoveBenefactorIDs(ids ...int) *MonthlySubscriptionUpdate {
	msu.mutation.RemoveBenefactorIDs(ids...)
	return msu
}

// RemoveBenefactors removes "benefactors" edges to Profile entities.
func (msu *MonthlySubscriptionUpdate) RemoveBenefactors(p ...*Profile) *MonthlySubscriptionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return msu.RemoveBenefactorIDs(ids...)
}

// ClearPayer clears the "payer" edge to the Profile entity.
func (msu *MonthlySubscriptionUpdate) ClearPayer() *MonthlySubscriptionUpdate {
	msu.mutation.ClearPayer()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MonthlySubscriptionUpdate) Save(ctx context.Context) (int, error) {
	msu.defaults()
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MonthlySubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MonthlySubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MonthlySubscriptionUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msu *MonthlySubscriptionUpdate) defaults() {
	if _, ok := msu.mutation.UpdatedAt(); !ok {
		v := monthlysubscription.UpdateDefaultUpdatedAt()
		msu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MonthlySubscriptionUpdate) check() error {
	if v, ok := msu.mutation.Product(); ok {
		if err := monthlysubscription.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "MonthlySubscription.product": %w`, err)}
		}
	}
	if msu.mutation.PayerCleared() && len(msu.mutation.PayerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MonthlySubscription.payer"`)
	}
	return nil
}

func (msu *MonthlySubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(monthlysubscription.Table, monthlysubscription.Columns, sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.SetField(monthlysubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := msu.mutation.Product(); ok {
		_spec.SetField(monthlysubscription.FieldProduct, field.TypeEnum, value)
	}
	if value, ok := msu.mutation.IsActive(); ok {
		_spec.SetField(monthlysubscription.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := msu.mutation.Paid(); ok {
		_spec.SetField(monthlysubscription.FieldPaid, field.TypeBool, value)
	}
	if value, ok := msu.mutation.IsTrial(); ok {
		_spec.SetField(monthlysubscription.FieldIsTrial, field.TypeBool, value)
	}
	if value, ok := msu.mutation.StartedAt(); ok {
		_spec.SetField(monthlysubscription.FieldStartedAt, field.TypeTime, value)
	}
	if msu.mutation.StartedAtCleared() {
		_spec.ClearField(monthlysubscription.FieldStartedAt, field.TypeTime)
	}
	if value, ok := msu.mutation.ExpiredOn(); ok {
		_spec.SetField(monthlysubscription.FieldExpiredOn, field.TypeTime, value)
	}
	if msu.mutation.ExpiredOnCleared() {
		_spec.ClearField(monthlysubscription.FieldExpiredOn, field.TypeTime)
	}
	if value, ok := msu.mutation.CancelledAt(); ok {
		_spec.SetField(monthlysubscription.FieldCancelledAt, field.TypeTime, value)
	}
	if msu.mutation.CancelledAtCleared() {
		_spec.ClearField(monthlysubscription.FieldCancelledAt, field.TypeTime)
	}
	if msu.mutation.BenefactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.RemovedBenefactorsIDs(); len(nodes) > 0 && !msu.mutation.BenefactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.BenefactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if msu.mutation.PayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   monthlysubscription.PayerTable,
			Columns: []string{monthlysubscription.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.PayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   monthlysubscription.PayerTable,
			Columns: []string{monthlysubscription.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monthlysubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MonthlySubscriptionUpdateOne is the builder for updating a single MonthlySubscription entity.
type MonthlySubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MonthlySubscriptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (msuo *MonthlySubscriptionUpdateOne) SetUpdatedAt(t time.Time) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// SetProduct sets the "product" field.
func (msuo *MonthlySubscriptionUpdateOne) SetProduct(m monthlysubscription.Product) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetProduct(m)
	return msuo
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableProduct(m *monthlysubscription.Product) *MonthlySubscriptionUpdateOne {
	if m != nil {
		msuo.SetProduct(*m)
	}
	return msuo
}

// SetIsActive sets the "is_active" field.
func (msuo *MonthlySubscriptionUpdateOne) SetIsActive(b bool) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetIsActive(b)
	return msuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableIsActive(b *bool) *MonthlySubscriptionUpdateOne {
	if b != nil {
		msuo.SetIsActive(*b)
	}
	return msuo
}

// SetPaid sets the "paid" field.
func (msuo *MonthlySubscriptionUpdateOne) SetPaid(b bool) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetPaid(b)
	return msuo
}

// SetNillablePaid sets the "paid" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillablePaid(b *bool) *MonthlySubscriptionUpdateOne {
	if b != nil {
		msuo.SetPaid(*b)
	}
	return msuo
}

// SetIsTrial sets the "is_trial" field.
func (msuo *MonthlySubscriptionUpdateOne) SetIsTrial(b bool) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetIsTrial(b)
	return msuo
}

// SetNillableIsTrial sets the "is_trial" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableIsTrial(b *bool) *MonthlySubscriptionUpdateOne {
	if b != nil {
		msuo.SetIsTrial(*b)
	}
	return msuo
}

// SetStartedAt sets the "started_at" field.
func (msuo *MonthlySubscriptionUpdateOne) SetStartedAt(t time.Time) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetStartedAt(t)
	return msuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableStartedAt(t *time.Time) *MonthlySubscriptionUpdateOne {
	if t != nil {
		msuo.SetStartedAt(*t)
	}
	return msuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (msuo *MonthlySubscriptionUpdateOne) ClearStartedAt() *MonthlySubscriptionUpdateOne {
	msuo.mutation.ClearStartedAt()
	return msuo
}

// SetExpiredOn sets the "expired_on" field.
func (msuo *MonthlySubscriptionUpdateOne) SetExpiredOn(t time.Time) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetExpiredOn(t)
	return msuo
}

// SetNillableExpiredOn sets the "expired_on" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableExpiredOn(t *time.Time) *MonthlySubscriptionUpdateOne {
	if t != nil {
		msuo.SetExpiredOn(*t)
	}
	return msuo
}

// ClearExpiredOn clears the value of the "expired_on" field.
func (msuo *MonthlySubscriptionUpdateOne) ClearExpiredOn() *MonthlySubscriptionUpdateOne {
	msuo.mutation.ClearExpiredOn()
	return msuo
}

// SetCancelledAt sets the "cancelled_at" field.
func (msuo *MonthlySubscriptionUpdateOne) SetCancelledAt(t time.Time) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetCancelledAt(t)
	return msuo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillableCancelledAt(t *time.Time) *MonthlySubscriptionUpdateOne {
	if t != nil {
		msuo.SetCancelledAt(*t)
	}
	return msuo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (msuo *MonthlySubscriptionUpdateOne) ClearCancelledAt() *MonthlySubscriptionUpdateOne {
	msuo.mutation.ClearCancelledAt()
	return msuo
}

// SetPayingProfileID sets the "paying_profile_id" field.
func (msuo *MonthlySubscriptionUpdateOne) SetPayingProfileID(i int) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetPayingProfileID(i)
	return msuo
}

// SetNillablePayingProfileID sets the "paying_profile_id" field if the given value is not nil.
func (msuo *MonthlySubscriptionUpdateOne) SetNillablePayingProfileID(i *int) *MonthlySubscriptionUpdateOne {
	if i != nil {
		msuo.SetPayingProfileID(*i)
	}
	return msuo
}

// AddBenefactorIDs adds the "benefactors" edge to the Profile entity by IDs.
func (msuo *MonthlySubscriptionUpdateOne) AddBenefactorIDs(ids ...int) *MonthlySubscriptionUpdateOne {
	msuo.mutation.AddBenefactorIDs(ids...)
	return msuo
}

// AddBenefactors adds the "benefactors" edges to the Profile entity.
func (msuo *MonthlySubscriptionUpdateOne) AddBenefactors(p ...*Profile) *MonthlySubscriptionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return msuo.AddBenefactorIDs(ids...)
}

// SetPayerID sets the "payer" edge to the Profile entity by ID.
func (msuo *MonthlySubscriptionUpdateOne) SetPayerID(id int) *MonthlySubscriptionUpdateOne {
	msuo.mutation.SetPayerID(id)
	return msuo
}

// SetPayer sets the "payer" edge to the Profile entity.
func (msuo *MonthlySubscriptionUpdateOne) SetPayer(p *Profile) *MonthlySubscriptionUpdateOne {
	return msuo.SetPayerID(p.ID)
}

// Mutation returns the MonthlySubscriptionMutation object of the builder.
func (msuo *MonthlySubscriptionUpdateOne) Mutation() *MonthlySubscriptionMutation {
	return msuo.mutation
}

// ClearBenefactors clears all "benefactors" edges to the Profile entity.
func (msuo *MonthlySubscriptionUpdateOne) ClearBenefactors() *MonthlySubscriptionUpdateOne {
	msuo.mutation.ClearBenefactors()
	return msuo
}

// RemoveBenefactorIDs removes the "benefactors" edge to Profile entities by IDs.
func (msuo *MonthlySubscriptionUpdateOne) RemoveBenefactorIDs(ids ...int) *MonthlySubscriptionUpdateOne {
	msuo.mutation.RemoveBenefactorIDs(ids...)
	return msuo
}

// RemoveBenefactors removes "benefactors" edges to Profile entities.
func (msuo *MonthlySubscriptionUpdateOne) RemoveBenefactors(p ...*Profile) *MonthlySubscriptionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return msuo.RemoveBenefactorIDs(ids...)
}

// ClearPayer clears the "payer" edge to the Profile entity.
func (msuo *MonthlySubscriptionUpdateOne) ClearPayer() *MonthlySubscriptionUpdateOne {
	msuo.mutation.ClearPayer()
	return msuo
}

// Where appends a list predicates to the MonthlySubscriptionUpdate builder.
func (msuo *MonthlySubscriptionUpdateOne) Where(ps ...predicate.MonthlySubscription) *MonthlySubscriptionUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MonthlySubscriptionUpdateOne) Select(field string, fields ...string) *MonthlySubscriptionUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MonthlySubscription entity.
func (msuo *MonthlySubscriptionUpdateOne) Save(ctx context.Context) (*MonthlySubscription, error) {
	msuo.defaults()
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MonthlySubscriptionUpdateOne) SaveX(ctx context.Context) *MonthlySubscription {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MonthlySubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MonthlySubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msuo *MonthlySubscriptionUpdateOne) defaults() {
	if _, ok := msuo.mutation.UpdatedAt(); !ok {
		v := monthlysubscription.UpdateDefaultUpdatedAt()
		msuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MonthlySubscriptionUpdateOne) check() error {
	if v, ok := msuo.mutation.Product(); ok {
		if err := monthlysubscription.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "MonthlySubscription.product": %w`, err)}
		}
	}
	if msuo.mutation.PayerCleared() && len(msuo.mutation.PayerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MonthlySubscription.payer"`)
	}
	return nil
}

func (msuo *MonthlySubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *MonthlySubscription, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(monthlysubscription.Table, monthlysubscription.Columns, sqlgraph.NewFieldSpec(monthlysubscription.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MonthlySubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, monthlysubscription.FieldID)
		for _, f := range fields {
			if !monthlysubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != monthlysubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.SetField(monthlysubscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := msuo.mutation.Product(); ok {
		_spec.SetField(monthlysubscription.FieldProduct, field.TypeEnum, value)
	}
	if value, ok := msuo.mutation.IsActive(); ok {
		_spec.SetField(monthlysubscription.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := msuo.mutation.Paid(); ok {
		_spec.SetField(monthlysubscription.FieldPaid, field.TypeBool, value)
	}
	if value, ok := msuo.mutation.IsTrial(); ok {
		_spec.SetField(monthlysubscription.FieldIsTrial, field.TypeBool, value)
	}
	if value, ok := msuo.mutation.StartedAt(); ok {
		_spec.SetField(monthlysubscription.FieldStartedAt, field.TypeTime, value)
	}
	if msuo.mutation.StartedAtCleared() {
		_spec.ClearField(monthlysubscription.FieldStartedAt, field.TypeTime)
	}
	if value, ok := msuo.mutation.ExpiredOn(); ok {
		_spec.SetField(monthlysubscription.FieldExpiredOn, field.TypeTime, value)
	}
	if msuo.mutation.ExpiredOnCleared() {
		_spec.ClearField(monthlysubscription.FieldExpiredOn, field.TypeTime)
	}
	if value, ok := msuo.mutation.CancelledAt(); ok {
		_spec.SetField(monthlysubscription.FieldCancelledAt, field.TypeTime, value)
	}
	if msuo.mutation.CancelledAtCleared() {
		_spec.ClearField(monthlysubscription.FieldCancelledAt, field.TypeTime)
	}
	if msuo.mutation.BenefactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.RemovedBenefactorsIDs(); len(nodes) > 0 && !msuo.mutation.BenefactorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.BenefactorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   monthlysubscription.BenefactorsTable,
			Columns: monthlysubscription.BenefactorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if msuo.mutation.PayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   monthlysubscription.PayerTable,
			Columns: []string{monthlysubscription.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.PayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   monthlysubscription.PayerTable,
			Columns: []string{monthlysubscription.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MonthlySubscription{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monthlysubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
