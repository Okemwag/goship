// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/emailsubscriptiontype"
)

// EmailSubscriptionType is the model entity for the EmailSubscriptionType schema.
type EmailSubscriptionType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name emailsubscriptiontype.Name `json:"name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailSubscriptionTypeQuery when eager-loading is set.
	Edges        EmailSubscriptionTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailSubscriptionTypeEdges holds the relations/edges for other nodes in the graph.
type EmailSubscriptionTypeEdges struct {
	// Subscriber subscribed to this subscription type.
	Subscriber []*EmailSubscription `json:"subscriber,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriberOrErr returns the Subscriber value or an error if the edge
// was not loaded in eager-loading.
func (e EmailSubscriptionTypeEdges) SubscriberOrErr() ([]*EmailSubscription, error) {
	if e.loadedTypes[0] {
		return e.Subscriber, nil
	}
	return nil, &NotLoadedError{edge: "subscriber"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailSubscriptionType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailsubscriptiontype.FieldActive:
			values[i] = new(sql.NullBool)
		case emailsubscriptiontype.FieldID:
			values[i] = new(sql.NullInt64)
		case emailsubscriptiontype.FieldName:
			values[i] = new(sql.NullString)
		case emailsubscriptiontype.FieldCreatedAt, emailsubscriptiontype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailSubscriptionType fields.
func (est *EmailSubscriptionType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailsubscriptiontype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			est.ID = int(value.Int64)
		case emailsubscriptiontype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				est.CreatedAt = value.Time
			}
		case emailsubscriptiontype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				est.UpdatedAt = value.Time
			}
		case emailsubscriptiontype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				est.Name = emailsubscriptiontype.Name(value.String)
			}
		case emailsubscriptiontype.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				est.Active = value.Bool
			}
		default:
			est.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailSubscriptionType.
// This includes values selected through modifiers, order, etc.
func (est *EmailSubscriptionType) Value(name string) (ent.Value, error) {
	return est.selectValues.Get(name)
}

// QuerySubscriber queries the "subscriber" edge of the EmailSubscriptionType entity.
func (est *EmailSubscriptionType) QuerySubscriber() *EmailSubscriptionQuery {
	return NewEmailSubscriptionTypeClient(est.config).QuerySubscriber(est)
}

// Update returns a builder for updating this EmailSubscriptionType.
// Note that you need to call EmailSubscriptionType.Unwrap() before calling this method if this EmailSubscriptionType
// was returned from a transaction, and the transaction was committed or rolled back.
func (est *EmailSubscriptionType) Update() *EmailSubscriptionTypeUpdateOne {
	return NewEmailSubscriptionTypeClient(est.config).UpdateOne(est)
}

// Unwrap unwraps the EmailSubscriptionType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (est *EmailSubscriptionType) Unwrap() *EmailSubscriptionType {
	_tx, ok := est.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailSubscriptionType is not a transactional entity")
	}
	est.config.driver = _tx.drv
	return est
}

// String implements the fmt.Stringer.
func (est *EmailSubscriptionType) String() string {
	var builder strings.Builder
	builder.WriteString("EmailSubscriptionType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", est.ID))
	builder.WriteString("created_at=")
	builder.WriteString(est.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(est.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", est.Name))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", est.Active))
	builder.WriteByte(')')
	return builder.String()
}

// EmailSubscriptionTypes is a parsable slice of EmailSubscriptionType.
type EmailSubscriptionTypes []*EmailSubscriptionType
