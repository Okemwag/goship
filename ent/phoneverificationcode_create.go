// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/phoneverificationcode"
	"github.com/mikestefanello/pagoda/ent/profile"
)

// PhoneVerificationCodeCreate is the builder for creating a PhoneVerificationCode entity.
type PhoneVerificationCodeCreate struct {
	config
	mutation *PhoneVerificationCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pvcc *PhoneVerificationCodeCreate) SetCreatedAt(t time.Time) *PhoneVerificationCodeCreate {
	pvcc.mutation.SetCreatedAt(t)
	return pvcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvcc *PhoneVerificationCodeCreate) SetNillableCreatedAt(t *time.Time) *PhoneVerificationCodeCreate {
	if t != nil {
		pvcc.SetCreatedAt(*t)
	}
	return pvcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvcc *PhoneVerificationCodeCreate) SetUpdatedAt(t time.Time) *PhoneVerificationCodeCreate {
	pvcc.mutation.SetUpdatedAt(t)
	return pvcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvcc *PhoneVerificationCodeCreate) SetNillableUpdatedAt(t *time.Time) *PhoneVerificationCodeCreate {
	if t != nil {
		pvcc.SetUpdatedAt(*t)
	}
	return pvcc
}

// SetCode sets the "code" field.
func (pvcc *PhoneVerificationCodeCreate) SetCode(s string) *PhoneVerificationCodeCreate {
	pvcc.mutation.SetCode(s)
	return pvcc
}

// SetProfileID sets the "profile_id" field.
func (pvcc *PhoneVerificationCodeCreate) SetProfileID(i int) *PhoneVerificationCodeCreate {
	pvcc.mutation.SetProfileID(i)
	return pvcc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (pvcc *PhoneVerificationCodeCreate) SetProfile(p *Profile) *PhoneVerificationCodeCreate {
	return pvcc.SetProfileID(p.ID)
}

// Mutation returns the PhoneVerificationCodeMutation object of the builder.
func (pvcc *PhoneVerificationCodeCreate) Mutation() *PhoneVerificationCodeMutation {
	return pvcc.mutation
}

// Save creates the PhoneVerificationCode in the database.
func (pvcc *PhoneVerificationCodeCreate) Save(ctx context.Context) (*PhoneVerificationCode, error) {
	pvcc.defaults()
	return withHooks(ctx, pvcc.sqlSave, pvcc.mutation, pvcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvcc *PhoneVerificationCodeCreate) SaveX(ctx context.Context) *PhoneVerificationCode {
	v, err := pvcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcc *PhoneVerificationCodeCreate) Exec(ctx context.Context) error {
	_, err := pvcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcc *PhoneVerificationCodeCreate) ExecX(ctx context.Context) {
	if err := pvcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvcc *PhoneVerificationCodeCreate) defaults() {
	if _, ok := pvcc.mutation.CreatedAt(); !ok {
		v := phoneverificationcode.DefaultCreatedAt()
		pvcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvcc.mutation.UpdatedAt(); !ok {
		v := phoneverificationcode.DefaultUpdatedAt()
		pvcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvcc *PhoneVerificationCodeCreate) check() error {
	if _, ok := pvcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PhoneVerificationCode.created_at"`)}
	}
	if _, ok := pvcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PhoneVerificationCode.updated_at"`)}
	}
	if _, ok := pvcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "PhoneVerificationCode.code"`)}
	}
	if _, ok := pvcc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`ent: missing required field "PhoneVerificationCode.profile_id"`)}
	}
	if len(pvcc.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`ent: missing required edge "PhoneVerificationCode.profile"`)}
	}
	return nil
}

func (pvcc *PhoneVerificationCodeCreate) sqlSave(ctx context.Context) (*PhoneVerificationCode, error) {
	if err := pvcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pvcc.mutation.id = &_node.ID
	pvcc.mutation.done = true
	return _node, nil
}

func (pvcc *PhoneVerificationCodeCreate) createSpec() (*PhoneVerificationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &PhoneVerificationCode{config: pvcc.config}
		_spec = sqlgraph.NewCreateSpec(phoneverificationcode.Table, sqlgraph.NewFieldSpec(phoneverificationcode.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pvcc.conflict
	if value, ok := pvcc.mutation.CreatedAt(); ok {
		_spec.SetField(phoneverificationcode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvcc.mutation.UpdatedAt(); ok {
		_spec.SetField(phoneverificationcode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pvcc.mutation.Code(); ok {
		_spec.SetField(phoneverificationcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if nodes := pvcc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phoneverificationcode.ProfileTable,
			Columns: []string{phoneverificationcode.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhoneVerificationCode.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhoneVerificationCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pvcc *PhoneVerificationCodeCreate) OnConflict(opts ...sql.ConflictOption) *PhoneVerificationCodeUpsertOne {
	pvcc.conflict = opts
	return &PhoneVerificationCodeUpsertOne{
		create: pvcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvcc *PhoneVerificationCodeCreate) OnConflictColumns(columns ...string) *PhoneVerificationCodeUpsertOne {
	pvcc.conflict = append(pvcc.conflict, sql.ConflictColumns(columns...))
	return &PhoneVerificationCodeUpsertOne{
		create: pvcc,
	}
}

type (
	// PhoneVerificationCodeUpsertOne is the builder for "upsert"-ing
	//  one PhoneVerificationCode node.
	PhoneVerificationCodeUpsertOne struct {
		create *PhoneVerificationCodeCreate
	}

	// PhoneVerificationCodeUpsert is the "OnConflict" setter.
	PhoneVerificationCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PhoneVerificationCodeUpsert) SetUpdatedAt(v time.Time) *PhoneVerificationCodeUpsert {
	u.Set(phoneverificationcode.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsert) UpdateUpdatedAt() *PhoneVerificationCodeUpsert {
	u.SetExcluded(phoneverificationcode.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *PhoneVerificationCodeUpsert) SetCode(v string) *PhoneVerificationCodeUpsert {
	u.Set(phoneverificationcode.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsert) UpdateCode() *PhoneVerificationCodeUpsert {
	u.SetExcluded(phoneverificationcode.FieldCode)
	return u
}

// SetProfileID sets the "profile_id" field.
func (u *PhoneVerificationCodeUpsert) SetProfileID(v int) *PhoneVerificationCodeUpsert {
	u.Set(phoneverificationcode.FieldProfileID, v)
	return u
}

// UpdateProfileID sets the "profile_id" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsert) UpdateProfileID() *PhoneVerificationCodeUpsert {
	u.SetExcluded(phoneverificationcode.FieldProfileID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhoneVerificationCodeUpsertOne) UpdateNewValues() *PhoneVerificationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(phoneverificationcode.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PhoneVerificationCodeUpsertOne) Ignore() *PhoneVerificationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhoneVerificationCodeUpsertOne) DoNothing() *PhoneVerificationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhoneVerificationCodeCreate.OnConflict
// documentation for more info.
func (u *PhoneVerificationCodeUpsertOne) Update(set func(*PhoneVerificationCodeUpsert)) *PhoneVerificationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhoneVerificationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PhoneVerificationCodeUpsertOne) SetUpdatedAt(v time.Time) *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertOne) UpdateUpdatedAt() *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *PhoneVerificationCodeUpsertOne) SetCode(v string) *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertOne) UpdateCode() *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateCode()
	})
}

// SetProfileID sets the "profile_id" field.
func (u *PhoneVerificationCodeUpsertOne) SetProfileID(v int) *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetProfileID(v)
	})
}

// UpdateProfileID sets the "profile_id" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertOne) UpdateProfileID() *PhoneVerificationCodeUpsertOne {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateProfileID()
	})
}

// Exec executes the query.
func (u *PhoneVerificationCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PhoneVerificationCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhoneVerificationCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PhoneVerificationCodeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PhoneVerificationCodeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PhoneVerificationCodeCreateBulk is the builder for creating many PhoneVerificationCode entities in bulk.
type PhoneVerificationCodeCreateBulk struct {
	config
	err      error
	builders []*PhoneVerificationCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the PhoneVerificationCode entities in the database.
func (pvccb *PhoneVerificationCodeCreateBulk) Save(ctx context.Context) ([]*PhoneVerificationCode, error) {
	if pvccb.err != nil {
		return nil, pvccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvccb.builders))
	nodes := make([]*PhoneVerificationCode, len(pvccb.builders))
	mutators := make([]Mutator, len(pvccb.builders))
	for i := range pvccb.builders {
		func(i int, root context.Context) {
			builder := pvccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhoneVerificationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pvccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvccb *PhoneVerificationCodeCreateBulk) SaveX(ctx context.Context) []*PhoneVerificationCode {
	v, err := pvccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvccb *PhoneVerificationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := pvccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvccb *PhoneVerificationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := pvccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhoneVerificationCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhoneVerificationCodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pvccb *PhoneVerificationCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PhoneVerificationCodeUpsertBulk {
	pvccb.conflict = opts
	return &PhoneVerificationCodeUpsertBulk{
		create: pvccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvccb *PhoneVerificationCodeCreateBulk) OnConflictColumns(columns ...string) *PhoneVerificationCodeUpsertBulk {
	pvccb.conflict = append(pvccb.conflict, sql.ConflictColumns(columns...))
	return &PhoneVerificationCodeUpsertBulk{
		create: pvccb,
	}
}

// PhoneVerificationCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of PhoneVerificationCode nodes.
type PhoneVerificationCodeUpsertBulk struct {
	create *PhoneVerificationCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhoneVerificationCodeUpsertBulk) UpdateNewValues() *PhoneVerificationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(phoneverificationcode.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhoneVerificationCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PhoneVerificationCodeUpsertBulk) Ignore() *PhoneVerificationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhoneVerificationCodeUpsertBulk) DoNothing() *PhoneVerificationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhoneVerificationCodeCreateBulk.OnConflict
// documentation for more info.
func (u *PhoneVerificationCodeUpsertBulk) Update(set func(*PhoneVerificationCodeUpsert)) *PhoneVerificationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhoneVerificationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PhoneVerificationCodeUpsertBulk) SetUpdatedAt(v time.Time) *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertBulk) UpdateUpdatedAt() *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *PhoneVerificationCodeUpsertBulk) SetCode(v string) *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertBulk) UpdateCode() *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateCode()
	})
}

// SetProfileID sets the "profile_id" field.
func (u *PhoneVerificationCodeUpsertBulk) SetProfileID(v int) *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.SetProfileID(v)
	})
}

// UpdateProfileID sets the "profile_id" field to the value that was provided on create.
func (u *PhoneVerificationCodeUpsertBulk) UpdateProfileID() *PhoneVerificationCodeUpsertBulk {
	return u.Update(func(s *PhoneVerificationCodeUpsert) {
		s.UpdateProfileID()
	})
}

// Exec executes the query.
func (u *PhoneVerificationCodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PhoneVerificationCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PhoneVerificationCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhoneVerificationCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
