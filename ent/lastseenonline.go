// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/lastseenonline"
	"github.com/mikestefanello/pagoda/ent/user"
)

// LastSeenOnline is the model entity for the LastSeenOnline schema.
type LastSeenOnline struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SeenAt holds the value of the "seen_at" field.
	SeenAt time.Time `json:"seen_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LastSeenOnlineQuery when eager-loading is set.
	Edges             LastSeenOnlineEdges `json:"edges"`
	user_last_seen_at *int
	selectValues      sql.SelectValues
}

// LastSeenOnlineEdges holds the relations/edges for other nodes in the graph.
type LastSeenOnlineEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LastSeenOnlineEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LastSeenOnline) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lastseenonline.FieldID:
			values[i] = new(sql.NullInt64)
		case lastseenonline.FieldSeenAt:
			values[i] = new(sql.NullTime)
		case lastseenonline.ForeignKeys[0]: // user_last_seen_at
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LastSeenOnline fields.
func (lso *LastSeenOnline) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lastseenonline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lso.ID = int(value.Int64)
		case lastseenonline.FieldSeenAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field seen_at", values[i])
			} else if value.Valid {
				lso.SeenAt = value.Time
			}
		case lastseenonline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_last_seen_at", value)
			} else if value.Valid {
				lso.user_last_seen_at = new(int)
				*lso.user_last_seen_at = int(value.Int64)
			}
		default:
			lso.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LastSeenOnline.
// This includes values selected through modifiers, order, etc.
func (lso *LastSeenOnline) Value(name string) (ent.Value, error) {
	return lso.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LastSeenOnline entity.
func (lso *LastSeenOnline) QueryUser() *UserQuery {
	return NewLastSeenOnlineClient(lso.config).QueryUser(lso)
}

// Update returns a builder for updating this LastSeenOnline.
// Note that you need to call LastSeenOnline.Unwrap() before calling this method if this LastSeenOnline
// was returned from a transaction, and the transaction was committed or rolled back.
func (lso *LastSeenOnline) Update() *LastSeenOnlineUpdateOne {
	return NewLastSeenOnlineClient(lso.config).UpdateOne(lso)
}

// Unwrap unwraps the LastSeenOnline entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lso *LastSeenOnline) Unwrap() *LastSeenOnline {
	_tx, ok := lso.config.driver.(*txDriver)
	if !ok {
		panic("ent: LastSeenOnline is not a transactional entity")
	}
	lso.config.driver = _tx.drv
	return lso
}

// String implements the fmt.Stringer.
func (lso *LastSeenOnline) String() string {
	var builder strings.Builder
	builder.WriteString("LastSeenOnline(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lso.ID))
	builder.WriteString("seen_at=")
	builder.WriteString(lso.SeenAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LastSeenOnlines is a parsable slice of LastSeenOnline.
type LastSeenOnlines []*LastSeenOnline
