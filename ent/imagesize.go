// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/filestorage"
	"github.com/mikestefanello/pagoda/ent/image"
	"github.com/mikestefanello/pagoda/ent/imagesize"
)

// ImageSize is the model entity for the ImageSize schema.
type ImageSize struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The size of this image instance
	Size imagesize.Size `json:"size,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageSizeQuery when eager-loading is set.
	Edges           ImageSizeEdges `json:"edges"`
	image_sizes     *int
	image_size_file *int
	selectValues    sql.SelectValues
}

// ImageSizeEdges holds the relations/edges for other nodes in the graph.
type ImageSizeEdges struct {
	// File holds the value of the file edge.
	File *FileStorage `json:"file,omitempty"`
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageSizeEdges) FileOrErr() (*FileStorage, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: filestorage.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageSizeEdges) ImageOrErr() (*Image, error) {
	if e.Image != nil {
		return e.Image, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageSize) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagesize.FieldID, imagesize.FieldWidth, imagesize.FieldHeight:
			values[i] = new(sql.NullInt64)
		case imagesize.FieldSize:
			values[i] = new(sql.NullString)
		case imagesize.FieldCreatedAt, imagesize.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case imagesize.ForeignKeys[0]: // image_sizes
			values[i] = new(sql.NullInt64)
		case imagesize.ForeignKeys[1]: // image_size_file
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageSize fields.
func (is *ImageSize) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagesize.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			is.ID = int(value.Int64)
		case imagesize.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				is.CreatedAt = value.Time
			}
		case imagesize.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				is.UpdatedAt = value.Time
			}
		case imagesize.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				is.Size = imagesize.Size(value.String)
			}
		case imagesize.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				is.Width = int(value.Int64)
			}
		case imagesize.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				is.Height = int(value.Int64)
			}
		case imagesize.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field image_sizes", value)
			} else if value.Valid {
				is.image_sizes = new(int)
				*is.image_sizes = int(value.Int64)
			}
		case imagesize.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field image_size_file", value)
			} else if value.Valid {
				is.image_size_file = new(int)
				*is.image_size_file = int(value.Int64)
			}
		default:
			is.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageSize.
// This includes values selected through modifiers, order, etc.
func (is *ImageSize) Value(name string) (ent.Value, error) {
	return is.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the ImageSize entity.
func (is *ImageSize) QueryFile() *FileStorageQuery {
	return NewImageSizeClient(is.config).QueryFile(is)
}

// QueryImage queries the "image" edge of the ImageSize entity.
func (is *ImageSize) QueryImage() *ImageQuery {
	return NewImageSizeClient(is.config).QueryImage(is)
}

// Update returns a builder for updating this ImageSize.
// Note that you need to call ImageSize.Unwrap() before calling this method if this ImageSize
// was returned from a transaction, and the transaction was committed or rolled back.
func (is *ImageSize) Update() *ImageSizeUpdateOne {
	return NewImageSizeClient(is.config).UpdateOne(is)
}

// Unwrap unwraps the ImageSize entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (is *ImageSize) Unwrap() *ImageSize {
	_tx, ok := is.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageSize is not a transactional entity")
	}
	is.config.driver = _tx.drv
	return is
}

// String implements the fmt.Stringer.
func (is *ImageSize) String() string {
	var builder strings.Builder
	builder.WriteString("ImageSize(")
	builder.WriteString(fmt.Sprintf("id=%v, ", is.ID))
	builder.WriteString("created_at=")
	builder.WriteString(is.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(is.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", is.Size))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", is.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", is.Height))
	builder.WriteByte(')')
	return builder.String()
}

// ImageSizes is a parsable slice of ImageSize.
type ImageSizes []*ImageSize
