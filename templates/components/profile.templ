package components

import (
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/domain"
	"github.com/mikestefanello/pagoda/pkg/types"
)

templ Profile(page *controller.Page, profile domain.Profile, isSelf, isPotentialMatch bool, uploadGalleryPicUrl, uploadProfilePicUrl string, galleryPicsMaxCount int) {
	@ProfileHeader(page, &profile, isSelf, isPotentialMatch, false, uploadGalleryPicUrl, uploadProfilePicUrl, galleryPicsMaxCount)
	<div class="m-5">
		<p>{ profile.Bio }</p>
	</div>
	if len(profile.Photos) > 0 {
		<!-- Slider main container -->
		<div class="swiper max-w-full mx-auto rounded-lg mb-5">
			<!-- Additional required wrapper -->
			<div class="swiper-wrapper">
				<!-- Slides -->
				for _, image := range profile.Photos {
					<div class="swiper-slide flex items-center justify-center">
						if isSelf {
							<svg
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 20 20"
								fill="currentColor"
								class="w-5 h-5 absolute m-1 top-1 right-1 z-10 shadow-2xl cursor-pointer"
								hx-delete={ page.ToURL("uploadPhoto.delete", image.ID) + "?csrf=" + page.CSRF }
								hx-target="#main-content"
								hx-select="#main-content"
								hx-indicator="next #page-loading"
								hx-swap="outerHTML show:window:top"
								hx-trigger="confirmed consume"
								_="on click
								call Swal.fire({title: 'Confirm', text:'Are you sure you want to delete this photo?'})
								if result.isConfirmed trigger confirmed"
							>
								<path
									fill-rule="evenodd"
									d="M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z"
									clip-rule="evenodd"
								></path>
							</svg>
						}
						<img
							class="w-full object-contain rounded-lg"
							src={ image.FullURL }
							alt={ image.Alt }
						/>
					</div>
				}
			</div>
			<div class="swiper-button-prev"></div>
			<div class="swiper-button-next"></div>
			<div class="swiper-scrollbar"></div>
			<div class="swiper-pagination"></div>
		</div>
		@initCarousel()
	} else {
		<div class="py-5 md:pt-8 lg:pt-15">
			if isSelf {
				@EmptyPageMessage("You haven't uploaded any images yet.", "flex flex-col justify-center items-center max-h-screen")
			} else {
				@EmptyPageMessage("This user hasn't uploaded any images yet.", "flex flex-col justify-center items-center max-h-screen")
			}
		</div>
	}
	<style>
	/* Needed otherwise the carousel breaks down at small screen sizes */
	@media (max-width: 650px) {
		.swiper .swiper-slide {
			width: 100% !important; /* Force width to 100% of its container */
		}
	}
	.swiper-pagination-bullet {
      width: 20px;
      height: 20px;
      text-align: center;
      line-height: 20px;
      font-size: 12px;
      color: #000;
      opacity: 1;
      background: rgba(0, 0, 0, 0.2);
    }

    .swiper-pagination-bullet-active {
      color: #fff;
      background: #007aff;
    }
	</style>
}

script initProfilePhotoUploaders(uploadProfilePicUrl, uploadGalleryPicUrl string, galleryPicsUploadEnabled bool) {
	renderSvelteComponent('PhotoUploader', "edit-profile-pic", {
		"postURL": uploadProfilePicUrl,
		"uploadEnabled": true,
		"isProfilePhotoCornerUploader": true,
		"stylingClassesUploadEnabled":  "",
		"stylingClassesUploadDisabled": "",
		"buttonText":"",

	});
}

script initGalleryPhotoUploaders(uploadProfilePicUrl, uploadGalleryPicUrl string, galleryPicsUploadEnabled bool) {
	renderSvelteComponent('PhotoUploader', "photo-uploader", {
		"postURL": uploadGalleryPicUrl,
		"uploadEnabled": galleryPicsUploadEnabled,
		"isProfilePhotoCornerUploader": false,
		"stylingClassesUploadEnabled":  "px-3 py-2 text-xs font-medium text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 rounded-full text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-colors duration-200",
		"stylingClassesUploadDisabled": "px-3 py-2 text-xs font-medium text-white bg-slate-700 hover:bg-slate-800 focus:outline-none focus:ring-4 focus:ring-slate-300 rounded-full text-center me-2 mb-2 dark:bg-slate-600 dark:hover:bg-slate-700 dark:focus:ring-slate-800 transition-colors duration-200 cursor-not-allowed",
		"buttonText": "Upload photo",
	});
}

script initCarousel() {
	const swiper = new Swiper('.swiper', {
		// mousewheel: true,
		slidesPerView: 1,
		spaceBetween: 0,
		breakpoints: {
			1: {
			slidesPerView: 1,
			spaceBetween: 0,
			},
			800: {
			slidesPerView: 2,
			spaceBetween: 20,
			},
		},

		// Navigation arrows
		navigation: {
			nextEl: '.swiper-button-next',
			prevEl: '.swiper-button-prev',
		},

		scrollbar: {
			el: ".swiper-scrollbar",
			hide: true,
		},
	});
}

templ ProfileHeader(page *controller.Page, profile *domain.Profile, isSelf, isPotentialMatch, isIndividualConvoView bool, uploadGalleryPicUrl, uploadProfilePicUrl string, galleryPicsMaxCount int) {
	<div class="flex flex-wrap items-start">
		<div class="flex flex-col items-center sm:flex-row sm:justify-between w-full">
			<div class="flex items-center">
				<!-- Avatar and edit profile image button -->
				<div class="relative m-5">
					<!-- Avatar -->
					<div class="avatar" id="avatar">
						<div
							class={ "w-28 h-28 rounded-full", templ.KV("cursor-pointer", isIndividualConvoView) }
							if isIndividualConvoView {
								hx-get={ page.ToURL("profile", profile.ID) }
								hx-target="#main-content"
								hx-select="#main-content"
								hx-indicator="next #page-loading"
								hx-swap="outerHTML show:window:top"
								hx-push-url="true"
							}
						>
							if profile.ProfileImage != nil && profile.ProfileImage.ThumbnailURL != "" {
								<img src={ profile.ProfileImage.ThumbnailURL } class="object-cover w-full h-full"/>
							} else {
								<img src="https://www.gravatar.com/avatar/?d=mp&s=200" class="object-cover w-full h-full"/>
							}
						</div>
						if isSelf {
							<!-- Edit profile image -->
							<div id="edit-profile-pic"></div>
							@initProfilePhotoUploaders(uploadProfilePicUrl, uploadGalleryPicUrl, len(profile.Photos) < galleryPicsMaxCount)
						}
					</div>
				</div>
				<!-- Name -->
				<div class="m-5">
					<h3
						class={ "font-bold text-2xl mb-2",
						templ.KV("hover:underline cursor-pointer", isIndividualConvoView) }
						if isIndividualConvoView {
							hx-get={ page.ToURL("profile", profile.ID) }
							hx-target="#main-content"
							hx-select="#main-content"
							hx-indicator="next #page-loading"
							hx-swap="outerHTML show:window:top"
							hx-push-url="true"
						}
					>{ profile.Name }</h3>
				</div>
			</div>
			if isSelf {
				<div
					class="p-3 flex flex-wrap sm:flex-row justify-center items-center text-sm sm:text-base"
				>
					if len(profile.Photos) >= galleryPicsMaxCount {
						<div x-data={ fmt.Sprintf("{ tooltip: 'Only %d gallery pictures allowed' }", galleryPicsMaxCount) }>
							<div x-tooltip="tooltip" class="my-2" id="photo-uploader"></div>
						</div>
					} else {
						<div class="my-2" id="photo-uploader"></div>
						@initGalleryPhotoUploaders(uploadProfilePicUrl, uploadGalleryPicUrl, len(profile.Photos) < galleryPicsMaxCount)
					}
					<a
						href={ templ.URL(page.ToURL("logout")) }
					>
						<button
							type="button"
							class="flex flex-row items-center px-3 py-2 text-xs font-medium text-white bg-blue-700 hover:bg-blue-800 
							focus:outline-none focus:ring-4 focus:ring-blue-300 
		        			rounded-full text-center me-2 mb-2  
							dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-colors duration-200"
						>
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
								<path fill-rule="evenodd" d="M3 4.25A2.25 2.25 0 0 1 5.25 2h5.5A2.25 2.25 0 0 1 13 4.25v2a.75.75 0 0 1-1.5 0v-2a.75.75 0 0 0-.75-.75h-5.5a.75.75 0 0 0-.75.75v11.5c0 .414.336.75.75.75h5.5a.75.75 0 0 0 .75-.75v-2a.75.75 0 0 1 1.5 0v2A2.25 2.25 0 0 1 10.75 18h-5.5A2.25 2.25 0 0 1 3 15.75V4.25Z" clip-rule="evenodd"></path>
								<path fill-rule="evenodd" d="M6 10a.75.75 0 0 1 .75-.75h9.546l-1.048-.943a.75.75 0 1 1 1.004-1.114l2.5 2.25a.75.75 0 0 1 0 1.114l-2.5 2.25a.75.75 0 1 1-1.004-1.114l1.048-.943H6.75A.75.75 0 0 1 6 10Z" clip-rule="evenodd"></path>
							</svg>
							<span class="ms-3">Log out</span>
						</button>
					</a>
				</div>
			}
		</div>
	</div>
}

templ showContactInfo(profile domain.Profile) {
	<div class="bg-secondary text-secondary-content rounded-lg m-2 p-2">
		<span class="mr-1">{ profile.CountryCode }</span>
		if profile.PhoneNumberInternational !=nil {
			{ *profile.PhoneNumberInternational }
		} else {
			{ profile.PhoneNumberE164 }
		}
	</div>
}

templ contactInfoRequested() {
	<button
		type="button"
		class={ "px-3 py-2 text-xs font-medium text-white rounded-full text-center me-2 mb-2 flex items-center", 
			"bg-blue-300 dark:bg-blue-400 cursor-not-allowed" }
		disabled
	>
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mr-1 md:mr-2">
			<path fill-rule="evenodd" d="M1 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V6Zm4 1.5a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2 3a4 4 0 0 0-3.665 2.395.75.75 0 0 0 .416 1A8.98 8.98 0 0 0 7 14.5a8.98 8.98 0 0 0 3.249-.604.75.75 0 0 0 .416-1.001A4.001 4.001 0 0 0 7 10.5Zm5-3.75a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm0 6.5a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm.75-4a.75.75 0 0 0 0 1.5h2.5a.75.75 0 0 0 0-1.5h-2.5Z" clip-rule="evenodd"></path>
		</svg>
		{ "Contact info requested" }
	</button>
}

templ requestContactInfo(page *controller.Page, profileID int) {
	<a
		hx-get={ page.ToURL("request_contact_info", profileID) }
		hx-target="this"
		hx-swap="outerHTML"
	>
		<button
			type="button"
			class="px-3 py-2 text-xs font-medium text-white rounded-full text-center me-2 mb-2 flex items-center bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-colors duration-200"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mr-1 md:mr-2">
				<path fill-rule="evenodd" d="M1 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V6Zm4 1.5a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2 3a4 4 0 0 0-3.665 2.395.75.75 0 0 0 .416 1A8.98 8.98 0 0 0 7 14.5a8.98 8.98 0 0 0 3.249-.604.75.75 0 0 0 .416-1.001A4.001 4.001 0 0 0 7 10.5Zm5-3.75a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm0 6.5a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm.75-4a.75.75 0 0 0 0 1.5h2.5a.75.75 0 0 0 0-1.5h-2.5Z" clip-rule="evenodd"></path>
			</svg>
			{ "Request contact info" }
		</button>
	</a>
}

templ grantContactInfoRequest(page *controller.Page, profileID int) {
	<a
		hx-get={ page.ToURL("grant_contact_info", profileID) }
		hx-target="#main-content"
		hx-select="#main-content"
		hx-indicator="next #page-loading"
		hx-swap="outerHTML show:window:top"
	>
		<button
			type="button"
			class="px-3 py-2 text-xs font-medium text-white rounded-full text-center me-2 mb-2 flex items-center bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-colors duration-200"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mr-1 md:mr-2">
				<path fill-rule="evenodd" d="M1 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V6Zm4 1.5a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2 3a4 4 0 0 0-3.665 2.395.75.75 0 0 0 .416 1A8.98 8.98 0 0 0 7 14.5a8.98 8.98 0 0 0 3.249-.604.75.75 0 0 0 .416-1.001A4.001 4.001 0 0 0 7 10.5Zm5-3.75a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm0 6.5a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Zm.75-4a.75.75 0 0 0 0 1.5h2.5a.75.75 0 0 0 0-1.5h-2.5Z" clip-rule="evenodd"></path>
			</svg>
			{ "Grant access to contact info" }
		</button>
	</a>
}

script InitPhoneNumberPicker(elementID, phoneE164, countryCode, saveEventName, formInputNameE164, formInputNameCountryCode string, disabled, readOnly bool) {
	renderSvelteComponent('PhoneNumberPicker', elementID, {
		"componentID": elementID,
		"value": phoneE164,
		"country": countryCode,
		"saveEventName": saveEventName,
		"formInputNameE164": formInputNameE164,
		"formInputNameCountryCode": formInputNameCountryCode,
		"disabled": disabled,
		"readonly": readOnly,
	});
}

templ Heatmap(page *controller.Page) {
	if data, ok := page.Data.(types.ProfileCalendarHeatmap); ok {
		<div class=" w-screen md:w-full md:overflow-hidden">
			<div
				id="horizontal-scroll-container"
				class="flex flex-col justify-center items-center p-4 w-full overflow-x-auto h-min"
			>
				<div id="cal-heatmap" class="m-2 p-5"></div>
				<!-- <div id="legend"></div> -->
			</div>
		</div>
		@initCalendarHeatmap("cal-heatmap", data.Counts)
	}
}

script initCalendarHeatmap(elementID string, countsByDay []types.CountByDay) {

	createCalHeatmap(countsByDay, elementID)
}
