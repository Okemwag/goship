package pages

import (
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/types"
	"github.com/mikestefanello/pagoda/templates/components"
	"strconv"
)

templ HomeFeed(page *controller.Page) {
	<div
		id="homefeed-page"
		hx-ext="sse"
		sse-connect={ page.ToURL("realtime") }
	>
		if data, ok := page.Data.(types.HomeFeedData); ok {
			@hello(page, data.JustFinishedOnboarded)
			<div
				hx-get={ page.ToURL("home_feed.buttons") }
				hx-swap="this"
				hx-swap="outerHTML"
				hx-trigger="once,load"
			>
				@homeFeedButtonsWithCounts(page, 0, 0, 0, 0, 0, 0, true)
			</div>
			<div class="relative">
				<div id="homeFeedItems">
					@LocalLoadingIndicator()
					@HomeFeedItems(page)
				</div>
			</div>
			@LocalLoadingIndicator()
		}
	</div>
}

templ hello(page *controller.Page, justFinishedOnboarded bool) {
	<div class="text-black dark:text-white pt-6 md:pt-4">
		<div class="mx-auto flex flex-row justify-around items-center">
			<span class="visible lg:invisible">
				@components.ThemeToggle("landing-page-theme-toggle")
			</span>
			<h1 class="text-xl sm:text-2xl md:text-3xl font-bold text-center flex">
				<span
					class="bg-clip-text text-transparent bg-gradient-to-r from-pink-500 via-red-500 to-yellow-500"
				>
					Hello 
					if page.IsAuth {
						{ page.AuthUser.Name }
					}
					!
				</span>
				<img src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/pwa/v2/icons/logo-animated-sm.gif" class="ml-1 sm:ml-2 w-8 h-8 sm:w-9 sm:h-9 md:w-10 md:h-10 lg:w-11 lg:h-11 xl:w-12 xl:h-12" alt="Logo"/>
			</h1>
			<span
				id="helpMe"
				just-onboarded-data={ templ.JSONString(justFinishedOnboarded) }
				class="cursor-pointer"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="w-4 h-4 lg:w-5 lg:h-5 icon icon-tabler icons-tabler-outline icon-tabler-help"
				><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path><path d="M12 17l0 .01"></path><path d="M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4"></path></svg>
			</span>
		</div>
	</div>
	@startDriverJS()
}

script startDriverJS() {
	const button = document.getElementById('helpMe');

	const driver = window.driver.js.driver;

	let steps = [
		{ popover: { title: 'Welcome!', description: 'This app is about fostering relationships by answering questions. You can see each other\'s answers only if both people answer the same question.' } },
		{ element: '.temporalized-item-container:nth-child(1)', popover: { title: 'Questions', description: 'Questions are the main way to interact' }},          
		{ element: '.temporalized-item-container:nth-child(1) .question-buttons', popover: { title: 'Rate and answer questions', description: 'Please like or dislike questions. This helps us suggest better questions for you.' }},         
		{ element: '#new-questions', popover: { title: 'New questions', description: 'This is your main page. You\'ll see new questions, drafts, and answered questions here.' }},
		{ element: '#all-convos-btn', popover: { description: 'Find all past answers shared between you and your partner here.' }},
		{ element: '#drafts-btn', popover: { description: 'Find your unpublished answer drafts here.' }},
		{ element: '#all-liked-questions-button', popover: { description: 'Find questions you liked but haven\'t answered yet here.' }},
		{ element: '#waiting-for-partner-answers', popover: { description: 'See questions you answered that your partner hasn\'t here.' }},
		{ element: '#waiting-for-your-answers', popover: { description: 'See questions your partner answered that you haven\'t here.' }},
		{ element: '#connectWithPartner',
			popover: {
				title: 'Invite your partner',
				description: 'Make sure to invite your partner to connect with you.'
			}
		},
		{ element: '#helpMe', popover: { description: 'Almost done...to get back to this help menu at any later time, click here.' }},
		{ popover: { title: 'Happy Connecting!', description: 'That\'s all! Start using the app now.' } },
	]

	const driverObj = driver({
			showProgress: true,
			steps: steps,
		});
	
	document.getElementById('helpMe').addEventListener('click', () => {
		console.log("clicked!");
		driverObj.drive(); // Start the driver tour when clicked
	});

	
	document.addEventListener('DOMContentLoaded', function() {
		const justOnboardedAttr = JSON.parse(button.getAttribute('just-onboarded-data'));
		console.log("justOnboardedAttr",justOnboardedAttr);

		if (justOnboardedAttr == true) {
			console.log("start onboarding tour");
			driverObj.drive();
		}
	});
}

templ HomeFeedButtons(page *controller.Page) {
	if data, ok := page.Data.(types.HomeFeedButtonsData); ok {
		@homeFeedButtonsWithCounts(page, data.NumDrafts, data.NumLikedQuestions, data.NumWaitingOnPartner, data.NumWaitingOnYou, data.MaxNumCanWaitOnYou, 0, false)
	}
}

templ homeFeedButtonsWithCounts(page *controller.Page, numDrafts, numLikedQuestions, numWaitingOnPartner, leaderboardNotifCount, numWaitingOnYou, maxNumCanWaitOnYou int, loading bool) {
	<div
		id="homeFeedButtonGroup"
		hx-get={ page.ToURL("home_feed.buttons") }
		hx-swap="outerHTML"
		hx-target="this"
		hx-push-url="false"
		hx-trigger="sse:update_num_notifs"
		class="p-3 flex flex-wrap sm:flex-row justify-center items-center text-sm"
	>
		<button
			id="new-questions"
			hx-get={ page.ToURL("home_feed") }
			hx-target="#homeFeedItems"
			hx-select="#homeFeedItems"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-400 dark:bg-gray-500 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l-2 0l9 -9l9 9l-2 0"></path><path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path><path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"></path></svg>
			<span>
				{ "Feed" }
			</span>
		</button>
		<button
			id="all-convos-btn"
			hx-get={ page.ToURL("convos") }
			hx-target="#homeFeedItems"
			hx-select="#convos"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-300 dark:bg-gray-800 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			>
				<path
					stroke="none"
					d="M0 0h24v24H0z"
					fill="none"
				></path><path d="M21 14l-3 -3h-7a1 1 0 0 1 -1 -1v-6a1 1 0 0 1 1 -1h9a1 1 0 0 1 1 1v10"></path><path d="M14 15v2a1 1 0 0 1 -1 1h-7l-3 3v-10a1 1 0 0 1 1 -1h2"></path>
			</svg>
			<span>
				{ "All Conversations" }
			</span>
		</button>
		<button
			id="drafts-btn"
			hx-get={ page.ToURL("drafts") }
			hx-target="#homeFeedItems"
			hx-select="#allDraftsList"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-300 dark:bg-gray-800 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4"></path><path d="M13.5 6.5l4 4"></path></svg>
			<span>
				{ "Drafts" }
			</span>
			if loading {
				<span
					id="draft-count-indicator"
					class="flex items-center ml-1 p-0.5 text-xs font-medium text-white bg-purple-600 rounded-full"
				>
					@miniButtonCountSpinner()
				</span>
			} else if numDrafts !=0 {
				<span
					id="draft-count-indicator"
					class="ml-1 px-1 text-xs font-medium text-white bg-purple-600 rounded-full"
				>{ strconv.Itoa(numDrafts) }</span>
			}
		</button>
		<button
			id="all-liked-questions-button"
			hx-get={ page.ToURL("question.get_liked") }
			hx-target="#homeFeedItems"
			hx-select="#allLikeQuestionsList"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-300 dark:bg-gray-800 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M7 11v8a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1v-7a1 1 0 0 1 1 -1h3a4 4 0 0 0 4 -4v-1a2 2 0 0 1 4 0v5h3a2 2 0 0 1 2 2l-1 5a2 3 0 0 1 -2 2h-7a3 3 0 0 1 -3 -3"></path></svg>
			<span>
				{ "Liked Questions" }
			</span>
			if loading {
				<span
					id="draft-count-indicator"
					class="flex items-center ml-1 p-0.5 text-xs font-medium text-white bg-purple-600 rounded-full"
				>
					@miniButtonCountSpinner()
				</span>
			} else if numLikedQuestions !=0 {
				<span
					id="liked-questions-count-indicator"
					class="ml-1 px-1 text-xs font-medium text-white bg-purple-600 rounded-full"
				>{ strconv.Itoa(numLikedQuestions) }</span>
			}
		</button>
		<button
			id="waiting-for-your-answers"
			hx-get={ page.ToURL("question.friends_waiting_for_me") }
			hx-target="#homeFeedItems"
			hx-select="#friendsWaitingForMeList"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-300 dark:bg-gray-800 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path><path d="M12 12l-3 2"></path><path d="M12 7v5"></path></svg>
			<span>
				{ "Waiting on You" }
			</span>
			if loading {
				<span
					id="waiting-for-your-answers-count-indicator"
					class="flex items-center ml-1 p-0.5 text-xs font-medium text-white bg-purple-600 rounded-full"
				>
					@miniButtonCountSpinner()
				</span>
			} else if numWaitingOnYou !=0 {
				<span
					id="waiting-on-partner-count-indicator"
					class="ml-1 px-1 text-xs font-medium text-white bg-purple-600 rounded-full"
				>
					{ fmt.Sprintf("%d", numWaitingOnYou) }
				</span>
			}
		</button>
		<button
			id="leaderboard"
			hx-get={ page.ToURL("unansweredForPartner") }
			hx-target="#homeFeedItems"
			hx-select="#leaderboardContent"
			hx-indicator="next #local-page-loading"
			hx-swap="innerHTML"
			class="bg-gray-300 dark:bg-gray-800 hover:bg-gray-400 dark:hover:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-bold py-2 px-4 rounded-full inline-flex items-center m-2"
			_="on click
                remove .bg-gray-400 from <button/> in #homeFeedButtonGroup
				then remove .dark:bg-gray-500 from <button/> in #homeFeedButtonGroup
				then add .bg-gray-300 to <button/> in #homeFeedButtonGroup
				then add .dark:bg-gray-800 to <button/> in #homeFeedButtonGroup
				then remove .bg-gray-300 from me
				then remove .dark:bg-gray-800 from me
                then add .bg-gray-400 to me
				then add .dark:bg-gray-500 to me
            "
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="w-5 h-5 mr-2"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M8 21l8 0"></path><path d="M12 17l0 4"></path><path d="M7 4l10 0"></path><path d="M17 4v8a5 5 0 0 1 -10 0v-8"></path><path d="M5 9m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path><path d="M19 9m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path></svg>
			<span>
				{ "Leaderboard" }
			</span>
			if loading {
				<span
					id="leaderboardNotificationsCount"
					class="flex items-center ml-1 p-0.5 text-xs font-medium text-white bg-purple-600 rounded-full"
				>
					@miniButtonCountSpinner()
				</span>
			} else if leaderboardNotifCount !=0 {
				<span
					id="waiting-on-partner-count-indicator"
					class="ml-1 px-1 text-xs font-medium text-white bg-purple-600 rounded-full"
				>{ fmt.Sprintf("%d", leaderboardNotifCount) }</span>
			}
		</button>
	</div>
}

templ miniButtonCountSpinner() {
	<svg
		width="24"
		height="24"
		viewBox="0 0 24 24"
		xmlns="http://www.w3.org/2000/svg"
		class="h-3 w-3 text-white fill-white"
	>
		<style>.spinner_P7sC{transform-origin:center;animation:spinner_svv2 .75s infinite linear}@keyframes spinner_svv2{100%{transform:rotate(360deg)}}</style>
		<path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z" class="spinner_P7sC"></path>
	</svg>
}

templ HomeFeedItems(page *controller.Page) {
	if data, ok := page.Data.(types.HomeFeedData); ok {
		<div id="homeFeedQuestions">
			<div class="temporalized-home-feed">
				for _, item := range []string{"Pizza", "Pepperoni", "Genoa", "Salami", "Sashimi", "Spaghetti", "Bolognese"} {
					<div class="bg-slate-100 dark:bg-slate-700 rounded-xl my-4 p-5 flex justify-center items-center">
						{ item }
					</div>
				}
				if data.NextPageURL != "" {
					<div
						id="message-item"
						hx-get={ data.NextPageURL }
						hx-trigger="intersect once"
						hx-indicator="#bottom-loading"
						hx-select=".temporalized-home-feed"
						hx-swap="beforeend swap:outerHTML"
					></div>
				}
			</div>
			// TODO: the below fails to show when hitting the end of infinite scroll on home page, it only shows on page reload. Not a game changer, but certainly a nicer experience if we show it at end of infinite scroll.
			if data.RanOutOfQuestions {
				<div class="bg-secondary text-secondary-content rounded-lg m-2 p-4 mx-10 flex flex-row flex-wrap justify-center items-center text-xs sm:text-sm">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 20 20"
						fill="currentColor"
						class="w-5 h-5 m-1 sm:mr-2"
					>
						<path d="M5.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H6a.75.75 0 0 1-.75-.75V12ZM6 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H6ZM7.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H8a.75.75 0 0 1-.75-.75V12ZM8 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H8ZM9.25 10a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H10a.75.75 0 0 1-.75-.75V10ZM10 11.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V12a.75.75 0 0 0-.75-.75H10ZM9.25 14a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H10a.75.75 0 0 1-.75-.75V14ZM12 9.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V10a.75.75 0 0 0-.75-.75H12ZM11.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H12a.75.75 0 0 1-.75-.75V12ZM12 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H12ZM13.25 10a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H14a.75.75 0 0 1-.75-.75V10ZM14 11.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V12a.75.75 0 0 0-.75-.75H14Z"></path>
						<path fill-rule="evenodd" d="M5.75 2a.75.75 0 0 1 .75.75V4h7V2.75a.75.75 0 0 1 1.5 0V4h.25A2.75 2.75 0 0 1 18 6.75v8.5A2.75 2.75 0 0 1 15.25 18H4.75A2.75 2.75 0 0 1 2 15.25v-8.5A2.75 2.75 0 0 1 4.75 4H5V2.75A.75.75 0 0 1 5.75 2Zm-1 5.5c-.69 0-1.25.56-1.25 1.25v6.5c0 .69.56 1.25 1.25 1.25h10.5c.69 0 1.25-.56 1.25-1.25v-6.5c0-.69-.56-1.25-1.25-1.25H4.75Z" clip-rule="evenodd"></path>
					</svg>
					Looks like you ran out of questions for today. Come back tomorrow for more.
				</div>
			}
		</div>
		if data.NextPageURL != "" {
			@components.BottomLoadingIndicator()
		}
	}
}

templ LocalLoadingIndicator() {
	<div id="local-page-loading" class="loading-overlay absolute top-0 left-0 flex justify-center items-center z-50 w-full h-full rounded-xl fading-bg">
		<div class="flex justify-center items-center w-full h-full text-black dark:text-white">
			<svg fill="currentColor" class="w-1/12 h-auto" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<style>.spinner_b2T7{animation:spinner_xe7Q .8s linear infinite}.spinner_YRVV{animation-delay:-.65s}.spinner_c9oY{animation-delay:-.5s}@keyframes spinner_xe7Q{93.75%,100%{r:3px}46.875%{r:.2px}}</style>
				<circle class="spinner_b2T7" cx="4" cy="12" r="3"></circle><circle class="spinner_b2T7 spinner_YRVV" cx="12" cy="12" r="3"></circle><circle class="spinner_b2T7 spinner_c9oY" cx="20" cy="12" r="3"></circle>
			</svg>
		</div>
	</div>
	<style>
		.loading-overlay {
			z-index: 9999;         /* High z-index to be on top of other content */
			display:none;
		}

		.htmx-request .loading-overlay{
			display:inline;
		}
		.htmx-request.loading-overlay{
			display:inline;
		}

		.fading-bg {
			background: radial-gradient(
				ellipse at center,
				rgba(0, 0, 0, 0.2) 0%,
				rgba(0, 0, 0, 0.07) 70%,
				rgba(0, 0, 0, 0) 100%
			);
		}
    </style>
}
