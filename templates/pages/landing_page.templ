package pages

import (
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/types"
	"github.com/mikestefanello/pagoda/templates/components"
)

templ LandingPage(page *controller.Page) {
	<div class="top-0 z-50 flex flex-row justify-center items-center flex-wrap">
		if !page.IsIosDevice {
			@components.PWAMobileInstallButton(page)
		}
		@nativeMobileLoginButton(page)
		<div class="block lg:hidden">
			@components.DocsButton(page)
		</div>
		@mobileDarkModeButton()
	</div>
	if data, ok := page.Data.(types.LandingPage); ok {
		<div id="homePage">
			@AnimateOnScrollLibrary()
			@welcomeScreen(data)
			<div class="bg-secondary text-secondary-content">
				@introComponent(data)
			</div>
			@verticalSpacer("h-10")
			@features()
			@verticalSpacer("h-10")
			<div class="bg-primary text-primary-content">
				@quote1(data.Quote1)
			</div>
			@verticalSpacer("h-10")
			// @mockupsCarrousel()
			if data.IsPaymentEnabled {
				@verticalSpacer("h-10")
				<div class="bg-primary text-primary-content flex justify-center">
					@pricingForLandingPage(page, data)
				</div>
			}
			@QASection(data.QAItems)
			@verticalSpacer("h-10")
			<div class="bg-primary text-primary-content">
				@madeWithLove(data)
			</div>
			<div class="bg-primary text-primary-content">
				@socialMedia(data)
				@components.TextFooter(page)
			</div>
			<div>
				@landingPageJS()
			</div>
		</div>
	}
}

templ nativeMobileLoginButton(page *controller.Page) {
	<div id="mobileLoginButton">
		<div class="block lg:hidden sticky top-0 z-10 flex flex-row justify-center items-center m-2">
			<div class="w-32 sm:w-48 md:w-60">
				@components.LogInButton(page, "p-2 text-lg")
			</div>
		</div>
	</div>
}

templ mobileDarkModeButton() {
	<div id="mobileDarkModeButton">
		<div class="block lg:hidden sticky top-0 z-10 flex flex-row justify-center items-center m-2">
			@components.ThemeToggle("landing-page-theme-toggle")
		</div>
	</div>
}

templ AnimateOnScrollLibrary() {
	<!-- Animate on scroll library -->
	<link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet"/>
	<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
	<script>
        AOS.init();
    </script>
}

templ mockupsCarrousel() {
	<!-- Slider main container -->
	<div class="swiper w-[100%]">
		<!-- Additional required wrapper -->
		<div class="swiper-wrapper">
			<!-- Slides -->
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+0.jpg"
					alt="Deepen Connections"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+1.jpg"
					alt="Boost Your Sex Life"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+2.jpg"
					alt="Dating to Committed"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+3.jpg"
					alt="Enhance Dating"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+4.jpg"
					alt="Skip Small Talk"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+5.jpg"
					alt="Privacy First"
					width="1242"
					height="2688"
				/>
			</div>
			<div class="swiper-slide max-w-[80%] sm:max-w-80 h-auto items-center justify-center p-1">
				<img
					class="w-min object-contain rounded-3xl max-h-[800px] object-contain"
					src="https://chatbond-static.s3.us-west-002.backblazeb2.com/cherie/screenshots/v1.1/jpeg/Apple+iPhone+11+Pro+Max+Screenshot+6.jpg"
					alt="Dark Mode"
					width="1242"
					height="2688"
				/>
			</div>
		</div>
		<div class="swiper-button-prev"></div>
		<div class="swiper-button-next"></div>
		<div class="swiper-scrollbar"></div>
		<div class="swiper-pagination"></div>
	</div>
	<style>
	.swiper-slide {
		display: flex
	}
	</style>
	@initCarousel()
}

templ features() {
	<div x-data="{ currentTab: 1 }">
		<ul class="flex flex-wrap -mb-px text-sm font-medium text-center">
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 1") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 1, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 1 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-at"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0"></path><path d="M16 12v1.5a2.5 2.5 0 0 0 5 0v-1.5a9 9 0 1 0 -5.5 8.28"></path></svg>
					{ "Emails" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 2") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 2, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 2 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M3 5m0 3a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v8a3 3 0 0 1 -3 3h-12a3 3 0 0 1 -3 -3z"></path><path d="M3 10l18 0"></path><path d="M7 15l.01 0"></path><path d="M11 15l2 0"></path></svg>
					{ "Payments" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 3") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 3, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 3 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path><path d="M12 10m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0"></path><path d="M6.168 18.849a4 4 0 0 1 3.832 -2.849h4a4 4 0 0 1 3.834 2.855"></path></svg>
					{ "Login" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 4") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 4, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 4 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 6m-8 0a8 3 0 1 0 16 0a8 3 0 1 0 -16 0"></path><path d="M4 6v6a8 3 0 0 0 16 0v-6"></path><path d="M4 12v6a8 3 0 0 0 16 0v-6"></path></svg>
					{ "Database" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 5") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 5, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 5 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M3 21v-4a4 4 0 1 1 4 4h-4"></path><path d="M21 3a16 16 0 0 0 -12.8 10.2"></path><path d="M21 3a16 16 0 0 1 -10.2 12.8"></path><path d="M10.6 9a9 9 0 0 1 4.4 4.4"></path></svg>
					{ "Style" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 6") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 6, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 6 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M6 5a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2v-14z"></path><path d="M11 4h2"></path><path d="M12 17v.01"></path></svg>
					{ "Mobile Ready" }
				</button>
			</li>
			<li class="me-2" @click={ fmt.Sprintf("currentTab = 7") }>
				<button
					:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === 7, 'hover:text-gray-600 hover:border-gray-300': currentTab !== 7 }") }
					class="flex items-center justify-center inline-block p-4 rounded-t-lg"
					href="#"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-credit-card"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 13a8 8 0 0 1 7 7a6 6 0 0 0 3 -5a9 9 0 0 0 6 -8a3 3 0 0 0 -3 -3a9 9 0 0 0 -8 6a6 6 0 0 0 -5 3"></path><path d="M7 14a6 6 0 0 0 -3 6a6 6 0 0 0 6 -3"></path><path d="M15 9m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path></svg>
					{ "Deployments" }
				</button>
			</li>
		</ul>
		<div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 1") }
			>
				<h1 class="text-lg font-semibold" text-lg>Emails</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Send transactional emails")
					</li>
					<li>
						@featurePoint("Templates for account activation, password reset, newsletter.")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 5h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 2") }
			>
				<h1 class="text-lg font-semibold" text-lg>Payments</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Create Stripe checkout sessions")
					</li>
					<li>
						@featurePoint("Monthly subscriptions")
					</li>
					<li>
						@featurePoint("Handle webhook payments")
					</li>
					<li>
						@featurePoint("TODO: add one-time payments")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 5h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 3") }
			>
				<h1 class="text-lg font-semibold" text-lg>Login</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Login with username + password")
					</li>
					<li>
						@featurePoint("TODO: magic link flow")
					</li>
					<li>
						@featurePoint("Private user area")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 5h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 4") }
			>
				<h1 class="text-lg font-semibold" text-lg>Database</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Postgres support (i.e. Supabase, Neon etc)")
					</li>
					<li>
						@featurePoint("Vector-ready (PGVector integrated)")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 10h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 5") }
			>
				<h1 class="text-lg font-semibold" text-lg>Style</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Components available (HTMX, AlpineJS, Hyperscript)")
					</li>
					<li>
						@featurePoint("20+ themes with DaisyUI")
					</li>
					<li>
						@featurePoint("Light + Dark mode")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 8h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 6") }
			>
				<h1 class="text-lg font-semibold" text-lg>Mobile</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Fully PWA-ready")
					</li>
					<li>
						@featurePoint("IOS native wrapper with push notifications and payments")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 15h")
					</li>
				</ul>
			</div>
			<div
				class="p-4 rounded-lg bg-gray-100 dark:bg-gray-800"
				x-show={ fmt.Sprintf("currentTab === 7") }
			>
				<h1 class="text-lg font-semibold" text-lg>Deployments</h1>
				<ul class="p-2 md:p-4">
					<li>
						@featurePoint("Deploy from bare metal to Cloud VMs with Kamal")
					</li>
					<li class="text-green-500">
						@featurePoint("Timed saved: 4h")
					</li>
				</ul>
			</div>
		</div>
	</div>
}

templ featurePoint(point string) {
	<span class="flex">
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="mr-1 icon icon-tabler icons-tabler-outline icon-tabler-check"
		><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l5 5l10 -10"></path></svg>
		<span>{ point }</span>
	</span>
}

script initCarousel() {
	// Function to initialize Swiper
	function initializeSwiper() {
		if (typeof Swiper !== 'undefined') {
			const swiper = new Swiper('.swiper', {
				slidesPerView: "auto",
				spaceBetween: 10,

				// Navigation arrows
				navigation: {
					nextEl: '.swiper-button-next',
					prevEl: '.swiper-button-prev',
				},
			
				scrollbar: {
					el: ".swiper-scrollbar",
					hide: true,
				},
			});
		} else {
			console.error('Swiper library is not available.');
		}
	}

	// Check if Swiper is loaded and initialize it
	document.addEventListener('DOMContentLoaded', () => {
	// Wait for Swiper to be loaded if necessary
	if (typeof Swiper === 'undefined') {
		// Optionally, load Swiper dynamically if not loaded
		// Example of dynamically loading Swiper:
		const script = document.createElement('script');
		script.src = 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js'; 
		script.onload = initializeSwiper;
		document.head.appendChild(script);
	} else {
		initializeSwiper();
	}
	});

}

templ welcomeScreen(d types.LandingPage) {
	<section class="bg-primary">
		<div class="grid max-w-screen-xl px-4 py-8 mx-auto lg:gap-8 xl:gap-0 lg:py-16 lg:grid-cols-12">
			<div class="mr-auto place-self-center lg:col-span-7">
				<div class="block lg:hidden mb-4 sm:mb-8 flex justify-center">
					<span class="flex justify-center items-center space-x-3 bg-slate-100 dark:bg-white rounded-full w-fit py-2 px-5">
						<img src="/files/icon.png" class="h-8 w-8 sm:h-12 sm:w-12" alt="Logo"/>
						<span class="text-2xl font-semibold text-black">{ d.AppName }</span>
					</span>
				</div>
				<h1
					class="max-w-2xl mb-4 text-4xl font-extrabold tracking-tight leading-none md:text-5xl xl:text-6xl
					bg-gradient-to-r from-blue-300 via-green-400 to-indigo-400
					inline-block text-transparent bg-clip-text strong-black-shadow"
				>
					{ d.Title }
				</h1>
				<p class="max-w-2xl mb-6 font-light text-gray-500 lg:mb-8 md:text-lg lg:text-xl dark:text-gray-400">
					{ d.Subtitle }
				</p>
				<a
					href="https://github.com/leomorpho/GoShip"
					target="_blank"
					class="inline-flex items-center justify-center px-5 py-3 text-base font-medium text-center text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="currentColor"
						class="mr-1 md:mr-2 w-6 h-6 sm:w-8 sm:h-8"
					><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5.315 2.1c.791 -.113 1.9 .145 3.333 .966l.272 .161l.16 .1l.397 -.083a13.3 13.3 0 0 1 4.59 -.08l.456 .08l.396 .083l.161 -.1c1.385 -.84 2.487 -1.17 3.322 -1.148l.164 .008l.147 .017l.076 .014l.05 .011l.144 .047a1 1 0 0 1 .53 .514a5.2 5.2 0 0 1 .397 2.91l-.047 .267l-.046 .196l.123 .163c.574 .795 .93 1.728 1.03 2.707l.023 .295l.007 .272c0 3.855 -1.659 5.883 -4.644 6.68l-.245 .061l-.132 .029l.014 .161l.008 .157l.004 .365l-.002 .213l-.003 3.834a1 1 0 0 1 -.883 .993l-.117 .007h-6a1 1 0 0 1 -.993 -.883l-.007 -.117v-.734c-1.818 .26 -3.03 -.424 -4.11 -1.878l-.535 -.766c-.28 -.396 -.455 -.579 -.589 -.644l-.048 -.019a1 1 0 0 1 .564 -1.918c.642 .188 1.074 .568 1.57 1.239l.538 .769c.76 1.079 1.36 1.459 2.609 1.191l.001 -.678l-.018 -.168a5.03 5.03 0 0 1 -.021 -.824l.017 -.185l.019 -.12l-.108 -.024c-2.976 -.71 -4.703 -2.573 -4.875 -6.139l-.01 -.31l-.004 -.292a5.6 5.6 0 0 1 .908 -3.051l.152 -.222l.122 -.163l-.045 -.196a5.2 5.2 0 0 1 .145 -2.642l.1 -.282l.106 -.253a1 1 0 0 1 .529 -.514l.144 -.047l.154 -.03z"></path></svg>
					<span
						class="text-black dark:text-white text-lg md:text-xl font-bold m-2"
					>{ d.GetNowText } </span>
					<svg
						class="w-5 h-5 ml-2 -mr-1"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
					><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
				</a>
			</div>
			<div class="hidden lg:mt-0 lg:col-span-5 lg:flex">
				<img src="https://goship-static.s3.us-west-002.backblazeb2.com/assets/gopher.png" alt="mockup"/>
			</div>
		</div>
	</section>
}

templ introComponent(d types.LandingPage) {
	<div class="w-full py-2 px-2 md:px-5">
		<div class="md:items-center md:space-x-4">
			<div class="m-8" data-aos="zoom-in-up" data-aos-once="true">
				<div
					class="pb-1 font-black text-4xl md:text-5xl mb-5
                bg-gradient-to-r from-purple-600 to-yellow-500 dark:from-purple-400 dark:to-yellow-400
                inline-block text-transparent bg-clip-text
                "
				>
					{ d.IntroTitle }
				</div>
				// <div class="text-xl md:text-2xl">
				// 	@templ.Raw(d.IntroText)
				// </div>
			</div>
		</div>
	</div>
}

templ verticalSpacer(height string) {
	<div class={ height }></div>
}

templ questionForHome() {
	<!-- Create type 1 question -->
	<div class="flex items-stretch rounded-lg">
		<!-- Question div -->
		<div class="bg-gradient-to-r from-violet-300 to-yellow-100 flex-grow p-2 md:p-3 flex flex-col items-center rounded-lg">
			<div class="pr-2 flex m-3">
				@components.ToolTip("Waiting on your answer", "You can see their answer as soon as you publish your own! 😊 ⏰️")
			</div>
			<span class="text-black md:text-lg">
				<div
					x-data="{
                    text: '',
                    textArray : ['Question-led conversations for new or existing relationships.', 'Curated daily questions.'],
                    textIndex: 0,
					charIndex: 0,
					typeSpeed: 50,
					cursorSpeed: 550,
					pauseEnd: 1500,
					pauseStart: 20,
					direction: 'forward',
                }"
					x-init="$nextTick(() => {
                    let typingInterval = setInterval(startTyping, $data.typeSpeed);

                    function startTyping(){
                        if (!document.getElementById('homePage')) {
                            // Element not found, exit the function or clear the interval
                            clearInterval(typingInterval);
                            return;
                        }
                        let current = $data.textArray[ $data.textIndex ];

                        // check to see if we hit the end of the string
                        if($data.charIndex > current.length){
                                $data.direction = 'backward';
                                clearInterval(typingInterval);

                                setTimeout(function(){
                                    typingInterval = setInterval(startTyping, $data.typeSpeed);
                                }, $data.pauseEnd);
                        }

                        $data.text = current.substring(0, $data.charIndex);

                        if($data.direction == 'forward')
                        {
                            $data.charIndex += 1;
                        }
                        else
                        {
							if($data.charIndex == 0)
                            {
                                $data.direction = 'forward';
                                clearInterval(typingInterval);
                                setTimeout(function(){
                                    $data.textIndex += 1;
                                    if($data.textIndex >= $data.textArray.length)
                                    {
                                        $data.textIndex = 0;
                                    }
                                    typingInterval = setInterval(startTyping, $data.typeSpeed);
                                }, $data.pauseStart);
                            }
                            $data.charIndex -= 1;
                        }
                    }

                    setInterval(function() {
                        if (!document.getElementById('homePage')) {
                            return; // Not on the home page, don't run the script
                        }
                        if ($refs.cursor && $refs.cursor.classList.contains('hidden')) {
                            $refs.cursor.classList.remove('hidden');
                        } else if ($refs.cursor) {
                            $refs.cursor.classList.add('hidden');
                        }
                    }, $data.cursorSpeed);

                })"
					class="flex items-center justify-center mx-auto text-center max-w-7xl"
				>
					<div class="relative flex items-center justify-center h-auto m-2 md:m-3">
						<p class="font-medium leading-tight" x-text="text"></p>
						<span class="absolute right-0 w-2 -mr-2 bg-black h-3/4" x-ref="cursor"></span>
					</div>
				</div>
			</span>
		</div>
	</div>
}

templ quote1(quote string) {
	<div class="w-full py-2 px-2 md:px-5">
		<div class="md:items-center md:space-x-4">
			<div class="m-8">
				<div
					class="pb-1 font-black text-4xl md:text-5xl mb-5
                bg-gradient-to-r from-blue-500 via-green-500 to-indigo-500 dark:from-blue-400 dark:via-green-500 dark:to-indigo-400
                inline-block text-transparent bg-clip-text
                "
				>
					{ quote }
				</div>
			</div>
		</div>
	</div>
}

templ quote2(quote string) {
	<div class="w-full py-2 px-2 md:px-5">
		<div class="md:items-center md:space-x-4">
			<div class="m-8" data-aos="zoom-in-up" data-aos-once="true">
				<div
					class="pb-1 font-black text-4xl md:text-5xl mb-5
                bg-gradient-to-r from-purple-600 to-yellow-500 dark:from-purple-400 dark:to-yellow-400
                inline-block text-transparent bg-clip-text
                "
				>
					{ quote }
				</div>
			</div>
		</div>
	</div>
}

templ newsletterRegistration(page *controller.Page) {
	if _, ok := page.Data.(types.LandingPage); ok {
		<div id="map-view" class="w-full">
			<div hx-get={ page.ToURL("emailSubscribe") } hx-swap="this" hx-trigger="load once"></div>
		</div>
	}
}

templ callToActionForOtherChatbondApp(d types.LandingPage) {
	<div class="w-full">
		<div class="flex flex-col md:flex-row md:items-center md:space-x-4">
			<!-- Image Content -->
			<div
				class="relative w-full md:w-1/2 h-80 bg-cover bg-center md:rounded-r-3xl"
			>
				<div class="absolute inset-0 flex items-center justify-center">
					<a href={ templ.SafeURL(d.OtherAppURL) } target="_blank" rel="noopener noreferrer" class="text-white font-bold text-7xl hover:underline">{ d.OtherAppName }</a>
				</div>
				<div class="hero-overlay bg-opacity-30 md:rounded-r-3xl"></div>
			</div>
			<!-- Text Content -->
			<div class="w-full md:w-1/2 flex flex-col p-14" data-aos="fade-up" data-aos-once="true">
				<div class="font-black text-3xl md:text-4xl mb-5 bg-gradient-to-r from-purple-600 to-yellow-500 dark:from-purple-400 dark:to-yellow-400 inline-block text-transparent bg-clip-text">
					{ d.OtherAppPitchTitle }
				</div>
				<a
					href={ templ.SafeURL(d.OtherAppURL) }
					target="_blank"
					rel="noopener noreferrer"
					class="bg-amber-600 hover:bg-amber-700 transition-colors duration-200
                    text-white sm:text-lg md:text-xl font-medium md:font-bold py-3 px-5 rounded-full inline-flex items-center min-w-full"
				>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mr-1 md:mr-3">
						<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9"></path>
					</svg>
					<span>{ d.OtherAppPitchText } </span>
				</a>
			</div>
		</div>
	</div>
}

templ pricingForLandingPage(page *controller.Page, data types.LandingPage) {
	<div class="w-full py-2 px-2 md:px-5 mt-2">
		<div class="flex flex-col justify-center w-full">
			<div data-aos="fade-up" data-aos-once="true">
				<div
					class="pb-1 flex justify-center w-full font-black text-5xl md:text-6xl
                bg-gradient-to-r from-pink-500 via-red-500 to-yellow-500
                inline-block text-transparent bg-clip-text
                "
				>Pricing</div>
			</div>
			@pricingCards(page, data.ProductProPrice, data.ProductProCode, nil, false)
		</div>
	</div>
}

templ QASection(questions []types.QAItem) {
	<div class="w-full py-8 px-4 md:px-6">
		<div class="max-w-3xl mx-auto">
			<div data-aos="fade-up" data-aos-once="true">
				<div
					class="pb-1 flex justify-center w-full font-black text-5xl md:text-6xl
                bg-gradient-to-r from-red-500 to-purple-500
                inline-block text-transparent bg-clip-text
                "
				>Q&A Section</div>
			</div>
			<div id="accordion-collapse" data-accordion="collapse">
				for _, qa := range questions {
					@QAIndividualSection(qa)
				}
			</div>
		</div>
	</div>
}

templ QAIndividualSection(qa types.QAItem) {
	<div
		class="collapsible mt-4 bg-slate-300 dark:bg-slate-800 text-slate-800 dark:text-white rounded-xl mouse-pointer"
		x-data="{ expanded: false }"
		x-cloak
	>
		<button
			@click="expanded = ! expanded"
			class="w-full p-2 flex items-center justify-center"
		>{ qa.Question }</button>
		<div
			x-show="expanded"
			x-collapse
			class="bg-slate-200 dark:bg-slate-900 text-slate-800 dark:text-white rounded-b-xl"
		>
			<div
				class="p-3 md:p-4"
			>
				{ qa.Answer }
			</div>
		</div>
	</div>
}

templ madeWithLove(d types.LandingPage) {
	<div class="w-full h-auto flex flex-col items-center justify-center md:flex-row md:items-center">
		<picture class="m-2">
			<!-- Images for larger screens -->
			<source media="(min-width: 768px)" srcset="https://goship-static.s3.us-west-002.backblazeb2.com/assets/goship.png"/>
			<!-- Images for medium screens -->
			<source media="(min-width: 640px)" srcset="https://goship-static.s3.us-west-002.backblazeb2.com/assets/goship.png"/>
			<!-- Default image for smaller screens -->
			<img
				loading="lazy"
				src="https://goship-static.s3.us-west-002.backblazeb2.com/assets/goship.png"
				class="w-24 h-auto sm:w-32 md:w-40 my-5 md:mx-5"
				alt="Icon"
			/>
		</picture>
		<div
			class="font-black text-4xl sm:text-5xl md:text-6xl m-3 md:mt-5 mb-5 text-center
        bg-gradient-to-r from-blue-500 via-green-500 to-indigo-500 dark:from-blue-400 dark:via-green-500 dark:to-indigo-400
        inline-block text-transparent bg-clip-text
        "
		>
			{ "Made with sprinkles of love and tears of frustration." }
		</div>
	</div>
}

templ socialMedia(d types.LandingPage) {
	<div
		class="w-full h-auto flex flex-wrap items-center justify-center md:flex-row md:items-center"
	>
		<!-- Tiktok handle -->
		<a
			href="https://www.tiktok.com/@chatbondhq"
			title="Go to tiktok page"
			target="_blank"
			rel="noopener noreferrer"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="currentColor"
				class="m-1 md:m-2 w-11 h-11 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M16.083 2h-4.083a1 1 0 0 0 -1 1v11.5a1.5 1.5 0 1 1 -2.519 -1.1l.12 -.1a1 1 0 0 0 .399 -.8v-4.326a1 1 0 0 0 -1.23 -.974a7.5 7.5 0 0 0 1.73 14.8l.243 -.005a7.5 7.5 0 0 0 7.257 -7.495v-2.7l.311 .153c1.122 .53 2.333 .868 3.59 .993a1 1 0 0 0 1.099 -.996v-4.033a1 1 0 0 0 -.834 -.986a5.005 5.005 0 0 1 -4.097 -4.096a1 1 0 0 0 -.986 -.835z"></path></svg>
		</a>
		<!-- Threads handle -->
		<a
			href="https://twitter.com/chatbondhq"
			title="Go to Twitter/X page"
			target="_blank"
			rel="noopener noreferrer"
		>
			// Threads for when ready
			// <svg
			// 	xmlns="http://www.w3.org/2000/svg"
			// 	width="16"
			// 	height="16"
			// 	fill="currentColor"
			// 	class="m-1 md:m-2 w-12 h-12 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			// 	viewBox="0 0 16 16"
			// >
			// 	<path d="M6.321 6.016c-.27-.18-1.166-.802-1.166-.802.756-1.081 1.753-1.502 3.132-1.502.975 0 1.803.327 2.394.948s.928 1.509 1.005 2.644q.492.207.905.484c1.109.745 1.719 1.86 1.719 3.137 0 2.716-2.226 5.075-6.256 5.075C4.594 16 1 13.987 1 7.994 1 2.034 4.482 0 8.044 0 9.69 0 13.55.243 15 5.036l-1.36.353C12.516 1.974 10.163 1.43 8.006 1.43c-3.565 0-5.582 2.171-5.582 6.79 0 4.143 2.254 6.343 5.63 6.343 2.777 0 4.847-1.443 4.847-3.556 0-1.438-1.208-2.127-1.27-2.127-.236 1.234-.868 3.31-3.644 3.31-1.618 0-3.013-1.118-3.013-2.582 0-2.09 1.984-2.847 3.55-2.847.586 0 1.294.04 1.663.114 0-.637-.54-1.728-1.9-1.728-1.25 0-1.566.405-1.967.868ZM8.716 8.19c-2.04 0-2.304.87-2.304 1.416 0 .878 1.043 1.168 1.6 1.168 1.02 0 2.067-.282 2.232-2.423a6.2 6.2 0 0 0-1.528-.161"></path>
			// </svg>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				x="0px"
				y="0px"
				width="100"
				height="100"
				viewBox="0 0 50 50"
				class="m-1 md:m-2 w-12 h-12 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			>
				<path fill="currentColor" d="M 11 4 C 7.134 4 4 7.134 4 11 L 4 39 C 4 42.866 7.134 46 11 46 L 39 46 C 42.866 46 46 42.866 46 39 L 46 11 C 46 7.134 42.866 4 39 4 L 11 4 z M 13.085938 13 L 21.023438 13 L 26.660156 21.009766 L 33.5 13 L 36 13 L 27.789062 22.613281 L 37.914062 37 L 29.978516 37 L 23.4375 27.707031 L 15.5 37 L 13 37 L 22.308594 26.103516 L 13.085938 13 z M 16.914062 15 L 31.021484 35 L 34.085938 35 L 19.978516 15 L 16.914062 15 z"></path>
			</svg>
		</a>
		<!-- Instagram -->
		<a
			href="https://www.instagram.com/chatbondhq/"
			title="Go to Instagram page"
			target="_blank"
			rel="noopener noreferrer"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				x="0px"
				y="0px"
				width="100"
				height="100"
				viewBox="0 0 50 50"
				class="m-1 md:m-2 w-12 h-12 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			>
				<path fill="currentColor" d="M 12 3 C 7.04 3 3 7.04 3 12 L 3 38 C 3 42.96 7.04 47 12 47 L 38 47 C 42.96 47 47 42.96 47 38 L 47 12 C 47 7.04 42.96 3 38 3 L 12 3 z M 38 8 L 41 8 C 41.55 8 42 8.45 42 9 L 42 12 C 42 12.55 41.55 13 41 13 L 38 13 C 37.45 13 37 12.55 37 12 L 37 9 C 37 8.45 37.45 8 38 8 z M 25 10 C 30.33 10 35.019688 12.8 37.679688 17 L 42 17 L 42 37 C 42 39.76 39.76 42 37 42 L 13 42 C 10.24 42 8 39.76 8 37 L 8 17 L 12.320312 17 C 14.980313 12.8 19.67 10 25 10 z M 25 12 C 17.83 12 12 17.83 12 25 C 12 32.17 17.83 38 25 38 C 32.17 38 38 32.17 38 25 C 38 17.83 32.17 12 25 12 z M 25 16 C 29.96 16 34 20.04 34 25 C 34 29.96 29.96 34 25 34 C 20.04 34 16 29.96 16 25 C 16 20.04 20.04 16 25 16 z"></path>
			</svg>
		</a>
		<!-- Facebook -->
		<a
			href="https://www.facebook.com/profile.php?id=61554353831580"
			title="Go to Facebook page"
			target="_blank"
			rel="noopener noreferrer"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				x="0px"
				y="0px"
				width="100"
				height="100"
				viewBox="0 0 50 50"
				class="m-1 md:m-2 w-12 h-12 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			>
				<path fill="currentColor" d="M25,3C12.85,3,3,12.85,3,25c0,11.03,8.125,20.137,18.712,21.728V30.831h-5.443v-5.783h5.443v-3.848 c0-6.371,3.104-9.168,8.399-9.168c2.536,0,3.877,0.188,4.512,0.274v5.048h-3.612c-2.248,0-3.033,2.131-3.033,4.533v3.161h6.588 l-0.894,5.783h-5.694v15.944C38.716,45.318,47,36.137,47,25C47,12.85,37.15,3,25,3z"></path>
			</svg>
		</a>
		<!-- Email -->
		<a
			href={ templ.SafeURL(fmt.Sprintf("mailto:%s", d.ContactEmail)) }
			title="Email us"
			target="_blank"
			rel="noopener noreferrer"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				x="0px"
				y="0px"
				width="100"
				height="100"
				viewBox="0 0 50 50"
				class="m-1 md:m-2 w-12 h-12 lg:w-16 lg:h-16 text-black dark:text-white fill-current"
			>
				<path fill="currentColor" d="M 14 4 C 8.4886661 4 4 8.4886661 4 14 L 4 36 C 4 41.511334 8.4886661 46 14 46 L 36 46 C 41.511334 46 46 41.511334 46 36 L 46 14 C 46 8.4886661 41.511334 4 36 4 L 14 4 z M 13 16 L 37 16 C 37.18 16 37.349766 16.020312 37.509766 16.070312 L 27.679688 25.890625 C 26.199688 27.370625 23.790547 27.370625 22.310547 25.890625 L 12.490234 16.070312 C 12.650234 16.020312 12.82 16 13 16 z M 11.070312 17.490234 L 18.589844 25 L 11.070312 32.509766 C 11.020312 32.349766 11 32.18 11 32 L 11 18 C 11 17.82 11.020312 17.650234 11.070312 17.490234 z M 38.929688 17.490234 C 38.979688 17.650234 39 17.82 39 18 L 39 32 C 39 32.18 38.979687 32.349766 38.929688 32.509766 L 31.400391 25 L 38.929688 17.490234 z M 20 26.410156 L 20.890625 27.310547 C 22.020625 28.440547 23.510234 29 24.990234 29 C 26.480234 29 27.959844 28.440547 29.089844 27.310547 L 29.990234 26.410156 L 37.509766 33.929688 C 37.349766 33.979688 37.18 34 37 34 L 13 34 C 12.82 34 12.650234 33.979687 12.490234 33.929688 L 20 26.410156 z"></path>
			</svg>
		</a>
	</div>
}

templ questionExample(questionType, prompt string) {
	<!-- Create type 1 question -->
	<div class=" w-full flex items-stretch rounded-lg">
		<a class="flex items-stretch">
			<div
				class={ "transition-colors duration-300 rounded-l-lg p-2 md:p-4 flex items-center", templ.KV("bg-violet-300 hover:bg-red-400", questionType == "matched"), templ.KV("bg-red-200 hover:bg-red-400", questionType != "matched") }
			>
				<span class="text-black w-4 sm:w-5 md:w-6 h-4 sm:h-5 md:h-6">
					<!-- Dislike icon -->
					<svg class="dislike-question-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
						<path d="M18.905 12.75a1.25 1.25 0 1 1-2.5 0v-7.5a1.25 1.25 0 0 1 2.5 0v7.5ZM8.905 17v1.3c0 .268-.14.526-.395.607A2 2 0 0 1 5.905 17c0-.995.182-1.948.514-2.826.204-.54-.166-1.174-.744-1.174h-2.52c-1.243 0-2.261-1.01-2.146-2.247.193-2.08.651-4.082 1.341-5.974C2.752 3.678 3.833 3 5.005 3h3.192a3 3 0 0 1 1.341.317l2.734 1.366A3 3 0 0 0 13.613 5h1.292v7h-.963c-.685 0-1.258.482-1.612 1.068a4.01 4.01 0 0 1-2.166 1.73c-.432.143-.853.386-1.011.814-.16.432-.248.9-.248 1.388Z"></path>
					</svg>
				</span>
			</div>
		</a>
		<!-- Question div -->
		<div
			class={ "bg-gradient-to-r flex-grow p-2 flex flex-col items-center", templ.KV("from-violet-300 to-yellow-100", questionType == "matched"), templ.KV("from-red-200 via-red-400 to-yellow-100", questionType != "matched") }
		>
			<div class="pr-2 flex m-3">
				if questionType == "matched" {
					@components.ToolTip("Waiting on your answer", "You can see their answer as soon as you publish your answer! 😊 ⏰️")
				} else {
					@components.ToolTip("New", "New daily question chosen for you 🐝")
				}
			</div>
			<span class="text-black md:text-lg">{ prompt }</span>
		</div>
		<!-- Arrow div -->
		<a class="flex items-stretch">
			<div class="p-2 md:p-4 flex items-center rounded-r-lg bg-yellow-200 hover:bg-green-400 transition-colors duration-300">
				<span class="text-black">
					<!-- Edit icon -->
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 20 20"
						fill="currentColor"
						class="w-4 sm:w-5 md:w-6 h-4 sm:h-5 md:h-6"
					>
						<path d="m5.433 13.917 1.262-3.155A4 4 0 0 1 7.58 9.42l6.92-6.918a2.121 2.121 0 0 1 3 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 0 1-.65-.65Z"></path>
						<path d="M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0 0 10 3H4.75A2.75 2.75 0 0 0 2 5.75v9.5A2.75 2.75 0 0 0 4.75 18h9.5A2.75 2.75 0 0 0 17 15.25V10a.75.75 0 0 0-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5Z"></path>
					</svg>
				</span>
			</div>
		</a>
	</div>
}

script landingPageJS() {
    function initAOS() {
        if (typeof AOS !== 'undefined') {
            AOS.init();
        }
    }
}
