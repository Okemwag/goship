package pages

import (
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/domain"
	"github.com/mikestefanello/pagoda/pkg/types"
	"github.com/mikestefanello/pagoda/templates/components"
)

templ NotificationsPage(page *controller.Page) {
	if data, ok := page.Data.(types.NormalNotificationsPageData); ok {
		// @components.PrevNavBarWithTitle("", "", "ðŸ”” Notifications")
		<div class="flex justify-center items-center w-full">
			<button
				hx-get={ page.ToURL("normalNotificationsMarkAllAsRead") }
				hx-target="#main-content"
				hx-select="#main-content"
				hx-indicator="next #page-loading"
				hx-swap="outerHTML"
				hx-push-url="false"
				type="button"
				class="flex items-center text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-xs px-5 py-1.5 me-2 my-4 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="icon icon-tabler icons-tabler-outline icon-tabler-eye mr-1"
				><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path></svg>
				Mark as all read
			</button>
		</div>
		<div class="notifications-container">
			if len(data.Notifications) > 0 {
				for _, notification := range data.Notifications {
					if notification != nil {
						@Notification(page, *notification)
					}
				}
				<div
					id="message-item"
					hx-get={ data.NextPageURL }
					hx-trigger="intersect once"
					hx-select=".notifications-container"
					hx-swap="beforeend swap:outerHTML"
				></div>
			} else {
				@components.EmptyPageMessage("No notifications found.", "")
			}
		</div>
		<div class="text-sm sm:text-base flex justify-center items-center p-2 m-2 mb-10 bg-slate-200 dark:bg-slate-800 rounded-lg">
			Notifications older than 15 days get automatically deleted.
		</div>
	}
	<style>
        // Deletion of a notification
        .notification-card.htmx-swapping {
            opacity: 0;
            transition: opacity 1s ease-out;
        }
    </style>
}

templ Notification(page *controller.Page, notification domain.Notification) {
	<div
		id={ fmt.Sprintf("notification-card-%v", notification.ID) }
		class={ "notification-card p-4 rounded-lg shadow mb-4 relative flex items-center justify-between cursor-pointer",
                        templ.KV("bg-slate-100 dark:bg-slate-600 text-black dark:text-white font-bold", !notification.Read),
                        templ.KV("bg-slate-300 dark:bg-slate-800 text-slate-700 dark:text-slate-100 font-normal", notification.Read) }
		if !notification.Read && notification.Link == "" {
			hx-post={ page.ToURL("markNormalNotificationRead", notification.ID) + "?csrf=" + page.CSRF }
			hx-trigger="click"
			hx-swap="none"
		}
	>
		<!-- Created at field -->
		<div
			class="flex-grow flex-col items-center"
			if notification.Type != domain.NotificationTypeCommittedRelationshipRequest && notification.Link != "" {
				if !notification.Read {
					x-data={ fmt.Sprintf(`{ triggerPost() {
						fetch('%s', {
							method: 'POST'
						}).then(response => {
							console.log('Notification marked as read', response);
						}).catch(error => {
							console.error('Error marking notification as read', error);
						});
					}}`, page.ToURL("markNormalNotificationRead", notification.ID) + "?csrf=" + page.CSRF) }
					@click="triggerPost()"
				}
				hx-get={ notification.Link }
				hx-target="#main-content"
				hx-select="#main-content"
				hx-indicator="next #page-loading"
				hx-swap="innerHTML show:window:top"
				hx-push-url="true"
				hx-trigger="click"
			}
		>
			<span
				if notification.ReadInNotificationsCenter && !notification.Read {
					hx-post={ page.ToURL("markNormalNotificationRead", notification.ID) + "?csrf=" + page.CSRF }
					hx-swap="none"
					hx-trigger="intersect once"
					hx-push-url="false"
				}
			></span>
			if notification.ReadInNotificationsCenter && !notification.Read {
				<span
					hx-post={ page.ToURL("markNormalNotificationRead", notification.ID) + "?csrf=" + page.CSRF }
					hx-swap="none"
					hx-trigger="intersect once"
					hx-push-url="false"
				></span>
			}
			<div class="flex justify-center items-center">
				<span
					x-data={ fmt.Sprintf("{ createdAt: '%s'}", notification.CreatedAt.Format("2006-01-02T15:04:05Z07:00")) }
					class={
						"mb-3 sm:mb-4",
						templ.KV("bg-red-100 text-red-800 text-xs font-medium inline-flex items-center px-2.5 py-0.5 rounded dark:bg-gray-700 dark:text-red-400 border border-red-400", !notification.Read),
						templ.KV("bg-gray-100 text-gray-800 text-xs font-medium inline-flex items-center px-2.5 py-0.5 rounded me-2 dark:bg-gray-700 dark:text-gray-400 border border-gray-500", notification.Read),
					}
				>
					<svg class="w-2.5 h-2.5 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
						<path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm3.982 13.982a1 1 0 0 1-1.414 0l-3.274-3.274A1.012 1.012 0 0 1 9 10V6a1 1 0 0 1 2 0v3.586l2.982 2.982a1 1 0 0 1 0 1.414Z"></path>
					</svg>
					<span x-timeago="createdAt"></span>
				</span>
			</div>
			<div class="flex flex-col">
				<div
					class="notification-title flex-grow flex flex-wrap items-center"
				>
					<p class="text-sm sm:text-base font-medium">{ notification.Title } </p>
				</div>
				<div class="flex flex-row mt-1">
					<div
						class="notification-content flex-grow flex flex-wrap items-center"
					>
						<p class="text-sm font-light">{ notification.Text } </p>
					</div>
					if notification.Type == domain.NotificationTypeCommittedRelationshipRequest {
						<div class="hidden lg:block m-1">
							@AcceptCommittedRequest(notification.Link)
						</div>
					} else {
						<div class="hidden lg:block m-1">
							@SeeMoreButton(notification.ButtonText)
						</div>
					}
				</div>
			</div>
			if notification.Type == domain.NotificationTypeCommittedRelationshipRequest {
				<div class="lg:hidden flex justify-center mt-2">
					@AcceptCommittedRequest(notification.Link)
				</div>
			} else {
				if notification.Link != "" {
					<div class="lg:hidden flex justify-center mt-2">
						@SeeMoreButton(notification.ButtonText)
					</div>
				}
			}
		</div>
		// if !notification.Read {
		// 	<span class="ml-1 flex w-3 h-3 me-3 bg-blue-500 rounded-full"></span>
		// }
	</div>
}

templ SeeMoreButton(btnText string) {
	<button
		type="button"
		class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 
							font-medium rounded-lg text-sm px-5 py-2.5
							dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
	>
		if btnText!="" {
			{ btnText }
		} else {
			{ "See more" }
		}
	</button>
}

templ AcceptCommittedRequest(link string) {
	<button
		hx-get={ link }
		hx-target="#main-content"
		hx-select="#main-content"
		hx-indicator="next #page-loading"
		hx-swap="outerHTML show:window:top"
		hx-push-url="true"
		type="button"
		class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 
							font-medium rounded-lg text-sm px-5 py-2.5
							dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
	>
		{ "Accept" }
	</button>
}
