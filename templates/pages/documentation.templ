package pages

import (
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/templates/components"
)

templ DocumentationLandingPage(page *controller.Page) {
	@docsPageLayout(page) {
		Build the same rich interfaces you would build with Javascript frameworks, but with HTML and Go. Limit the number of tools you use. Develop rapidly.
		<h2 class="text-2xl font-semibold py-3">Why the Hell Do We Need Another Boilerplate?</h2>
		<p>
			Well, I noticed that there were none for Go. Now, I know most Go folks like to build it all themselves. 
			And while I love doing that myself, I have many project ideas for which I just want to build <em>that specific project</em>, not the entire infra surrounding it,
			like auth, notifications, payments, file uploads etc. This project has served me well in bringing to production many projects so far. It has evolved far beyond 
			what I originally planned for, though there is still so much potentional to expand on and implement for.
		</p>
		<p>
			If you'd like a no-nonesense (or not too much?) starter kit to get your next project to production ASAP, 
			while also using awesome technologies like Go, you've found a suitable starting point!
		</p>
		<div class="flex items-center p-4 mb-4 text-sm text-yellow-800 rounded-lg bg-yellow-50 dark:bg-gray-800 dark:text-yellow-300" role="alert">
			<svg class="flex-shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
				<path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"></path>
			</svg>
			<span class="sr-only">Info</span>
			<div>
				<span class="font-medium">Warning alert!</span> this project is in active development as I am adding things after first trying them
				out in prod for <a href="https://cherie.chatbond.app/" target="_blank" class="font-mono text-blue-500 hover:text-purple-500 transition-colors transition ease-in-out delay-50 underline">Ch√©rie</a>, 
				a relationship app to grow your couple. Note that I
				would welcome any help to develop this boilerplate ‚ù§Ô∏è.
			</div>
		</div>
		<h2 class="text-2xl font-semibold py-3">Features</h2>
		@GoshipFeatures()
		@techStack()
	}
}

templ docsPageLayout(page *controller.Page) {
	<div class="max-w-3xl mx-auto p-6 space-y-6">
		if page.Title != "" {
			<h1 class="text-3xl font-semibold">{ page.Title }</h1>
		}
		{ children... }
	</div>
}

templ techStack() {
	<h2 class="text-2xl font-semibold">Tech Stack</h2>
	@components.AccordionItem("Backend", true) {
		<ul>
			// Find icons in SVG at https://icon-sets.iconify.design/logos/postgresql/
			@listEntry(components.EchoLogo(), "high performance, extensible, minimalist Go web framework")
			@listEntry(components.EntOrmLogo("h-4"), "simple yet powerful ORM for modeling and querying data")
			@listEntry(components.AsynqLogo(), "simple, reliable & efficient distributed task queue in Go")
			@listEntry(components.StripeLogo("h-5"), "payments solution")
		</ul>
	}
	@components.AccordionItem("Frontend", true) {
		<ul>
			@listEntry(components.HtmxLogo("h-4"), "build modern user interfaces with minimal javascript")
			@listEntry(components.TemplLogo("h-3"), "a powerful type-safe Go templating language")
			@listEntry(components.TailwindLogo("h-3"), "a utility-first CSS framework for rapid implementation")
			@listEntry(components.AlpineLogo("h-3"), "a lightweight javascript framework to sprinkle localized logic and state")
		</ul>
	}
	@components.AccordionItem("Storage", true) {
		<ul>
			@listEntry(components.PostgresLogo(), "Postgres") {
				<ul class="ps-10 mt-2 space-y-1">
					@listEntry(components.SupabaseLogo(), "host your DB on Supabase on any other hosting platform compatible with Postgres")
				</ul>
			}
			@listEntry(components.S3Logo("h-5"), "host files and images on any S3 compatible service (e.g. Backblaze)")
			@listEntry(components.RedisLogo(), "for task queueuing, caching and sse events")
		</ul>
	}
}

templ GoshipFeatures() {
	<div class="py-3">
		@singleOpenAccordion() {
			@singleOpenAccordionEntry("RealTime", "üå© Realtime", accordionRealtimeContent())
			@singleOpenAccordionEntry("Emails", "üì¨ Email Sending", accordionEmailContent())
			@singleOpenAccordionEntry("Payments", "üí∏ Payments", accordionPaymentContent())
			@singleOpenAccordionEntry("BackgroundTasks", "üèó Background Tasks", accordionBackgroundTasksContent())
			@singleOpenAccordionEntry("Notifications", "üîî Notifications", accordionNotificationsContent())
			@singleOpenAccordionEntry("Authentication", "üîê Auth Done For You", authenticationContent())
			@singleOpenAccordionEntry("FileUploads", "üìÇ File Uploads with AWS APIs", fileUploadsContent())
			@singleOpenAccordionEntry("MobileReady", "üì± Mobile Ready App", mobileReadyContent())
			@singleOpenAccordionEntry("Styles", "üíÖ Components and Styles", stylesContent())
			@singleOpenAccordionEntry("DropJSApp", "ü™Ç Drop-in any JS App", jsIslandsContent())
			@singleOpenAccordionEntry("DB", "üõ¢ AI-ready Database Layer", databaseContent())
			@singleOpenAccordionEntry("DB", "üß™Go Tests and E2E Tests with Playwright", testingContent())
			@singleOpenAccordionEntry("Deploy", "üöÄ Deploy Anywhere. Easily.", deployContent())
			// @singleOpenAccordionEntry("Authorization", "üëÆ Authorization", accordionNotificationsContent())
		}
	</div>
}

templ iconWithTitle(icon templ.Component, title string) {
	<span class="flex flex-row items-center">
		@icon
		<span class="ml-2">{ title }</span>
	</span>
}

templ accordionRealtimeContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Support for HTMX SSE extension</li>
		<li>Can be used with vanilla JS</li>
	</ul>
}

templ accordionEmailContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Support for SMTP and Resend API</li>
		<li>Pre-made templates for account activation, password reset and newsletter.</li>
	</ul>
}

templ accordionPaymentContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Stripe integration for monthly subscriptions</li>
		<li>Internal subscription management</li>
	</ul>
}

templ accordionBackgroundTasksContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Offload heavy tasks to background</li>
		<li>Realtime or scheduled</li>
	</ul>
}

templ accordionNotificationsContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Real-time or scheduled</li>
		<li>Supports push notifications to PWA, native iOS and native Android</li>
	</ul>
}

templ authenticationContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Email/Password logins</li>
		<li>Ready-made private user area</li>
	</ul>
}

templ mobileReadyContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Fully PWA-ready with internal FCM and push subscriptions management</li>
		<li>IOS native wrapper with push notifications and payments</li>
		<li>Pre-signed URLs!</li>
		<li>Styled with mobile/tablet/desktop in mind</li>
	</ul>
}

templ fileUploadsContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Internal management of uploaded files</li>
		<li>Host files and images on any S3 compatible service (e.g. Backblaze)</li>
		<li>Pre-signed URLs!</li>
	</ul>
}

templ stylesContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Light + Dark mode</li>
		<li>Many components available (HTMX, AlpineJS, Hyperscript)</li>
		<li>20+ themes with DaisyUI</li>
	</ul>
}

templ jsIslandsContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Designed for island architecture. Drop in any JS app and take advantage of already built infra</li>
		<li>Currently has SvelteJS and VanillaJS build step and static file serving</li>
	</ul>
}

templ databaseContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Postgres support (i.e. Supabase, Neon etc)</li>
		<li>Vector-ready (PGVector integrated) for your AI/ML applications!</li>
	</ul>
}

templ testingContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Go tests with automatic setup/teardown of DB container</li>
		<li>Playwright integration tests to make sure you don't break your previously working UIs!</li>
	</ul>
}

templ deployContent() {
	<ul class="space-y-1 list-disc list-inside ">
		<li>Deploy from bare metal to Cloud VMs with Kamal</li>
		<li>Single-command deploy after quick setup</li>
	</ul>
}

templ singleOpenAccordionEntry(entryName, title string, content templ.Component) {
	<div class="divide-y divide-neutral-300 dark:divide-neutral-700">
		<button
			id={ fmt.Sprintf("controlsAccordionItem%s", entryName) }
			type="button"
			class="flex w-full items-center justify-between gap-4 p-4 text-left sm:text-lg underline-offset-2 hover:bg-neutral-50/75 focus-visible:bg-neutral-50/75 focus-visible:underline focus-visible:outline-none dark:bg-neutral-900 dark:hover:bg-neutral-900/75 dark:focus-visible:bg-neutral-900/75"
			aria-controls={ fmt.Sprintf("accordionItem%s", entryName) }
			@click={ fmt.Sprintf("selectedAccordionItem = '%s'", entryName) }
			:class={ fmt.Sprintf("selectedAccordionItem === '%s' ? 'text-onSurfaceStrong dark:text-onSurfaceDarkStrong font-bold'  : 'text-onSurface dark:text-onSurfaceDark font-medium'", entryName) }
			:aria-expanded={ fmt.Sprintf("selectedAccordionItem === '%s' ? 'true' : 'false'", entryName) }
		>
			{ title }
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke="currentColor" class="size-5 shrink-0 transition" aria-hidden="true" :class={ fmt.Sprintf("selectedAccordionItem === '%s'  ?  'rotate-180'  :  ''", entryName) }>
				<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
			</svg>
		</button>
		<div x-cloak x-show={ fmt.Sprintf("selectedAccordionItem === '%s'", entryName) } id={ fmt.Sprintf("accordionItem%s", entryName) } role="region" aria-labelledby={ fmt.Sprintf("controlsAccordionItem%s", entryName) } x-collapse>
			<div class="p-4 text-sm sm:text-base text-pretty">
				@content
			</div>
		</div>
	</div>
}

templ singleOpenAccordion() {
	<div x-data="{ selectedAccordionItem: 'one' }" class="w-full divide-y divide-neutral-300 overflow-hidden rounded-md border border-neutral-300 bg-neutral-50/40 text-neutral-600 dark:divide-neutral-700 dark:border-neutral-700 dark:bg-neutral-900/50 dark:text-neutral-300">
		{ children... }
	</div>
}

templ listEntry(icon templ.Component, sentence string) {
	<li class="my-4">
		<span class="flex flex-row items-center">
			@icon
			<span class="ml-1">- { sentence }</span>
		</span>
		{ children... }
	</li>
}
